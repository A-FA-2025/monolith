
ECU v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f98  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  08011128  08011128  00012128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080117d8  080117d8  000130bc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080117d8  080117d8  000127d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080117e0  080117e0  000130bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080117e0  080117e0  000127e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080117e4  080117e4  000127e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  080117e8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000130bc  2**0
                  CONTENTS
 10 .bss          000069e0  200000bc  200000bc  000130bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006a9c  20006a9c  000130bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000130bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023569  00000000  00000000  000130ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005848  00000000  00000000  00036655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e70  00000000  00000000  0003bea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000177e  00000000  00000000  0003dd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bb4b  00000000  00000000  0003f48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c971  00000000  00000000  0006afd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee569  00000000  00000000  0009794a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00185eb3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000089e0  00000000  00000000  00185ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0018e8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000bc 	.word	0x200000bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011110 	.word	0x08011110

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	08011110 	.word	0x08011110

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b988 	b.w	8000d74 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	468e      	mov	lr, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	4688      	mov	r8, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4617      	mov	r7, r2
 8000a90:	d962      	bls.n	8000b58 <__udivmoddi4+0xdc>
 8000a92:	fab2 f682 	clz	r6, r2
 8000a96:	b14e      	cbz	r6, 8000aac <__udivmoddi4+0x30>
 8000a98:	f1c6 0320 	rsb	r3, r6, #32
 8000a9c:	fa01 f806 	lsl.w	r8, r1, r6
 8000aa0:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa4:	40b7      	lsls	r7, r6
 8000aa6:	ea43 0808 	orr.w	r8, r3, r8
 8000aaa:	40b4      	lsls	r4, r6
 8000aac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab0:	fa1f fc87 	uxth.w	ip, r7
 8000ab4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab8:	0c23      	lsrs	r3, r4, #16
 8000aba:	fb0e 8811 	mls	r8, lr, r1, r8
 8000abe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d909      	bls.n	8000ade <__udivmoddi4+0x62>
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ad0:	f080 80ea 	bcs.w	8000ca8 <__udivmoddi4+0x22c>
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	f240 80e7 	bls.w	8000ca8 <__udivmoddi4+0x22c>
 8000ada:	3902      	subs	r1, #2
 8000adc:	443b      	add	r3, r7
 8000ade:	1a9a      	subs	r2, r3, r2
 8000ae0:	b2a3      	uxth	r3, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aee:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af2:	459c      	cmp	ip, r3
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0x8e>
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afc:	f080 80d6 	bcs.w	8000cac <__udivmoddi4+0x230>
 8000b00:	459c      	cmp	ip, r3
 8000b02:	f240 80d3 	bls.w	8000cac <__udivmoddi4+0x230>
 8000b06:	443b      	add	r3, r7
 8000b08:	3802      	subs	r0, #2
 8000b0a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b0e:	eba3 030c 	sub.w	r3, r3, ip
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11d      	cbz	r5, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40f3      	lsrs	r3, r6
 8000b18:	2200      	movs	r2, #0
 8000b1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d905      	bls.n	8000b32 <__udivmoddi4+0xb6>
 8000b26:	b10d      	cbz	r5, 8000b2c <__udivmoddi4+0xb0>
 8000b28:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e7f5      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b32:	fab3 f183 	clz	r1, r3
 8000b36:	2900      	cmp	r1, #0
 8000b38:	d146      	bne.n	8000bc8 <__udivmoddi4+0x14c>
 8000b3a:	4573      	cmp	r3, lr
 8000b3c:	d302      	bcc.n	8000b44 <__udivmoddi4+0xc8>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	f200 8105 	bhi.w	8000d4e <__udivmoddi4+0x2d2>
 8000b44:	1a84      	subs	r4, r0, r2
 8000b46:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	4690      	mov	r8, r2
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d0e5      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b52:	e9c5 4800 	strd	r4, r8, [r5]
 8000b56:	e7e2      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	f000 8090 	beq.w	8000c7e <__udivmoddi4+0x202>
 8000b5e:	fab2 f682 	clz	r6, r2
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	f040 80a4 	bne.w	8000cb0 <__udivmoddi4+0x234>
 8000b68:	1a8a      	subs	r2, r1, r2
 8000b6a:	0c03      	lsrs	r3, r0, #16
 8000b6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b70:	b280      	uxth	r0, r0
 8000b72:	b2bc      	uxth	r4, r7
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b7a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b82:	fb04 f20c 	mul.w	r2, r4, ip
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d907      	bls.n	8000b9a <__udivmoddi4+0x11e>
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x11c>
 8000b92:	429a      	cmp	r2, r3
 8000b94:	f200 80e0 	bhi.w	8000d58 <__udivmoddi4+0x2dc>
 8000b98:	46c4      	mov	ip, r8
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ba0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ba4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba8:	fb02 f404 	mul.w	r4, r2, r4
 8000bac:	429c      	cmp	r4, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x144>
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x142>
 8000bb8:	429c      	cmp	r4, r3
 8000bba:	f200 80ca 	bhi.w	8000d52 <__udivmoddi4+0x2d6>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	1b1b      	subs	r3, r3, r4
 8000bc2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bc6:	e7a5      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bc8:	f1c1 0620 	rsb	r6, r1, #32
 8000bcc:	408b      	lsls	r3, r1
 8000bce:	fa22 f706 	lsr.w	r7, r2, r6
 8000bd2:	431f      	orrs	r7, r3
 8000bd4:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bdc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000be0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000be4:	4323      	orrs	r3, r4
 8000be6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bea:	fa1f fc87 	uxth.w	ip, r7
 8000bee:	fbbe f0f9 	udiv	r0, lr, r9
 8000bf2:	0c1c      	lsrs	r4, r3, #16
 8000bf4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bfc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	fa02 f201 	lsl.w	r2, r2, r1
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x1a0>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c0e:	f080 809c 	bcs.w	8000d4a <__udivmoddi4+0x2ce>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f240 8099 	bls.w	8000d4a <__udivmoddi4+0x2ce>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	eba4 040e 	sub.w	r4, r4, lr
 8000c20:	fa1f fe83 	uxth.w	lr, r3
 8000c24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c28:	fb09 4413 	mls	r4, r9, r3, r4
 8000c2c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c30:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c34:	45a4      	cmp	ip, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x1ce>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c3e:	f080 8082 	bcs.w	8000d46 <__udivmoddi4+0x2ca>
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d97f      	bls.n	8000d46 <__udivmoddi4+0x2ca>
 8000c46:	3b02      	subs	r3, #2
 8000c48:	443c      	add	r4, r7
 8000c4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c4e:	eba4 040c 	sub.w	r4, r4, ip
 8000c52:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c56:	4564      	cmp	r4, ip
 8000c58:	4673      	mov	r3, lr
 8000c5a:	46e1      	mov	r9, ip
 8000c5c:	d362      	bcc.n	8000d24 <__udivmoddi4+0x2a8>
 8000c5e:	d05f      	beq.n	8000d20 <__udivmoddi4+0x2a4>
 8000c60:	b15d      	cbz	r5, 8000c7a <__udivmoddi4+0x1fe>
 8000c62:	ebb8 0203 	subs.w	r2, r8, r3
 8000c66:	eb64 0409 	sbc.w	r4, r4, r9
 8000c6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c6e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c72:	431e      	orrs	r6, r3
 8000c74:	40cc      	lsrs	r4, r1
 8000c76:	e9c5 6400 	strd	r6, r4, [r5]
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	e74f      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000c7e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c82:	0c01      	lsrs	r1, r0, #16
 8000c84:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4638      	mov	r0, r7
 8000c92:	463c      	mov	r4, r7
 8000c94:	46b8      	mov	r8, r7
 8000c96:	46be      	mov	lr, r7
 8000c98:	2620      	movs	r6, #32
 8000c9a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c9e:	eba2 0208 	sub.w	r2, r2, r8
 8000ca2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ca6:	e766      	b.n	8000b76 <__udivmoddi4+0xfa>
 8000ca8:	4601      	mov	r1, r0
 8000caa:	e718      	b.n	8000ade <__udivmoddi4+0x62>
 8000cac:	4610      	mov	r0, r2
 8000cae:	e72c      	b.n	8000b0a <__udivmoddi4+0x8e>
 8000cb0:	f1c6 0220 	rsb	r2, r6, #32
 8000cb4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb8:	40b7      	lsls	r7, r6
 8000cba:	40b1      	lsls	r1, r6
 8000cbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cca:	b2bc      	uxth	r4, r7
 8000ccc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb08 f904 	mul.w	r9, r8, r4
 8000cda:	40b0      	lsls	r0, r6
 8000cdc:	4589      	cmp	r9, r1
 8000cde:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ce2:	b280      	uxth	r0, r0
 8000ce4:	d93e      	bls.n	8000d64 <__udivmoddi4+0x2e8>
 8000ce6:	1879      	adds	r1, r7, r1
 8000ce8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cec:	d201      	bcs.n	8000cf2 <__udivmoddi4+0x276>
 8000cee:	4589      	cmp	r9, r1
 8000cf0:	d81f      	bhi.n	8000d32 <__udivmoddi4+0x2b6>
 8000cf2:	eba1 0109 	sub.w	r1, r1, r9
 8000cf6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cfa:	fb09 f804 	mul.w	r8, r9, r4
 8000cfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d02:	b292      	uxth	r2, r2
 8000d04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d08:	4542      	cmp	r2, r8
 8000d0a:	d229      	bcs.n	8000d60 <__udivmoddi4+0x2e4>
 8000d0c:	18ba      	adds	r2, r7, r2
 8000d0e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d12:	d2c4      	bcs.n	8000c9e <__udivmoddi4+0x222>
 8000d14:	4542      	cmp	r2, r8
 8000d16:	d2c2      	bcs.n	8000c9e <__udivmoddi4+0x222>
 8000d18:	f1a9 0102 	sub.w	r1, r9, #2
 8000d1c:	443a      	add	r2, r7
 8000d1e:	e7be      	b.n	8000c9e <__udivmoddi4+0x222>
 8000d20:	45f0      	cmp	r8, lr
 8000d22:	d29d      	bcs.n	8000c60 <__udivmoddi4+0x1e4>
 8000d24:	ebbe 0302 	subs.w	r3, lr, r2
 8000d28:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	46e1      	mov	r9, ip
 8000d30:	e796      	b.n	8000c60 <__udivmoddi4+0x1e4>
 8000d32:	eba7 0909 	sub.w	r9, r7, r9
 8000d36:	4449      	add	r1, r9
 8000d38:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d3c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d40:	fb09 f804 	mul.w	r8, r9, r4
 8000d44:	e7db      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d46:	4673      	mov	r3, lr
 8000d48:	e77f      	b.n	8000c4a <__udivmoddi4+0x1ce>
 8000d4a:	4650      	mov	r0, sl
 8000d4c:	e766      	b.n	8000c1c <__udivmoddi4+0x1a0>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e6fd      	b.n	8000b4e <__udivmoddi4+0xd2>
 8000d52:	443b      	add	r3, r7
 8000d54:	3a02      	subs	r2, #2
 8000d56:	e733      	b.n	8000bc0 <__udivmoddi4+0x144>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	443b      	add	r3, r7
 8000d5e:	e71c      	b.n	8000b9a <__udivmoddi4+0x11e>
 8000d60:	4649      	mov	r1, r9
 8000d62:	e79c      	b.n	8000c9e <__udivmoddi4+0x222>
 8000d64:	eba1 0109 	sub.w	r1, r1, r9
 8000d68:	46c4      	mov	ip, r8
 8000d6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d6e:	fb09 f804 	mul.w	r8, r9, r4
 8000d72:	e7c4      	b.n	8000cfe <__udivmoddi4+0x282>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <HAL_ADC_ConvCpltCallback>:
extern uint32_t adc_sys_value[2];
extern uint32_t adc_ain_value[1];
extern uint32_t adc_conv_flag;
//extern uint32_t adc_ain_value2[ADC_COUNT2];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000d78:	b5b0      	push	{r4, r5, r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  // internal core temperature and input voltage
  if (hadc->Instance == ADC1) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a2d      	ldr	r2, [pc, #180]	@ (8000e3c <HAL_ADC_ConvCpltCallback+0xc4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d143      	bne.n	8000e12 <HAL_ADC_ConvCpltCallback+0x9a>
    adc_sys_value[0] = (uint16_t)(((110.0 - 30) * (adc_sys_value[0] - TS_CAL1) / (TS_CAL2 - TS_CAL1) + 30) * 10);
 8000d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a2d      	ldr	r2, [pc, #180]	@ (8000e44 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000d90:	8812      	ldrh	r2, [r2, #0]
 8000d92:	1a9b      	subs	r3, r3, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fbad 	bl	80004f4 <__aeabi_ui2d>
 8000d9a:	f04f 0200 	mov.w	r2, #0
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e48 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000da0:	f7ff fc22 	bl	80005e8 <__aeabi_dmul>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	4614      	mov	r4, r2
 8000daa:	461d      	mov	r5, r3
 8000dac:	4b27      	ldr	r3, [pc, #156]	@ (8000e4c <HAL_ADC_ConvCpltCallback+0xd4>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b24      	ldr	r3, [pc, #144]	@ (8000e44 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fbab 	bl	8000514 <__aeabi_i2d>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	4629      	mov	r1, r5
 8000dc6:	f7ff fd39 	bl	800083c <__aeabi_ddiv>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	4610      	mov	r0, r2
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e50 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000dd8:	f7ff fa50 	bl	800027c <__adddf3>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4610      	mov	r0, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	f04f 0200 	mov.w	r2, #0
 8000de8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000dea:	f7ff fbfd 	bl	80005e8 <__aeabi_dmul>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	4610      	mov	r0, r2
 8000df4:	4619      	mov	r1, r3
 8000df6:	f7ff fe09 	bl	8000a0c <__aeabi_d2uiz>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000e02:	601a      	str	r2, [r3, #0]
    adc_flag |= 1 << FLAG_ADC_SYS;
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	4a12      	ldr	r2, [pc, #72]	@ (8000e58 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000e0e:	6013      	str	r3, [r2, #0]
	  adc_ain_value[0] = HAL_ADC_GetValue(hadc);
	    adc_flag |= 1 << FLAG_ADC_AIN;
  }


}
 8000e10:	e010      	b.n	8000e34 <HAL_ADC_ConvCpltCallback+0xbc>
  else if (hadc->Instance == ADC2) {
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a11      	ldr	r2, [pc, #68]	@ (8000e5c <HAL_ADC_ConvCpltCallback+0xe4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d10b      	bne.n	8000e34 <HAL_ADC_ConvCpltCallback+0xbc>
	  adc_ain_value[0] = HAL_ADC_GetValue(hadc);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f003 f8c7 	bl	8003fb0 <HAL_ADC_GetValue>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000e26:	6013      	str	r3, [r2, #0]
	    adc_flag |= 1 << FLAG_ADC_AIN;
 8000e28:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	4a09      	ldr	r2, [pc, #36]	@ (8000e58 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3c:	40012000 	.word	0x40012000
 8000e40:	20006310 	.word	0x20006310
 8000e44:	1fff7a2c 	.word	0x1fff7a2c
 8000e48:	40540000 	.word	0x40540000
 8000e4c:	1fff7a2e 	.word	0x1fff7a2e
 8000e50:	403e0000 	.word	0x403e0000
 8000e54:	40240000 	.word	0x40240000
 8000e58:	2000630c 	.word	0x2000630c
 8000e5c:	40012100 	.word	0x40012100
 8000e60:	20006308 	.word	0x20006308

08000e64 <ANALOG_SETUP>:




int ANALOG_SETUP(void) {
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* ADC calibration is not supported in STM32F4 series */
  // while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
  // while(HAL_ADCEx_Calibration_Start(&hadc2) != HAL_OK);
  // while(HAL_ADCEx_Calibration_Start(&hadc3) != HAL_OK);
  return SYS_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e86:	4b21      	ldr	r3, [pc, #132]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000e88:	4a21      	ldr	r2, [pc, #132]	@ (8000f10 <MX_ADC1_Init+0x9c>)
 8000e8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000e8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e94:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ea6:	4b19      	ldr	r3, [pc, #100]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eae:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000eb6:	4a17      	ldr	r2, [pc, #92]	@ (8000f14 <MX_ADC1_Init+0xa0>)
 8000eb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eba:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed4:	480d      	ldr	r0, [pc, #52]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000ed6:	f002 fd25 	bl	8003924 <HAL_ADC_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ee0:	f001 fa50 	bl	8002384 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ee4:	2310      	movs	r3, #16
 8000ee6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000eec:	2302      	movs	r3, #2
 8000eee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <MX_ADC1_Init+0x98>)
 8000ef6:	f003 f887 	bl	8004008 <HAL_ADC_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f00:	f001 fa40 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200000d8 	.word	0x200000d8
 8000f10:	40012000 	.word	0x40012000
 8000f14:	0f000001 	.word	0x0f000001

08000f18 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <MX_ADC2_Init+0x98>)
 8000f2c:	4a21      	ldr	r2, [pc, #132]	@ (8000fb4 <MX_ADC2_Init+0x9c>)
 8000f2e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb0 <MX_ADC2_Init+0x98>)
 8000f32:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f36:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <MX_ADC2_Init+0x98>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <MX_ADC2_Init+0x98>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb0 <MX_ADC2_Init+0x98>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <MX_ADC2_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f52:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <MX_ADC2_Init+0x98>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f58:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <MX_ADC2_Init+0x98>)
 8000f5a:	4a17      	ldr	r2, [pc, #92]	@ (8000fb8 <MX_ADC2_Init+0xa0>)
 8000f5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <MX_ADC2_Init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <MX_ADC2_Init+0x98>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <MX_ADC2_Init+0x98>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f72:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <MX_ADC2_Init+0x98>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f78:	480d      	ldr	r0, [pc, #52]	@ (8000fb0 <MX_ADC2_Init+0x98>)
 8000f7a:	f002 fcd3 	bl	8003924 <HAL_ADC_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000f84:	f001 f9fe 	bl	8002384 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f88:	230b      	movs	r3, #11
 8000f8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <MX_ADC2_Init+0x98>)
 8000f9a:	f003 f835 	bl	8004008 <HAL_ADC_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000fa4:	f001 f9ee 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000120 	.word	0x20000120
 8000fb4:	40012100 	.word	0x40012100
 8000fb8:	0f000001 	.word	0x0f000001

08000fbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	@ 0x30
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a36      	ldr	r2, [pc, #216]	@ (80010b4 <HAL_ADC_MspInit+0xf8>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d116      	bne.n	800100c <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
 8000fe2:	4b35      	ldr	r3, [pc, #212]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	4a34      	ldr	r2, [pc, #208]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 8000fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fee:	4b32      	ldr	r3, [pc, #200]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	69bb      	ldr	r3, [r7, #24]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2012      	movs	r0, #18
 8001000:	f004 fa2f 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001004:	2012      	movs	r0, #18
 8001006:	f004 fa48 	bl	800549a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800100a:	e04e      	b.n	80010aa <HAL_ADC_MspInit+0xee>
  else if(adcHandle->Instance==ADC2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a2a      	ldr	r2, [pc, #168]	@ (80010bc <HAL_ADC_MspInit+0x100>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d149      	bne.n	80010aa <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	4a26      	ldr	r2, [pc, #152]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 8001020:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001024:	6453      	str	r3, [r2, #68]	@ 0x44
 8001026:	4b24      	ldr	r3, [pc, #144]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	4a1f      	ldr	r2, [pc, #124]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6313      	str	r3, [r2, #48]	@ 0x30
 8001042:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a18      	ldr	r2, [pc, #96]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800106a:	2302      	movs	r3, #2
 800106c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106e:	2303      	movs	r3, #3
 8001070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4619      	mov	r1, r3
 800107c:	4810      	ldr	r0, [pc, #64]	@ (80010c0 <HAL_ADC_MspInit+0x104>)
 800107e:	f004 fe43 	bl	8005d08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001082:	230f      	movs	r3, #15
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001086:	2303      	movs	r3, #3
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	480b      	ldr	r0, [pc, #44]	@ (80010c4 <HAL_ADC_MspInit+0x108>)
 8001096:	f004 fe37 	bl	8005d08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	2012      	movs	r0, #18
 80010a0:	f004 f9df 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010a4:	2012      	movs	r0, #18
 80010a6:	f004 f9f8 	bl	800549a <HAL_NVIC_EnableIRQ>
}
 80010aa:	bf00      	nop
 80010ac:	3730      	adds	r7, #48	@ 0x30
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40012000 	.word	0x40012000
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40012100 	.word	0x40012100
 80010c0:	40020800 	.word	0x40020800
 80010c4:	40020000 	.word	0x40020000

080010c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
//
//
//  *(uint64_t *)syslog.value = *(uint64_t *)can_rx_data;
//  SYS_LOG(LOG_INFO, CAN, can_rx_header.StdId);
//}
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	@ 0x30
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	f107 0214 	add.w	r2, r7, #20
 80010d8:	2100      	movs	r1, #0
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f003 fd2c 	bl	8004b38 <HAL_CAN_GetRxMessage>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d013      	beq.n	800110e <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
        sys_state.CAN = false;
 80010e6:	4a1d      	ldr	r2, [pc, #116]	@ (800115c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80010e8:	7853      	ldrb	r3, [r2, #1]
 80010ea:	f023 0301 	bic.w	r3, r3, #1
 80010ee:	7053      	strb	r3, [r2, #1]
        HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010f6:	481a      	ldr	r0, [pc, #104]	@ (8001160 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80010f8:	f004 ffba 	bl	8006070 <HAL_GPIO_WritePin>
        DEBUG_MSG("[%8lu] [ERR] CAN RX failed\r\n", HAL_GetTick());
        *(uint8_t *)syslog.value = 0xE0;
 80010fc:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80010fe:	22e0      	movs	r2, #224	@ 0xe0
 8001100:	721a      	strb	r2, [r3, #8]
        SYS_LOG(LOG_ERROR, CAN, CAN_ERR);
 8001102:	2201      	movs	r2, #1
 8001104:	2102      	movs	r1, #2
 8001106:	2001      	movs	r0, #1
 8001108:	f000 fd6e 	bl	8001be8 <SYS_LOG>
 800110c:	e022      	b.n	8001154 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
        return;
    }

    if (sys_state.CAN != true) {
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001110:	785b      	ldrb	r3, [r3, #1]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10a      	bne.n	8001132 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
        sys_state.CAN = true;
 800111c:	4a0f      	ldr	r2, [pc, #60]	@ (800115c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800111e:	7853      	ldrb	r3, [r2, #1]
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	7053      	strb	r3, [r2, #1]
        HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_SET);
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800112c:	480c      	ldr	r0, [pc, #48]	@ (8001160 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 800112e:	f004 ff9f 	bl	8006070 <HAL_GPIO_WritePin>
    }

    if (hcan->Instance == CAN1) {
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a0c      	ldr	r2, [pc, #48]	@ (8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8001138:	4293      	cmp	r3, r2
        DEBUG_MSG("CAN2 ID: 0x%03X Data: %02X %02X ...\r\n", rxHeader.StdId, rxData[0], rxData[1]);
        // CAN2 전용 로직 수행
    }

    // (예시) 로그 버퍼에 공통 저장
    *(uint64_t *)syslog.value = *(uint64_t *)rxData;
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	490b      	ldr	r1, [pc, #44]	@ (800116c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001144:	e9c1 2300 	strd	r2, r3, [r1]
    SYS_LOG(LOG_INFO, CAN, rxHeader.StdId);
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	461a      	mov	r2, r3
 800114c:	2102      	movs	r1, #2
 800114e:	2003      	movs	r0, #3
 8001150:	f000 fd4a 	bl	8001be8 <SYS_LOG>
}
 8001154:	3730      	adds	r7, #48	@ 0x30
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200012c0 	.word	0x200012c0
 8001160:	40021000 	.word	0x40021000
 8001164:	200012b0 	.word	0x200012b0
 8001168:	40006400 	.word	0x40006400
 800116c:	200012b8 	.word	0x200012b8

08001170 <HAL_CAN_ErrorCallback>:



/* CAN error occured */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  sys_state.CAN = false;
 8001178:	4a0e      	ldr	r2, [pc, #56]	@ (80011b4 <HAL_CAN_ErrorCallback+0x44>)
 800117a:	7853      	ldrb	r3, [r2, #1]
 800117c:	f023 0301 	bic.w	r3, r3, #1
 8001180:	7053      	strb	r3, [r2, #1]
  HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001188:	480b      	ldr	r0, [pc, #44]	@ (80011b8 <HAL_CAN_ErrorCallback+0x48>)
 800118a:	f004 ff71 	bl	8006070 <HAL_GPIO_WritePin>

  DEBUG_MSG("[%8lu] [ERR] CAN ERROR occured\r\n", HAL_GetTick());


  *(uint32_t *)syslog.value = HAL_CAN_GetError(hcan);
 800118e:	4c0b      	ldr	r4, [pc, #44]	@ (80011bc <HAL_CAN_ErrorCallback+0x4c>)
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f004 f85c 	bl	800524e <HAL_CAN_GetError>
 8001196:	4603      	mov	r3, r0
 8001198:	6023      	str	r3, [r4, #0]
  SYS_LOG(LOG_ERROR, CAN, CAN_ERR);
 800119a:	2201      	movs	r2, #1
 800119c:	2102      	movs	r1, #2
 800119e:	2001      	movs	r0, #1
 80011a0:	f000 fd22 	bl	8001be8 <SYS_LOG>

  HAL_CAN_ResetError(hcan);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f004 f85e 	bl	8005266 <HAL_CAN_ResetError>
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd90      	pop	{r4, r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200012c0 	.word	0x200012c0
 80011b8:	40021000 	.word	0x40021000
 80011bc:	200012b8 	.word	0x200012b8

080011c0 <HAL_CAN_RxFifo0FullCallback>:

/* CAN RX FIFO full */
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  sys_state.CAN = false;
 80011c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <HAL_CAN_RxFifo0FullCallback+0x44>)
 80011ca:	7853      	ldrb	r3, [r2, #1]
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	7053      	strb	r3, [r2, #1]
  HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011d8:	480b      	ldr	r0, [pc, #44]	@ (8001208 <HAL_CAN_RxFifo0FullCallback+0x48>)
 80011da:	f004 ff49 	bl	8006070 <HAL_GPIO_WritePin>

  DEBUG_MSG("[%8lu] [ERR] CAN RX FIFO full\r\n", HAL_GetTick());



  *(uint32_t *)syslog.value = HAL_CAN_GetState(hcan);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f004 f80d 	bl	80051fe <HAL_CAN_GetState>
 80011e4:	4603      	mov	r3, r0
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <HAL_CAN_RxFifo0FullCallback+0x4c>)
 80011ea:	601a      	str	r2, [r3, #0]
  SYS_LOG(LOG_ERROR, CAN, CAN_ERR);
 80011ec:	2201      	movs	r2, #1
 80011ee:	2102      	movs	r1, #2
 80011f0:	2001      	movs	r0, #1
 80011f2:	f000 fcf9 	bl	8001be8 <SYS_LOG>

  HAL_CAN_ResetError(hcan);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f004 f835 	bl	8005266 <HAL_CAN_ResetError>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200012c0 	.word	0x200012c0
 8001208:	40021000 	.word	0x40021000
 800120c:	200012b8 	.word	0x200012b8

08001210 <CAN_SendMessage>:
void HAL_CAN_RxFifo0OverrunCallback(CAN_HandleTypeDef *hcan) {
    HAL_GPIO_WritePin(GPIOE, ERR_SYS_Pin, GPIO_PIN_SET);
}


HAL_StatusTypeDef CAN_SendMessage(uint32_t id, uint8_t *data, uint8_t length) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	@ 0x30
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	4613      	mov	r3, r2
 800121c:	71fb      	strb	r3, [r7, #7]
	    CAN_TxHeaderTypeDef txHeader;
	    uint32_t txMailbox;

	    txHeader.DLC = length;
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	62bb      	str	r3, [r7, #40]	@ 0x28
	    txHeader.StdId = id;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	61bb      	str	r3, [r7, #24]
	    txHeader.IDE = CAN_ID_STD;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
	    txHeader.RTR = CAN_RTR_DATA;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24

	    return HAL_CAN_AddTxMessage(&hcan2, &txHeader, data, &txMailbox);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	f107 0118 	add.w	r1, r7, #24
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	4803      	ldr	r0, [pc, #12]	@ (8001248 <CAN_SendMessage+0x38>)
 800123a:	f003 fbad 	bl	8004998 <HAL_CAN_AddTxMessage>
 800123e:	4603      	mov	r3, r0
	}
 8001240:	4618      	mov	r0, r3
 8001242:	3730      	adds	r7, #48	@ 0x30
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000190 	.word	0x20000190

0800124c <Calibrate_Sensor>:

	// 보정 상태 확인 및 보정 수행 함수
	void Calibrate_Sensor() {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
	    uint8_t canData[8] = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]

	    // 보정 상태 초기화
	    canData[0] = CCW_RESET_CALIBRATION;
 800125a:	2305      	movs	r3, #5
 800125c:	703b      	strb	r3, [r7, #0]
	    if (CAN_SendMessage(LWS_CAN_ID_CONFIG, canData, 8) != HAL_OK) {
 800125e:	463b      	mov	r3, r7
 8001260:	2208      	movs	r2, #8
 8001262:	4619      	mov	r1, r3
 8001264:	f44f 60f8 	mov.w	r0, #1984	@ 0x7c0
 8001268:	f7ff ffd2 	bl	8001210 <CAN_SendMessage>
	        // 에러 처리
	    }

	    HAL_Delay(100); // 보정 초기화 후 약간의 지연
 800126c:	2064      	movs	r0, #100	@ 0x64
 800126e:	f002 fb35 	bl	80038dc <HAL_Delay>

	    // 보정 수행
	    canData[0] = CCW_SET_ANGLE_ZERO;
 8001272:	2303      	movs	r3, #3
 8001274:	703b      	strb	r3, [r7, #0]
	    if (CAN_SendMessage(LWS_CAN_ID_CONFIG, canData, 8) != HAL_OK) {
 8001276:	463b      	mov	r3, r7
 8001278:	2208      	movs	r2, #8
 800127a:	4619      	mov	r1, r3
 800127c:	f44f 60f8 	mov.w	r0, #1984	@ 0x7c0
 8001280:	f7ff ffc6 	bl	8001210 <CAN_SendMessage>
	        // 에러 처리
	    }

	}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <CAN_SETUP>:



int CAN_SETUP(void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	@ 0x30
 8001290:	af00      	add	r7, sp, #0


  CAN_FilterTypeDef CAN_FILTER;
  CAN_FILTER.FilterMode = CAN_FILTERMODE_IDMASK;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  CAN_FILTER.FilterScale = CAN_FILTERSCALE_32BIT;
 8001296:	2301      	movs	r3, #1
 8001298:	623b      	str	r3, [r7, #32]
  CAN_FILTER.FilterFIFOAssignment = CAN_RX_FIFO0;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  CAN_FILTER.FilterActivation = ENABLE;
 800129e:	2301      	movs	r3, #1
 80012a0:	627b      	str	r3, [r7, #36]	@ 0x24




  int ret;
    CAN_FILTER.FilterBank = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
    CAN_FILTER.FilterIdHigh = 0x0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
    CAN_FILTER.FilterMaskIdHigh = 0x0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
    CAN_FILTER.FilterIdLow = 0x0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
    CAN_FILTER.FilterMaskIdLow = 0x0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]

  	 ret = HAL_CAN_ConfigFilter(&hcan1, &CAN_FILTER);
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	4619      	mov	r1, r3
 80012ba:	4856      	ldr	r0, [pc, #344]	@ (8001414 <CAN_SETUP+0x188>)
 80012bc:	f003 fa4a 	bl	8004754 <HAL_CAN_ConfigFilter>
 80012c0:	4603      	mov	r3, r0
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (ret != HAL_OK) {
 80012c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <CAN_SETUP+0x42>
      return 1;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e09e      	b.n	800140c <CAN_SETUP+0x180>
    }

    ret = HAL_CAN_Start(&hcan1);
 80012ce:	4851      	ldr	r0, [pc, #324]	@ (8001414 <CAN_SETUP+0x188>)
 80012d0:	f003 fb1e 	bl	8004910 <HAL_CAN_Start>
 80012d4:	4603      	mov	r3, r0
 80012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (ret != HAL_OK) {
 80012d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <CAN_SETUP+0x56>
      return 2;
 80012de:	2302      	movs	r3, #2
 80012e0:	e094      	b.n	800140c <CAN_SETUP+0x180>
    }

    ret = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012e2:	2102      	movs	r1, #2
 80012e4:	484b      	ldr	r0, [pc, #300]	@ (8001414 <CAN_SETUP+0x188>)
 80012e6:	f003 fd49 	bl	8004d7c <HAL_CAN_ActivateNotification>
 80012ea:	4603      	mov	r3, r0
 80012ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (ret != HAL_OK) {
 80012ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <CAN_SETUP+0x6c>
      return 3;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e089      	b.n	800140c <CAN_SETUP+0x180>
    }

    ret = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_FULL);
 80012f8:	2104      	movs	r1, #4
 80012fa:	4846      	ldr	r0, [pc, #280]	@ (8001414 <CAN_SETUP+0x188>)
 80012fc:	f003 fd3e 	bl	8004d7c <HAL_CAN_ActivateNotification>
 8001300:	4603      	mov	r3, r0
 8001302:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (ret != HAL_OK) {
 8001304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <CAN_SETUP+0x82>
      return 4;
 800130a:	2304      	movs	r3, #4
 800130c:	e07e      	b.n	800140c <CAN_SETUP+0x180>
    }

    ret = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_OVERRUN);
 800130e:	2108      	movs	r1, #8
 8001310:	4840      	ldr	r0, [pc, #256]	@ (8001414 <CAN_SETUP+0x188>)
 8001312:	f003 fd33 	bl	8004d7c <HAL_CAN_ActivateNotification>
 8001316:	4603      	mov	r3, r0
 8001318:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (ret != HAL_OK) {
 800131a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <CAN_SETUP+0x98>
      return 5;
 8001320:	2305      	movs	r3, #5
 8001322:	e073      	b.n	800140c <CAN_SETUP+0x180>
    }

    ret = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_BUSOFF);
 8001324:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001328:	483a      	ldr	r0, [pc, #232]	@ (8001414 <CAN_SETUP+0x188>)
 800132a:	f003 fd27 	bl	8004d7c <HAL_CAN_ActivateNotification>
 800132e:	4603      	mov	r3, r0
 8001330:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (ret != HAL_OK) {
 8001332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <CAN_SETUP+0xb0>
      return 6;
 8001338:	2306      	movs	r3, #6
 800133a:	e067      	b.n	800140c <CAN_SETUP+0x180>
    }

    ret = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR);
 800133c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001340:	4834      	ldr	r0, [pc, #208]	@ (8001414 <CAN_SETUP+0x188>)
 8001342:	f003 fd1b 	bl	8004d7c <HAL_CAN_ActivateNotification>
 8001346:	4603      	mov	r3, r0
 8001348:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (ret != HAL_OK) {
 800134a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <CAN_SETUP+0xc8>
      return 7;
 8001350:	2307      	movs	r3, #7
 8001352:	e05b      	b.n	800140c <CAN_SETUP+0x180>
    }

    CAN_FILTER.FilterBank = 14;
 8001354:	230e      	movs	r3, #14
 8001356:	61bb      	str	r3, [r7, #24]
    CAN_FILTER.FilterIdHigh = 0x0;
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
    CAN_FILTER.FilterMaskIdHigh = 0x0;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
    CAN_FILTER.FilterIdLow = 0x0;
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
    CAN_FILTER.FilterMaskIdLow = 0x0002;
 8001364:	2302      	movs	r3, #2
 8001366:	613b      	str	r3, [r7, #16]
    ret = HAL_CAN_ConfigFilter(&hcan2, &CAN_FILTER);
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	4619      	mov	r1, r3
 800136c:	482a      	ldr	r0, [pc, #168]	@ (8001418 <CAN_SETUP+0x18c>)
 800136e:	f003 f9f1 	bl	8004754 <HAL_CAN_ConfigFilter>
 8001372:	4603      	mov	r3, r0
 8001374:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (ret != HAL_OK) {
 8001376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <CAN_SETUP+0xf4>
    	return 8;
 800137c:	2308      	movs	r3, #8
 800137e:	e045      	b.n	800140c <CAN_SETUP+0x180>
    }
    ret = HAL_CAN_Start(&hcan2);
 8001380:	4825      	ldr	r0, [pc, #148]	@ (8001418 <CAN_SETUP+0x18c>)
 8001382:	f003 fac5 	bl	8004910 <HAL_CAN_Start>
 8001386:	4603      	mov	r3, r0
 8001388:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (ret != HAL_OK) {
 800138a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <CAN_SETUP+0x108>
      return 9;
 8001390:	2309      	movs	r3, #9
 8001392:	e03b      	b.n	800140c <CAN_SETUP+0x180>
    }

    ret = HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001394:	2102      	movs	r1, #2
 8001396:	4820      	ldr	r0, [pc, #128]	@ (8001418 <CAN_SETUP+0x18c>)
 8001398:	f003 fcf0 	bl	8004d7c <HAL_CAN_ActivateNotification>
 800139c:	4603      	mov	r3, r0
 800139e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (ret != HAL_OK) {
 80013a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <CAN_SETUP+0x11e>
    	return 10;
 80013a6:	230a      	movs	r3, #10
 80013a8:	e030      	b.n	800140c <CAN_SETUP+0x180>
    }
    ret = HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_FULL);
 80013aa:	2104      	movs	r1, #4
 80013ac:	481a      	ldr	r0, [pc, #104]	@ (8001418 <CAN_SETUP+0x18c>)
 80013ae:	f003 fce5 	bl	8004d7c <HAL_CAN_ActivateNotification>
 80013b2:	4603      	mov	r3, r0
 80013b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (ret != HAL_OK) {
 80013b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <CAN_SETUP+0x134>
    	return 11;
 80013bc:	230b      	movs	r3, #11
 80013be:	e025      	b.n	800140c <CAN_SETUP+0x180>
    }
    ret = HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_OVERRUN);
 80013c0:	2108      	movs	r1, #8
 80013c2:	4815      	ldr	r0, [pc, #84]	@ (8001418 <CAN_SETUP+0x18c>)
 80013c4:	f003 fcda 	bl	8004d7c <HAL_CAN_ActivateNotification>
 80013c8:	4603      	mov	r3, r0
 80013ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (ret != HAL_OK) {
 80013cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <CAN_SETUP+0x14a>
    	return 12;
 80013d2:	230c      	movs	r3, #12
 80013d4:	e01a      	b.n	800140c <CAN_SETUP+0x180>
    }

    ret = HAL_CAN_ActivateNotification(&hcan2, CAN_IT_BUSOFF);
 80013d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013da:	480f      	ldr	r0, [pc, #60]	@ (8001418 <CAN_SETUP+0x18c>)
 80013dc:	f003 fcce 	bl	8004d7c <HAL_CAN_ActivateNotification>
 80013e0:	4603      	mov	r3, r0
 80013e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (ret != HAL_OK) {
 80013e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <CAN_SETUP+0x162>
    	return 13;
 80013ea:	230d      	movs	r3, #13
 80013ec:	e00e      	b.n	800140c <CAN_SETUP+0x180>
    }

    ret = HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR);
 80013ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013f2:	4809      	ldr	r0, [pc, #36]	@ (8001418 <CAN_SETUP+0x18c>)
 80013f4:	f003 fcc2 	bl	8004d7c <HAL_CAN_ActivateNotification>
 80013f8:	4603      	mov	r3, r0
 80013fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (ret != HAL_OK) {
 80013fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <CAN_SETUP+0x17a>
    	return 14;
 8001402:	230e      	movs	r3, #14
 8001404:	e002      	b.n	800140c <CAN_SETUP+0x180>





        	      Calibrate_Sensor();
 8001406:	f7ff ff21 	bl	800124c <Calibrate_Sensor>




  return SYS_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3730      	adds	r7, #48	@ 0x30
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000168 	.word	0x20000168
 8001418:	20000190 	.word	0x20000190

0800141c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001420:	4b17      	ldr	r3, [pc, #92]	@ (8001480 <MX_CAN1_Init+0x64>)
 8001422:	4a18      	ldr	r2, [pc, #96]	@ (8001484 <MX_CAN1_Init+0x68>)
 8001424:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8001426:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <MX_CAN1_Init+0x64>)
 8001428:	220c      	movs	r2, #12
 800142a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <MX_CAN1_Init+0x64>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001432:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <MX_CAN1_Init+0x64>)
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <MX_CAN1_Init+0x64>)
 800143a:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800143e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <MX_CAN1_Init+0x64>)
 8001442:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001446:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001448:	4b0d      	ldr	r3, [pc, #52]	@ (8001480 <MX_CAN1_Init+0x64>)
 800144a:	2200      	movs	r2, #0
 800144c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800144e:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <MX_CAN1_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001454:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <MX_CAN1_Init+0x64>)
 8001456:	2201      	movs	r2, #1
 8001458:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800145a:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <MX_CAN1_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001460:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <MX_CAN1_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <MX_CAN1_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	@ (8001480 <MX_CAN1_Init+0x64>)
 800146e:	f003 f875 	bl	800455c <HAL_CAN_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001478:	f000 ff84 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000168 	.word	0x20000168
 8001484:	40006400 	.word	0x40006400

08001488 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800148c:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <MX_CAN2_Init+0x64>)
 800148e:	4a18      	ldr	r2, [pc, #96]	@ (80014f0 <MX_CAN2_Init+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 8001492:	4b16      	ldr	r3, [pc, #88]	@ (80014ec <MX_CAN2_Init+0x64>)
 8001494:	2206      	movs	r2, #6
 8001496:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001498:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <MX_CAN2_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800149e:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <MX_CAN2_Init+0x64>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <MX_CAN2_Init+0x64>)
 80014a6:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80014aa:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <MX_CAN2_Init+0x64>)
 80014ae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80014b2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80014b4:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <MX_CAN2_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <MX_CAN2_Init+0x64>)
 80014bc:	2200      	movs	r2, #0
 80014be:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 80014c0:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <MX_CAN2_Init+0x64>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 80014c6:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <MX_CAN2_Init+0x64>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80014cc:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <MX_CAN2_Init+0x64>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <MX_CAN2_Init+0x64>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80014d8:	4804      	ldr	r0, [pc, #16]	@ (80014ec <MX_CAN2_Init+0x64>)
 80014da:	f003 f83f 	bl	800455c <HAL_CAN_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80014e4:	f000 ff4e 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000190 	.word	0x20000190
 80014f0:	40006800 	.word	0x40006800

080014f4 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08c      	sub	sp, #48	@ 0x30
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a62      	ldr	r2, [pc, #392]	@ (800169c <HAL_CAN_MspInit+0x1a8>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d154      	bne.n	80015c0 <HAL_CAN_MspInit+0xcc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001516:	4b62      	ldr	r3, [pc, #392]	@ (80016a0 <HAL_CAN_MspInit+0x1ac>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	4a60      	ldr	r2, [pc, #384]	@ (80016a0 <HAL_CAN_MspInit+0x1ac>)
 800151e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001520:	4b5f      	ldr	r3, [pc, #380]	@ (80016a0 <HAL_CAN_MspInit+0x1ac>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d10d      	bne.n	8001544 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]
 800152c:	4b5d      	ldr	r3, [pc, #372]	@ (80016a4 <HAL_CAN_MspInit+0x1b0>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001530:	4a5c      	ldr	r2, [pc, #368]	@ (80016a4 <HAL_CAN_MspInit+0x1b0>)
 8001532:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001536:	6413      	str	r3, [r2, #64]	@ 0x40
 8001538:	4b5a      	ldr	r3, [pc, #360]	@ (80016a4 <HAL_CAN_MspInit+0x1b0>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	4b56      	ldr	r3, [pc, #344]	@ (80016a4 <HAL_CAN_MspInit+0x1b0>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154c:	4a55      	ldr	r2, [pc, #340]	@ (80016a4 <HAL_CAN_MspInit+0x1b0>)
 800154e:	f043 0308 	orr.w	r3, r3, #8
 8001552:	6313      	str	r3, [r2, #48]	@ 0x30
 8001554:	4b53      	ldr	r3, [pc, #332]	@ (80016a4 <HAL_CAN_MspInit+0x1b0>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001560:	2303      	movs	r3, #3
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001570:	2309      	movs	r3, #9
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	484b      	ldr	r0, [pc, #300]	@ (80016a8 <HAL_CAN_MspInit+0x1b4>)
 800157c:	f004 fbc4 	bl	8005d08 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	2013      	movs	r0, #19
 8001586:	f003 ff6c 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800158a:	2013      	movs	r0, #19
 800158c:	f003 ff85 	bl	800549a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	2014      	movs	r0, #20
 8001596:	f003 ff64 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800159a:	2014      	movs	r0, #20
 800159c:	f003 ff7d 	bl	800549a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2100      	movs	r1, #0
 80015a4:	2015      	movs	r0, #21
 80015a6:	f003 ff5c 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80015aa:	2015      	movs	r0, #21
 80015ac:	f003 ff75 	bl	800549a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	2016      	movs	r0, #22
 80015b6:	f003 ff54 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80015ba:	2016      	movs	r0, #22
 80015bc:	f003 ff6d 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
 if(canHandle->Instance==CAN2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a39      	ldr	r2, [pc, #228]	@ (80016ac <HAL_CAN_MspInit+0x1b8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d163      	bne.n	8001692 <HAL_CAN_MspInit+0x19e>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b35      	ldr	r3, [pc, #212]	@ (80016a4 <HAL_CAN_MspInit+0x1b0>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	4a34      	ldr	r2, [pc, #208]	@ (80016a4 <HAL_CAN_MspInit+0x1b0>)
 80015d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80015d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015da:	4b32      	ldr	r3, [pc, #200]	@ (80016a4 <HAL_CAN_MspInit+0x1b0>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80015e6:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <HAL_CAN_MspInit+0x1ac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	4a2c      	ldr	r2, [pc, #176]	@ (80016a0 <HAL_CAN_MspInit+0x1ac>)
 80015ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80015f0:	4b2b      	ldr	r3, [pc, #172]	@ (80016a0 <HAL_CAN_MspInit+0x1ac>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10d      	bne.n	8001614 <HAL_CAN_MspInit+0x120>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	4b29      	ldr	r3, [pc, #164]	@ (80016a4 <HAL_CAN_MspInit+0x1b0>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001600:	4a28      	ldr	r2, [pc, #160]	@ (80016a4 <HAL_CAN_MspInit+0x1b0>)
 8001602:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001606:	6413      	str	r3, [r2, #64]	@ 0x40
 8001608:	4b26      	ldr	r3, [pc, #152]	@ (80016a4 <HAL_CAN_MspInit+0x1b0>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	4b22      	ldr	r3, [pc, #136]	@ (80016a4 <HAL_CAN_MspInit+0x1b0>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161c:	4a21      	ldr	r2, [pc, #132]	@ (80016a4 <HAL_CAN_MspInit+0x1b0>)
 800161e:	f043 0302 	orr.w	r3, r3, #2
 8001622:	6313      	str	r3, [r2, #48]	@ 0x30
 8001624:	4b1f      	ldr	r3, [pc, #124]	@ (80016a4 <HAL_CAN_MspInit+0x1b0>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001630:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001642:	2309      	movs	r3, #9
 8001644:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	4619      	mov	r1, r3
 800164c:	4818      	ldr	r0, [pc, #96]	@ (80016b0 <HAL_CAN_MspInit+0x1bc>)
 800164e:	f004 fb5b 	bl	8005d08 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	203f      	movs	r0, #63	@ 0x3f
 8001658:	f003 ff03 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800165c:	203f      	movs	r0, #63	@ 0x3f
 800165e:	f003 ff1c 	bl	800549a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	2040      	movs	r0, #64	@ 0x40
 8001668:	f003 fefb 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800166c:	2040      	movs	r0, #64	@ 0x40
 800166e:	f003 ff14 	bl	800549a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2041      	movs	r0, #65	@ 0x41
 8001678:	f003 fef3 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800167c:	2041      	movs	r0, #65	@ 0x41
 800167e:	f003 ff0c 	bl	800549a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	2042      	movs	r0, #66	@ 0x42
 8001688:	f003 feeb 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 800168c:	2042      	movs	r0, #66	@ 0x42
 800168e:	f003 ff04 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001692:	bf00      	nop
 8001694:	3730      	adds	r7, #48	@ 0x30
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40006400 	.word	0x40006400
 80016a0:	200001b8 	.word	0x200001b8
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020c00 	.word	0x40020c00
 80016ac:	40006800 	.word	0x40006800
 80016b0:	40020400 	.word	0x40020400

080016b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b23      	ldr	r3, [pc, #140]	@ (800174c <MX_DMA_Init+0x98>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a22      	ldr	r2, [pc, #136]	@ (800174c <MX_DMA_Init+0x98>)
 80016c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <MX_DMA_Init+0x98>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b1c      	ldr	r3, [pc, #112]	@ (800174c <MX_DMA_Init+0x98>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a1b      	ldr	r2, [pc, #108]	@ (800174c <MX_DMA_Init+0x98>)
 80016e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b19      	ldr	r3, [pc, #100]	@ (800174c <MX_DMA_Init+0x98>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	200d      	movs	r0, #13
 80016f8:	f003 feb3 	bl	8005462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80016fc:	200d      	movs	r0, #13
 80016fe:	f003 fecc 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	2010      	movs	r0, #16
 8001708:	f003 feab 	bl	8005462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800170c:	2010      	movs	r0, #16
 800170e:	f003 fec4 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	202f      	movs	r0, #47	@ 0x2f
 8001718:	f003 fea3 	bl	8005462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800171c:	202f      	movs	r0, #47	@ 0x2f
 800171e:	f003 febc 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	203b      	movs	r0, #59	@ 0x3b
 8001728:	f003 fe9b 	bl	8005462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800172c:	203b      	movs	r0, #59	@ 0x3b
 800172e:	f003 feb4 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	2045      	movs	r0, #69	@ 0x45
 8001738:	f003 fe93 	bl	8005462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800173c:	2045      	movs	r0, #69	@ 0x45
 800173e:	f003 feac 	bl	800549a <HAL_NVIC_EnableIRQ>

}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <DIGITAL_SETUP>:
  }
}
#endif

#ifdef ENABLE_MONITOR_DIGITAL
int DIGITAL_SETUP(void) {
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return SYS_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	@ 0x30
 8001764:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
 800177a:	4b45      	ldr	r3, [pc, #276]	@ (8001890 <MX_GPIO_Init+0x130>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a44      	ldr	r2, [pc, #272]	@ (8001890 <MX_GPIO_Init+0x130>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b42      	ldr	r3, [pc, #264]	@ (8001890 <MX_GPIO_Init+0x130>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	61bb      	str	r3, [r7, #24]
 8001790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	4b3e      	ldr	r3, [pc, #248]	@ (8001890 <MX_GPIO_Init+0x130>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a3d      	ldr	r2, [pc, #244]	@ (8001890 <MX_GPIO_Init+0x130>)
 800179c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001890 <MX_GPIO_Init+0x130>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b37      	ldr	r3, [pc, #220]	@ (8001890 <MX_GPIO_Init+0x130>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	4a36      	ldr	r2, [pc, #216]	@ (8001890 <MX_GPIO_Init+0x130>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017be:	4b34      	ldr	r3, [pc, #208]	@ (8001890 <MX_GPIO_Init+0x130>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b30      	ldr	r3, [pc, #192]	@ (8001890 <MX_GPIO_Init+0x130>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001890 <MX_GPIO_Init+0x130>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b2d      	ldr	r3, [pc, #180]	@ (8001890 <MX_GPIO_Init+0x130>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b29      	ldr	r3, [pc, #164]	@ (8001890 <MX_GPIO_Init+0x130>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	4a28      	ldr	r2, [pc, #160]	@ (8001890 <MX_GPIO_Init+0x130>)
 80017f0:	f043 0310 	orr.w	r3, r3, #16
 80017f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f6:	4b26      	ldr	r3, [pc, #152]	@ (8001890 <MX_GPIO_Init+0x130>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4b22      	ldr	r3, [pc, #136]	@ (8001890 <MX_GPIO_Init+0x130>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a21      	ldr	r2, [pc, #132]	@ (8001890 <MX_GPIO_Init+0x130>)
 800180c:	f043 0308 	orr.w	r3, r3, #8
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b1f      	ldr	r3, [pc, #124]	@ (8001890 <MX_GPIO_Init+0x130>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED00_Pin|LED01_Pin, GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	21c0      	movs	r1, #192	@ 0xc0
 8001822:	481c      	ldr	r0, [pc, #112]	@ (8001894 <MX_GPIO_Init+0x134>)
 8001824:	f004 fc24 	bl	8006070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_TELEMETRY_Pin|ERR_SYS_Pin|ERR_CAN_Pin|LED_HEARTBEAT_Pin
 8001828:	2200      	movs	r2, #0
 800182a:	f44f 417e 	mov.w	r1, #65024	@ 0xfe00
 800182e:	481a      	ldr	r0, [pc, #104]	@ (8001898 <MX_GPIO_Init+0x138>)
 8001830:	f004 fc1e 	bl	8006070 <HAL_GPIO_WritePin>
                          |LED_SD_Pin|LED_CAN_Pin|LED_ESP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED00_Pin LED01_Pin */
  GPIO_InitStruct.Pin = LED00_Pin|LED01_Pin;
 8001834:	23c0      	movs	r3, #192	@ 0xc0
 8001836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	4619      	mov	r1, r3
 800184a:	4812      	ldr	r0, [pc, #72]	@ (8001894 <MX_GPIO_Init+0x134>)
 800184c:	f004 fa5c 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_TELEMETRY_Pin ERR_SYS_Pin ERR_CAN_Pin LED_HEARTBEAT_Pin
                           LED_SD_Pin LED_CAN_Pin LED_ESP_Pin */
  GPIO_InitStruct.Pin = LED_TELEMETRY_Pin|ERR_SYS_Pin|ERR_CAN_Pin|LED_HEARTBEAT_Pin
 8001850:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8001854:	61fb      	str	r3, [r7, #28]
                          |LED_SD_Pin|LED_CAN_Pin|LED_ESP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4619      	mov	r1, r3
 8001868:	480b      	ldr	r0, [pc, #44]	@ (8001898 <MX_GPIO_Init+0x138>)
 800186a:	f004 fa4d 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTD_ACTIVE_Pin HV_ACTIVE_Pin BMS_FAULT_Pin IMD_FAULT_Pin
                           BSPD_FAULT_Pin */
  GPIO_InitStruct.Pin = RTD_ACTIVE_Pin|HV_ACTIVE_Pin|BMS_FAULT_Pin|IMD_FAULT_Pin
 800186e:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 8001872:	61fb      	str	r3, [r7, #28]
                          |BSPD_FAULT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001878:	2302      	movs	r3, #2
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187c:	f107 031c 	add.w	r3, r7, #28
 8001880:	4619      	mov	r1, r3
 8001882:	4806      	ldr	r0, [pc, #24]	@ (800189c <MX_GPIO_Init+0x13c>)
 8001884:	f004 fa40 	bl	8005d08 <HAL_GPIO_Init>

}
 8001888:	bf00      	nop
 800188a:	3730      	adds	r7, #48	@ 0x30
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800
 8001894:	40020000 	.word	0x40020000
 8001898:	40021000 	.word	0x40021000
 800189c:	40020c00 	.word	0x40020c00

080018a0 <HAL_I2C_AddrCallback>:


void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c,
                          uint8_t TransferDirection,
                          uint16_t AddrMatchCode)
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	70fb      	strb	r3, [r7, #3]
 80018ac:	4613      	mov	r3, r2
 80018ae:	803b      	strh	r3, [r7, #0]
    UNUSED(AddrMatchCode);

    if (TransferDirection == I2C_DIRECTION_TRANSMIT) {
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d10b      	bne.n	80018ce <HAL_I2C_AddrCallback+0x2e>
        // (기존) 레지스터 주소 수신 처리
        if (!I2C_slave_obj.reg_addr_rcvd) {
 80018b6:	4b31      	ldr	r3, [pc, #196]	@ (800197c <HAL_I2C_AddrCallback+0xdc>)
 80018b8:	785b      	ldrb	r3, [r3, #1]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d158      	bne.n	8001972 <HAL_I2C_AddrCallback+0xd2>
            HAL_I2C_Slave_Sequential_Receive_IT(
 80018c0:	2301      	movs	r3, #1
 80018c2:	2201      	movs	r2, #1
 80018c4:	492e      	ldr	r1, [pc, #184]	@ (8001980 <HAL_I2C_AddrCallback+0xe0>)
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f004 fe73 	bl	80065b2 <HAL_I2C_Slave_Seq_Receive_IT>
                    I2C_LAST_FRAME
                );
            }
        }
    }
}
 80018cc:	e051      	b.n	8001972 <HAL_I2C_AddrCallback+0xd2>
        if (I2C_slave_obj.reg_address == I2C_TELEMETRY_REG_ADDR) {
 80018ce:	4b2b      	ldr	r3, [pc, #172]	@ (800197c <HAL_I2C_AddrCallback+0xdc>)
 80018d0:	789b      	ldrb	r3, [r3, #2]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b71      	cmp	r3, #113	@ 0x71
 80018d6:	d11a      	bne.n	800190e <HAL_I2C_AddrCallback+0x6e>
            size_t len = sizeof(LOG);
 80018d8:	2310      	movs	r3, #16
 80018da:	60fb      	str	r3, [r7, #12]
            if (!ring_buffer_is_empty(&TELEMETRY_BUFFER)) {
 80018dc:	4829      	ldr	r0, [pc, #164]	@ (8001984 <HAL_I2C_AddrCallback+0xe4>)
 80018de:	f000 fdcb 	bl	8002478 <ring_buffer_is_empty>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d105      	bne.n	80018f4 <HAL_I2C_AddrCallback+0x54>
                ring_buffer_dequeue_arr(&TELEMETRY_BUFFER,
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4927      	ldr	r1, [pc, #156]	@ (8001988 <HAL_I2C_AddrCallback+0xe8>)
 80018ec:	4825      	ldr	r0, [pc, #148]	@ (8001984 <HAL_I2C_AddrCallback+0xe4>)
 80018ee:	f000 fe7f 	bl	80025f0 <ring_buffer_dequeue_arr>
 80018f2:	e004      	b.n	80018fe <HAL_I2C_AddrCallback+0x5e>
                memset(tx_buffer, 0, len);
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	2100      	movs	r1, #0
 80018f8:	4823      	ldr	r0, [pc, #140]	@ (8001988 <HAL_I2C_AddrCallback+0xe8>)
 80018fa:	f00e fbe0 	bl	80100be <memset>
            HAL_I2C_Slave_Sequential_Transmit_IT(
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	b29a      	uxth	r2, r3
 8001902:	2320      	movs	r3, #32
 8001904:	4920      	ldr	r1, [pc, #128]	@ (8001988 <HAL_I2C_AddrCallback+0xe8>)
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f004 fde0 	bl	80064cc <HAL_I2C_Slave_Seq_Transmit_IT>
}
 800190c:	e031      	b.n	8001972 <HAL_I2C_AddrCallback+0xd2>
            I2C_slave_obj.curr_idx = reg_get_idx(I2C_slave_obj.reg_address);
 800190e:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <HAL_I2C_AddrCallback+0xdc>)
 8001910:	789b      	ldrb	r3, [r3, #2]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	4618      	mov	r0, r3
 8001916:	f000 fd61 	bl	80023dc <reg_get_idx>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	4b17      	ldr	r3, [pc, #92]	@ (800197c <HAL_I2C_AddrCallback+0xdc>)
 8001920:	701a      	strb	r2, [r3, #0]
            if ((I2C_slave_obj.curr_idx != NONE) &&
 8001922:	4b16      	ldr	r3, [pc, #88]	@ (800197c <HAL_I2C_AddrCallback+0xdc>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b25b      	sxtb	r3, r3
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192c:	d021      	beq.n	8001972 <HAL_I2C_AddrCallback+0xd2>
                (I2C_slave_obj.curr_idx != ECHO) &&
 800192e:	4b13      	ldr	r3, [pc, #76]	@ (800197c <HAL_I2C_AddrCallback+0xdc>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	b25b      	sxtb	r3, r3
            if ((I2C_slave_obj.curr_idx != NONE) &&
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01c      	beq.n	8001972 <HAL_I2C_AddrCallback+0xd2>
                (g_i2c_reg_data[I2C_slave_obj.curr_idx].access != WRITE_ONLY))
 8001938:	4b10      	ldr	r3, [pc, #64]	@ (800197c <HAL_I2C_AddrCallback+0xdc>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b25b      	sxtb	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	4b12      	ldr	r3, [pc, #72]	@ (800198c <HAL_I2C_AddrCallback+0xec>)
 8001942:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
                (I2C_slave_obj.curr_idx != ECHO) &&
 8001946:	2b01      	cmp	r3, #1
 8001948:	d013      	beq.n	8001972 <HAL_I2C_AddrCallback+0xd2>
                    (uint8_t*)&g_i2c_reg_data[I2C_slave_obj.curr_idx]
 800194a:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <HAL_I2C_AddrCallback+0xdc>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b25b      	sxtb	r3, r3
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4a0e      	ldr	r2, [pc, #56]	@ (800198c <HAL_I2C_AddrCallback+0xec>)
 8001954:	4413      	add	r3, r2
 8001956:	1d9c      	adds	r4, r3, #6
                    reg_get_len(I2C_slave_obj.curr_idx),
 8001958:	4b08      	ldr	r3, [pc, #32]	@ (800197c <HAL_I2C_AddrCallback+0xdc>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	b25b      	sxtb	r3, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f000 fd60 	bl	8002424 <reg_get_len>
 8001964:	4603      	mov	r3, r0
                HAL_I2C_Slave_Sequential_Transmit_IT(
 8001966:	b29a      	uxth	r2, r3
 8001968:	2320      	movs	r3, #32
 800196a:	4621      	mov	r1, r4
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f004 fdad 	bl	80064cc <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bd90      	pop	{r4, r7, pc}
 800197a:	bf00      	nop
 800197c:	200001bc 	.word	0x200001bc
 8001980:	200001be 	.word	0x200001be
 8001984:	200022f8 	.word	0x200022f8
 8001988:	200001c8 	.word	0x200001c8
 800198c:	20000004 	.word	0x20000004

08001990 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

	if(!I2C_slave_obj.reg_addr_rcvd){
 8001998:	4b26      	ldr	r3, [pc, #152]	@ (8001a34 <HAL_I2C_SlaveRxCpltCallback+0xa4>)
 800199a:	785b      	ldrb	r3, [r3, #1]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d135      	bne.n	8001a0e <HAL_I2C_SlaveRxCpltCallback+0x7e>

		I2C_slave_obj.reg_addr_rcvd = 1;
 80019a2:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <HAL_I2C_SlaveRxCpltCallback+0xa4>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	705a      	strb	r2, [r3, #1]
		I2C_slave_obj.curr_idx = reg_get_idx(I2C_slave_obj.reg_address);
 80019a8:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <HAL_I2C_SlaveRxCpltCallback+0xa4>)
 80019aa:	789b      	ldrb	r3, [r3, #2]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 fd14 	bl	80023dc <reg_get_idx>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a34 <HAL_I2C_SlaveRxCpltCallback+0xa4>)
 80019ba:	701a      	strb	r2, [r3, #0]
		if ((I2C_slave_obj.curr_idx != NONE)&& (I2C_slave_obj.curr_idx != ECHO)&& (g_i2c_reg_data[I2C_slave_obj.curr_idx].access != READ_ONLY)){
 80019bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <HAL_I2C_SlaveRxCpltCallback+0xa4>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c6:	d02e      	beq.n	8001a26 <HAL_I2C_SlaveRxCpltCallback+0x96>
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <HAL_I2C_SlaveRxCpltCallback+0xa4>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b25b      	sxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d029      	beq.n	8001a26 <HAL_I2C_SlaveRxCpltCallback+0x96>
 80019d2:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <HAL_I2C_SlaveRxCpltCallback+0xa4>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b25b      	sxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <HAL_I2C_SlaveRxCpltCallback+0xa8>)
 80019dc:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d020      	beq.n	8001a26 <HAL_I2C_SlaveRxCpltCallback+0x96>
			HAL_I2C_Slave_Sequential_Receive_IT(hi2c, (uint8_t*)&g_i2c_reg_data[I2C_slave_obj.curr_idx].value.uint16_val, reg_get_len(I2C_slave_obj.curr_idx), I2C_NEXT_FRAME);
 80019e4:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <HAL_I2C_SlaveRxCpltCallback+0xa4>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b25b      	sxtb	r3, r3
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4a12      	ldr	r2, [pc, #72]	@ (8001a38 <HAL_I2C_SlaveRxCpltCallback+0xa8>)
 80019ee:	4413      	add	r3, r2
 80019f0:	1d9c      	adds	r4, r3, #6
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <HAL_I2C_SlaveRxCpltCallback+0xa4>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 fd13 	bl	8002424 <reg_get_len>
 80019fe:	4603      	mov	r3, r0
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	2304      	movs	r3, #4
 8001a04:	4621      	mov	r1, r4
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f004 fdd3 	bl	80065b2 <HAL_I2C_Slave_Seq_Receive_IT>
 8001a0c:	e00b      	b.n	8001a26 <HAL_I2C_SlaveRxCpltCallback+0x96>
		}
	} else {

		I2C_slave_obj.reg_addr_rcvd = 0;
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_I2C_SlaveRxCpltCallback+0xa4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	705a      	strb	r2, [r3, #1]

		protocol_reg_ctrl(I2C_slave_obj.curr_idx);
 8001a14:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <HAL_I2C_SlaveRxCpltCallback+0xa4>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b25b      	sxtb	r3, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 fcb8 	bl	8002390 <protocol_reg_ctrl>
		I2C_slave_obj.curr_idx = NONE;
 8001a20:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <HAL_I2C_SlaveRxCpltCallback+0xa4>)
 8001a22:	22ff      	movs	r2, #255	@ 0xff
 8001a24:	701a      	strb	r2, [r3, #0]


	}
	HAL_I2C_EnableListen_IT(hi2c);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f004 fe36 	bl	8006698 <HAL_I2C_EnableListen_IT>
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}
 8001a34:	200001bc 	.word	0x200001bc
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_I2C_ListenCpltCallback>:


void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef *hi2c){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f004 fe27 	bl	8006698 <HAL_I2C_EnableListen_IT>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	I2C_slave_obj.reg_addr_rcvd = 0;
 8001a5c:	4b04      	ldr	r3, [pc, #16]	@ (8001a70 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	705a      	strb	r2, [r3, #1]
	HAL_I2C_EnableListen_IT(hi2c);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f004 fe18 	bl	8006698 <HAL_I2C_EnableListen_IT>
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200001bc 	.word	0x200001bc

08001a74 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	//HAL_I2C_ERROR_ARLO       0x00000002U    /*!< ARLO error         */
	//HAL_I2C_ERROR_AF         0x00000004U    /*!< Ack Failure error  */
	//HAL_I2C_ERROR_OVR        0x00000008U    /*!< OVR error          */
	//HAL_I2C_ERROR_DMA        0x00000010U    /*!< DMA transfer error */
	//HAL_I2C_ERROR_TIMEOUT    0x00000020U    /*!< Timeout Error      */
	uint32_t error_code = HAL_I2C_GetError(hi2c);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f004 ffe4 	bl	8006a4a <HAL_I2C_GetError>
 8001a82:	60f8      	str	r0, [r7, #12]
	if (error_code != HAL_I2C_ERROR_AF){}
	HAL_I2C_EnableListen_IT(hi2c);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f004 fe07 	bl	8006698 <HAL_I2C_EnableListen_IT>
}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <TELEMETRY_SETUP>:

/****************************
 * ESP32 I2C interface
 ***************************/
#ifdef ENABLE_TELEMETRY
int TELEMETRY_SETUP(void) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  // initialize buffer
	  // initialize ring buffer
	  ring_buffer_init(
 8001a98:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a9c:	4904      	ldr	r1, [pc, #16]	@ (8001ab0 <TELEMETRY_SETUP+0x1c>)
 8001a9e:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <TELEMETRY_SETUP+0x20>)
 8001aa0:	f000 fd16 	bl	80024d0 <ring_buffer_init>
	      sizeof(TELEMETRY_BUFFER_ARR)
	  );

	  // 슬레이브 모드로 I2C 리스닝 시작
  // (MX_I2C1_Init()에서 HAL_I2C_EnableListen_IT(&hi2c1) 했다면 생략 가능)
	  HAL_I2C_EnableListen_IT(&hi2c1);
 8001aa4:	4804      	ldr	r0, [pc, #16]	@ (8001ab8 <TELEMETRY_SETUP+0x24>)
 8001aa6:	f004 fdf7 	bl	8006698 <HAL_I2C_EnableListen_IT>

	  return SYS_OK;
 8001aaa:	2300      	movs	r3, #0
  }
 8001aac:	4618      	mov	r0, r3
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20002308 	.word	0x20002308
 8001ab4:	200022f8 	.word	0x200022f8
 8001ab8:	200001d8 	.word	0x200001d8

08001abc <TELEMETRY_TRANSMIT_LOG>:





void TELEMETRY_TRANSMIT_LOG(void) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
    if (!ring_buffer_is_empty(&TELEMETRY_BUFFER)) {
 8001ac0:	4806      	ldr	r0, [pc, #24]	@ (8001adc <TELEMETRY_TRANSMIT_LOG+0x20>)
 8001ac2:	f000 fcd9 	bl	8002478 <ring_buffer_is_empty>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d105      	bne.n	8001ad8 <TELEMETRY_TRANSMIT_LOG+0x1c>
        telemetry_flag |= (1 << TELEMETRY_BUFFER_REMAIN);
 8001acc:	4b04      	ldr	r3, [pc, #16]	@ (8001ae0 <TELEMETRY_TRANSMIT_LOG+0x24>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	4a02      	ldr	r2, [pc, #8]	@ (8001ae0 <TELEMETRY_TRANSMIT_LOG+0x24>)
 8001ad6:	6013      	str	r3, [r2, #0]
    }
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200022f8 	.word	0x200022f8
 8001ae0:	200022f4 	.word	0x200022f4

08001ae4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  hi2c1.Instance             = I2C1;
 8001ae8:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <MX_I2C1_Init+0x58>)
 8001aea:	4a15      	ldr	r2, [pc, #84]	@ (8001b40 <MX_I2C1_Init+0x5c>)
 8001aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed      = 100000;                // 100 kHz
 8001aee:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <MX_I2C1_Init+0x58>)
 8001af0:	4a14      	ldr	r2, [pc, #80]	@ (8001b44 <MX_I2C1_Init+0x60>)
 8001af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;       // standard duty
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <MX_I2C1_Init+0x58>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1     = 0x20;                  // 7-bit 주소 0x20 (32)
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <MX_I2C1_Init+0x58>)
 8001afc:	2220      	movs	r2, #32
 8001afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8001b00:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <MX_I2C1_Init+0x58>)
 8001b02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <MX_I2C1_Init+0x58>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2     = 0;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <MX_I2C1_Init+0x58>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b14:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <MX_I2C1_Init+0x58>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <MX_I2C1_Init+0x58>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b20:	4806      	ldr	r0, [pc, #24]	@ (8001b3c <MX_I2C1_Init+0x58>)
 8001b22:	f004 fabf 	bl	80060a4 <HAL_I2C_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b2c:	f000 fc2a 	bl	8002384 <Error_Handler>
  /** Configure Analogue filter */


  /** Configure Digital filter */

  HAL_I2C_EnableListen_IT(&hi2c1);
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <MX_I2C1_Init+0x58>)
 8001b32:	f004 fdb1 	bl	8006698 <HAL_I2C_EnableListen_IT>
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200001d8 	.word	0x200001d8
 8001b40:	40005400 	.word	0x40005400
 8001b44:	000186a0 	.word	0x000186a0

08001b48 <HAL_I2C_MspInit>:
//  /* USER CODE END I2C3_Init 2 */
//
//}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	@ 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1d      	ldr	r2, [pc, #116]	@ (8001bdc <HAL_I2C_MspInit+0x94>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d133      	bne.n	8001bd2 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <HAL_I2C_MspInit+0x98>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	4a1b      	ldr	r2, [pc, #108]	@ (8001be0 <HAL_I2C_MspInit+0x98>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7a:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <HAL_I2C_MspInit+0x98>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b86:	23c0      	movs	r3, #192	@ 0xc0
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8a:	2312      	movs	r3, #18
 8001b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b96:	2304      	movs	r3, #4
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4810      	ldr	r0, [pc, #64]	@ (8001be4 <HAL_I2C_MspInit+0x9c>)
 8001ba2:	f004 f8b1 	bl	8005d08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <HAL_I2C_MspInit+0x98>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	4a0c      	ldr	r2, [pc, #48]	@ (8001be0 <HAL_I2C_MspInit+0x98>)
 8001bb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <HAL_I2C_MspInit+0x98>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	201f      	movs	r0, #31
 8001bc8:	f003 fc4b 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001bcc:	201f      	movs	r0, #31
 8001bce:	f003 fc64 	bl	800549a <HAL_NVIC_EnableIRQ>
//    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
//  /* USER CODE BEGIN I2C3_MspInit 1 */
//
//  /* USER CODE END I2C3_MspInit 1 */
//  }
}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	@ 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40005400 	.word	0x40005400
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020400 	.word	0x40020400

08001be8 <SYS_LOG>:
#ifdef ENABLE_SERIAL
extern uint32_t serial_flag;
extern ring_buffer_t SERIAL_BUFFER;
#endif

int SYS_LOG(LOG_LEVEL level, LOG_SOURCE source, int32_t key) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	603a      	str	r2, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	71bb      	strb	r3, [r7, #6]

  syslog.timestamp = HAL_GetTick();
 8001bf8:	f001 fe64 	bl	80038c4 <HAL_GetTick>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4a48      	ldr	r2, [pc, #288]	@ (8001d20 <SYS_LOG+0x138>)
 8001c00:	6013      	str	r3, [r2, #0]
  syslog.level = level;
 8001c02:	4a47      	ldr	r2, [pc, #284]	@ (8001d20 <SYS_LOG+0x138>)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	7113      	strb	r3, [r2, #4]
  syslog.source = source;
 8001c08:	4a45      	ldr	r2, [pc, #276]	@ (8001d20 <SYS_LOG+0x138>)
 8001c0a:	79bb      	ldrb	r3, [r7, #6]
 8001c0c:	7153      	strb	r3, [r2, #5]
  syslog.key = (uint8_t)(key & 0xff);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b43      	ldr	r3, [pc, #268]	@ (8001d20 <SYS_LOG+0x138>)
 8001c14:	719a      	strb	r2, [r3, #6]

  uint32_t sum = *(uint8_t *)(&syslog);
 8001c16:	4b42      	ldr	r3, [pc, #264]	@ (8001d20 <SYS_LOG+0x138>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	60fb      	str	r3, [r7, #12]
  sum += *((uint8_t *)(&syslog) + 1);
 8001c1c:	4b41      	ldr	r3, [pc, #260]	@ (8001d24 <SYS_LOG+0x13c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4413      	add	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
  sum += *((uint8_t *)(&syslog) + 2);
 8001c28:	4b3f      	ldr	r3, [pc, #252]	@ (8001d28 <SYS_LOG+0x140>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4413      	add	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
  sum += *((uint8_t *)(&syslog) + 3);
 8001c34:	4b3d      	ldr	r3, [pc, #244]	@ (8001d2c <SYS_LOG+0x144>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]
  sum += *((uint8_t *)(&syslog) + 4);
 8001c40:	4b3b      	ldr	r3, [pc, #236]	@ (8001d30 <SYS_LOG+0x148>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4413      	add	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
  sum += *((uint8_t *)(&syslog) + 5);
 8001c4c:	4b39      	ldr	r3, [pc, #228]	@ (8001d34 <SYS_LOG+0x14c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4413      	add	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
  sum += *((uint8_t *)(&syslog) + 6);
 8001c58:	4b37      	ldr	r3, [pc, #220]	@ (8001d38 <SYS_LOG+0x150>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4413      	add	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]
  sum += *((uint8_t *)(&syslog) + 8);
 8001c64:	4b35      	ldr	r3, [pc, #212]	@ (8001d3c <SYS_LOG+0x154>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
  sum += *((uint8_t *)(&syslog) + 9);
 8001c70:	4b33      	ldr	r3, [pc, #204]	@ (8001d40 <SYS_LOG+0x158>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4413      	add	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
  sum += *((uint8_t *)(&syslog) + 10);
 8001c7c:	4b31      	ldr	r3, [pc, #196]	@ (8001d44 <SYS_LOG+0x15c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4413      	add	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
  sum += *((uint8_t *)(&syslog) + 11);
 8001c88:	4b2f      	ldr	r3, [pc, #188]	@ (8001d48 <SYS_LOG+0x160>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4413      	add	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
  sum += *((uint8_t *)(&syslog) + 12);
 8001c94:	4b2d      	ldr	r3, [pc, #180]	@ (8001d4c <SYS_LOG+0x164>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
  sum += *((uint8_t *)(&syslog) + 13);
 8001ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d50 <SYS_LOG+0x168>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4413      	add	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]
  sum += *((uint8_t *)(&syslog) + 14);
 8001cac:	4b29      	ldr	r3, [pc, #164]	@ (8001d54 <SYS_LOG+0x16c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
  sum += *((uint8_t *)(&syslog) + 15);
 8001cb8:	4b27      	ldr	r3, [pc, #156]	@ (8001d58 <SYS_LOG+0x170>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]

  syslog.checksum = (uint8_t)(sum & 0xff);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <SYS_LOG+0x138>)
 8001cca:	71da      	strb	r2, [r3, #7]

  if (sys_state.SD) {
 8001ccc:	4b23      	ldr	r3, [pc, #140]	@ (8001d5c <SYS_LOG+0x174>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <SYS_LOG+0xfc>
    ring_buffer_queue_arr(&SD_BUFFER, (char *)&syslog, sizeof(LOG));
 8001cda:	2210      	movs	r2, #16
 8001cdc:	4910      	ldr	r1, [pc, #64]	@ (8001d20 <SYS_LOG+0x138>)
 8001cde:	4820      	ldr	r0, [pc, #128]	@ (8001d60 <SYS_LOG+0x178>)
 8001ce0:	f000 fc47 	bl	8002572 <ring_buffer_queue_arr>
  }

#ifdef ENABLE_TELEMETRY

  if (sys_state.TELEMETRY) {
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d5c <SYS_LOG+0x174>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00a      	beq.n	8001d08 <SYS_LOG+0x120>
    telemetry_flag |= 1 << TELEMETRY_BUFFER_REMAIN;
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <SYS_LOG+0x17c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8001d64 <SYS_LOG+0x17c>)
 8001cfc:	6013      	str	r3, [r2, #0]
    ring_buffer_queue_arr(&TELEMETRY_BUFFER, (char *)&syslog, sizeof(LOG));
 8001cfe:	2210      	movs	r2, #16
 8001d00:	4907      	ldr	r1, [pc, #28]	@ (8001d20 <SYS_LOG+0x138>)
 8001d02:	4819      	ldr	r0, [pc, #100]	@ (8001d68 <SYS_LOG+0x180>)
 8001d04:	f000 fc35 	bl	8002572 <ring_buffer_queue_arr>
//	    DEBUG_MSG("[%8lu] [LOG] %s\t%s\t%s\t\t%02x %02x %02x %02x %02x %02x %02x %02x\r\n", syslog.timestamp, STR_LOG_LEVEL[syslog.level], STR_LOG_SOURCE[syslog.source], STR_LOG_KEY[syslog.source][syslog.key], syslog.value[0], syslog.value[1], syslog.value[2], syslog.value[3], syslog.value[4], syslog.value[5], syslog.value[6], syslog.value[7]);
  }
#endif

  // reset log value
  *(uint64_t *)syslog.value = 0;
 8001d08:	490c      	ldr	r1, [pc, #48]	@ (8001d3c <SYS_LOG+0x154>)
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	e9c1 2300 	strd	r2, r3, [r1]

  return 0;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	200012b0 	.word	0x200012b0
 8001d24:	200012b1 	.word	0x200012b1
 8001d28:	200012b2 	.word	0x200012b2
 8001d2c:	200012b3 	.word	0x200012b3
 8001d30:	200012b4 	.word	0x200012b4
 8001d34:	200012b5 	.word	0x200012b5
 8001d38:	200012b6 	.word	0x200012b6
 8001d3c:	200012b8 	.word	0x200012b8
 8001d40:	200012b9 	.word	0x200012b9
 8001d44:	200012ba 	.word	0x200012ba
 8001d48:	200012bb 	.word	0x200012bb
 8001d4c:	200012bc 	.word	0x200012bc
 8001d50:	200012bd 	.word	0x200012bd
 8001d54:	200012be 	.word	0x200012be
 8001d58:	200012bf 	.word	0x200012bf
 8001d5c:	200012c0 	.word	0x200012c0
 8001d60:	200012e4 	.word	0x200012e4
 8001d64:	200022f4 	.word	0x200022f4
 8001d68:	200022f8 	.word	0x200022f8

08001d6c <_read>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
__attribute__((weak)) void _close(void){}
__attribute__((weak)) void _lseek(void){}
__attribute__((weak)) void _read(void){}
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, uint8_t *ptr, int len) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(UART_DEBUG, (uint8_t *)ptr, (uint16_t)len, 30);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	231e      	movs	r3, #30
 8001d8e:	68b9      	ldr	r1, [r7, #8]
 8001d90:	4803      	ldr	r0, [pc, #12]	@ (8001da0 <_write+0x24>)
 8001d92:	f009 f91d 	bl	800afd0 <HAL_UART_Transmit>
  return (len);
 8001d96:	687b      	ldr	r3, [r7, #4]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20006618 	.word	0x20006618

08001da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001daa:	f001 fd25 	bl	80037f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dae:	f000 f9bf 	bl	8002130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001db2:	f7ff fcd5 	bl	8001760 <MX_GPIO_Init>
  MX_DMA_Init();
 8001db6:	f7ff fc7d 	bl	80016b4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001dba:	f001 fbdf 	bl	800357c <MX_USART1_UART_Init>
  MX_SDIO_SD_Init();
 8001dbe:	f000 fed5 	bl	8002b6c <MX_SDIO_SD_Init>
  MX_RTC_Init();
 8001dc2:	f000 fd1b 	bl	80027fc <MX_RTC_Init>
  MX_FATFS_Init();
 8001dc6:	f00a fe87 	bl	800cad8 <MX_FATFS_Init>
  MX_ADC1_Init();
 8001dca:	f7ff f853 	bl	8000e74 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001dce:	f7ff fe89 	bl	8001ae4 <MX_I2C1_Init>
  MX_CAN1_Init();
 8001dd2:	f7ff fb23 	bl	800141c <MX_CAN1_Init>
  MX_CAN2_Init();
 8001dd6:	f7ff fb57 	bl	8001488 <MX_CAN2_Init>
  MX_ADC2_Init();
 8001dda:	f7ff f89d 	bl	8000f18 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8001dde:	f001 fbf7 	bl	80035d0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001de2:	f001 f9e3 	bl	80031ac <MX_TIM1_Init>
//  MX_I2C3_Init();
  MX_TIM3_Init();
 8001de6:	f001 fa33 	bl	8003250 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /********** CORE SYSTEM STARTUP **********/
    ring_buffer_init(&TELEMETRY_BUFFER, (char *)TELEMETRY_BUFFER_ARR, sizeof(TELEMETRY_BUFFER_ARR));
 8001dea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dee:	4982      	ldr	r1, [pc, #520]	@ (8001ff8 <main+0x254>)
 8001df0:	4882      	ldr	r0, [pc, #520]	@ (8001ffc <main+0x258>)
 8001df2:	f000 fb6d 	bl	80024d0 <ring_buffer_init>
    DEBUG_MSG("[%8lu] [INF] core system is in startup\r\n", HAL_GetTick());


    /********** RTC boot time check **********/
    DATETIME boot;
    RTC_READ(&boot);
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fcd5 	bl	80027a8 <RTC_READ>
    DEBUG_MSG("[%8lu] [INF] RTC time is 20%02d-%02d-%02d %02d:%02d:%02d\r\n", HAL_GetTick(), boot.year, boot.month, boot.date, boot.hour, boot.minute, boot.second);


  //  /********** SD card initialization **********/
     ret = SD_SETUP(&boot);
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 fd7f 	bl	8002904 <SD_SETUP>
 8001e06:	60f8      	str	r0, [r7, #12]

     if (ret == SYS_OK) {
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10b      	bne.n	8001e26 <main+0x82>
               sys_state.SD = true;
 8001e0e:	4a7c      	ldr	r2, [pc, #496]	@ (8002000 <main+0x25c>)
 8001e10:	7813      	ldrb	r3, [r2, #0]
 8001e12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e16:	7013      	strb	r3, [r2, #0]
               HAL_GPIO_WritePin(GPIOE, LED_SD_Pin, GPIO_PIN_SET);
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e1e:	4879      	ldr	r0, [pc, #484]	@ (8002004 <main+0x260>)
 8001e20:	f004 f926 	bl	8006070 <HAL_GPIO_WritePin>
 8001e24:	e00e      	b.n	8001e44 <main+0xa0>
               DEBUG_MSG("[%8lu] [ OK] SD card setup\r\n", HAL_GetTick());
      } else {
               sys_state.SD = false;
 8001e26:	4a76      	ldr	r2, [pc, #472]	@ (8002000 <main+0x25c>)
 8001e28:	7813      	ldrb	r3, [r2, #0]
 8001e2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e2e:	7013      	strb	r3, [r2, #0]
               HAL_GPIO_WritePin(GPIOE, LED_SD_Pin, GPIO_PIN_RESET);
 8001e30:	2200      	movs	r2, #0
 8001e32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e36:	4873      	ldr	r0, [pc, #460]	@ (8002004 <main+0x260>)
 8001e38:	f004 f91a 	bl	8006070 <HAL_GPIO_WritePin>
               syslog.value[0] = (uint8_t)ret;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4b71      	ldr	r3, [pc, #452]	@ (8002008 <main+0x264>)
 8001e42:	721a      	strb	r2, [r3, #8]



    /********** core system initialization **********/

    sys_state.ERR = false;
 8001e44:	4a6e      	ldr	r2, [pc, #440]	@ (8002000 <main+0x25c>)
 8001e46:	7813      	ldrb	r3, [r2, #0]
 8001e48:	f023 0320 	bic.w	r3, r3, #32
 8001e4c:	7013      	strb	r3, [r2, #0]
    sys_state.CAN = false;
 8001e4e:	4a6c      	ldr	r2, [pc, #432]	@ (8002000 <main+0x25c>)
 8001e50:	7853      	ldrb	r3, [r2, #1]
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	7053      	strb	r3, [r2, #1]
    sys_state.TELEMETRY = false;
 8001e58:	4a69      	ldr	r2, [pc, #420]	@ (8002000 <main+0x25c>)
 8001e5a:	7813      	ldrb	r3, [r2, #0]
 8001e5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e60:	7013      	strb	r3, [r2, #0]
    HAL_GPIO_WritePin(GPIOE, ERR_SYS_Pin, GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e68:	4866      	ldr	r0, [pc, #408]	@ (8002004 <main+0x260>)
 8001e6a:	f004 f901 	bl	8006070 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, ERR_CAN_Pin, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e74:	4863      	ldr	r0, [pc, #396]	@ (8002004 <main+0x260>)
 8001e76:	f004 f8fb 	bl	8006070 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, LED_HEARTBEAT_Pin, GPIO_PIN_SET);
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e80:	4860      	ldr	r0, [pc, #384]	@ (8002004 <main+0x260>)
 8001e82:	f004 f8f5 	bl	8006070 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e8c:	485d      	ldr	r0, [pc, #372]	@ (8002004 <main+0x260>)
 8001e8e:	f004 f8ef 	bl	8006070 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, LED_TELEMETRY_Pin, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e98:	485a      	ldr	r0, [pc, #360]	@ (8002004 <main+0x260>)
 8001e9a:	f004 f8e9 	bl	8006070 <HAL_GPIO_WritePin>

    // RTC time sync by UART
    HAL_UART_Receive_IT(UART_DEBUG, rtc, 20);
 8001e9e:	2214      	movs	r2, #20
 8001ea0:	495a      	ldr	r1, [pc, #360]	@ (800200c <main+0x268>)
 8001ea2:	485b      	ldr	r0, [pc, #364]	@ (8002010 <main+0x26c>)
 8001ea4:	f009 f955 	bl	800b152 <HAL_UART_Receive_IT>

    SYS_LOG(LOG_INFO, ECU, ECU_BOOT);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2003      	movs	r0, #3
 8001eae:	f7ff fe9b 	bl	8001be8 <SYS_LOG>
  //#endif


    /********** ESP32 telemetry initialization **********/
  #ifdef ENABLE_TELEMETRY
    ret = TELEMETRY_SETUP();
 8001eb2:	f7ff fdef 	bl	8001a94 <TELEMETRY_SETUP>
 8001eb6:	60f8      	str	r0, [r7, #12]

    if (ret == SYS_OK) {
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d134      	bne.n	8001f28 <main+0x184>
      sys_state.TELEMETRY = true;
 8001ebe:	4a50      	ldr	r2, [pc, #320]	@ (8002000 <main+0x25c>)
 8001ec0:	7813      	ldrb	r3, [r2, #0]
 8001ec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ec6:	7013      	strb	r3, [r2, #0]


      // flash 3 times
      HAL_GPIO_WritePin(GPIOE, LED_TELEMETRY_Pin, GPIO_PIN_SET);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ece:	484d      	ldr	r0, [pc, #308]	@ (8002004 <main+0x260>)
 8001ed0:	f004 f8ce 	bl	8006070 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8001ed4:	2064      	movs	r0, #100	@ 0x64
 8001ed6:	f001 fd01 	bl	80038dc <HAL_Delay>
      HAL_GPIO_WritePin(GPIOE, LED_TELEMETRY_Pin, GPIO_PIN_RESET);
 8001eda:	2200      	movs	r2, #0
 8001edc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ee0:	4848      	ldr	r0, [pc, #288]	@ (8002004 <main+0x260>)
 8001ee2:	f004 f8c5 	bl	8006070 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8001ee6:	2064      	movs	r0, #100	@ 0x64
 8001ee8:	f001 fcf8 	bl	80038dc <HAL_Delay>
      HAL_GPIO_WritePin(GPIOE, LED_TELEMETRY_Pin, GPIO_PIN_SET);
 8001eec:	2201      	movs	r2, #1
 8001eee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ef2:	4844      	ldr	r0, [pc, #272]	@ (8002004 <main+0x260>)
 8001ef4:	f004 f8bc 	bl	8006070 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8001ef8:	2064      	movs	r0, #100	@ 0x64
 8001efa:	f001 fcef 	bl	80038dc <HAL_Delay>
      HAL_GPIO_WritePin(GPIOE, LED_TELEMETRY_Pin, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f04:	483f      	ldr	r0, [pc, #252]	@ (8002004 <main+0x260>)
 8001f06:	f004 f8b3 	bl	8006070 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8001f0a:	2064      	movs	r0, #100	@ 0x64
 8001f0c:	f001 fce6 	bl	80038dc <HAL_Delay>
      HAL_GPIO_WritePin(GPIOE, LED_TELEMETRY_Pin, GPIO_PIN_SET);
 8001f10:	2201      	movs	r2, #1
 8001f12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f16:	483b      	ldr	r0, [pc, #236]	@ (8002004 <main+0x260>)
 8001f18:	f004 f8aa 	bl	8006070 <HAL_GPIO_WritePin>



      SYS_LOG(LOG_INFO, ESP, ESP_INIT);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2101      	movs	r1, #1
 8001f20:	2003      	movs	r0, #3
 8001f22:	f7ff fe61 	bl	8001be8 <SYS_LOG>
 8001f26:	e013      	b.n	8001f50 <main+0x1ac>

      DEBUG_MSG("[%8lu] [ OK] TELEMETRY setup\r\n", HAL_GetTick());
    } else {
      sys_state.TELEMETRY = false;
 8001f28:	4a35      	ldr	r2, [pc, #212]	@ (8002000 <main+0x25c>)
 8001f2a:	7813      	ldrb	r3, [r2, #0]
 8001f2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f30:	7013      	strb	r3, [r2, #0]
      HAL_GPIO_WritePin(GPIOE, LED_TELEMETRY_Pin, GPIO_PIN_RESET);
 8001f32:	2200      	movs	r2, #0
 8001f34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f38:	4832      	ldr	r0, [pc, #200]	@ (8002004 <main+0x260>)
 8001f3a:	f004 f899 	bl	8006070 <HAL_GPIO_WritePin>


      syslog.value[0] = (uint8_t)ret;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4b31      	ldr	r3, [pc, #196]	@ (8002008 <main+0x264>)
 8001f44:	721a      	strb	r2, [r3, #8]
      SYS_LOG(LOG_ERROR, ESP, ESP_INIT);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2101      	movs	r1, #1
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f7ff fe4c 	bl	8001be8 <SYS_LOG>
  #endif


    /********** CAN transceiver initialization **********/
  #ifdef ENABLE_MONITOR_CAN
    ret = CAN_SETUP();
 8001f50:	f7ff f99c 	bl	800128c <CAN_SETUP>
 8001f54:	60f8      	str	r0, [r7, #12]

    if (ret == SYS_OK) {
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d110      	bne.n	8001f7e <main+0x1da>
      sys_state.CAN = true;
 8001f5c:	4a28      	ldr	r2, [pc, #160]	@ (8002000 <main+0x25c>)
 8001f5e:	7853      	ldrb	r3, [r2, #1]
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	7053      	strb	r3, [r2, #1]
      HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_SET);
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f6c:	4825      	ldr	r0, [pc, #148]	@ (8002004 <main+0x260>)
 8001f6e:	f004 f87f 	bl	8006070 <HAL_GPIO_WritePin>

      SYS_LOG(LOG_INFO, CAN, CAN_INIT);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2102      	movs	r1, #2
 8001f76:	2003      	movs	r0, #3
 8001f78:	f7ff fe36 	bl	8001be8 <SYS_LOG>
 8001f7c:	e013      	b.n	8001fa6 <main+0x202>

      DEBUG_MSG("[%8lu] [ OK] CAN transceiver setup\r\n", HAL_GetTick());
    } else {
      sys_state.CAN = false;
 8001f7e:	4a20      	ldr	r2, [pc, #128]	@ (8002000 <main+0x25c>)
 8001f80:	7853      	ldrb	r3, [r2, #1]
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	7053      	strb	r3, [r2, #1]
      HAL_GPIO_WritePin(GPIOE, LED_CAN_Pin, GPIO_PIN_RESET);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f8e:	481d      	ldr	r0, [pc, #116]	@ (8002004 <main+0x260>)
 8001f90:	f004 f86e 	bl	8006070 <HAL_GPIO_WritePin>

      syslog.value[0] = (uint8_t)ret;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	4b1b      	ldr	r3, [pc, #108]	@ (8002008 <main+0x264>)
 8001f9a:	721a      	strb	r2, [r3, #8]
      SYS_LOG(LOG_ERROR, CAN, CAN_INIT);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f7ff fe21 	bl	8001be8 <SYS_LOG>



    /********** digital input initialization **********/
  #ifdef ENABLE_MONITOR_DIGITAL
    ret = DIGITAL_SETUP();
 8001fa6:	f7ff fbd3 	bl	8001750 <DIGITAL_SETUP>
 8001faa:	60f8      	str	r0, [r7, #12]

    if (ret == SYS_OK) {
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <main+0x216>

      DEBUG_MSG("[%8lu] [ OK] digital input setup\r\n", HAL_GetTick());
    } else {
      syslog.value[0] = (uint8_t)ret;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4b14      	ldr	r3, [pc, #80]	@ (8002008 <main+0x264>)
 8001fb8:	721a      	strb	r2, [r3, #8]
  #endif


    /********** analog input initialization **********/
  #ifdef ENABLE_MONITOR_ANALOG
    ret = ANALOG_SETUP();
 8001fba:	f7fe ff53 	bl	8000e64 <ANALOG_SETUP>
 8001fbe:	60f8      	str	r0, [r7, #12]

    if (ret == SYS_OK) {
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d105      	bne.n	8001fd2 <main+0x22e>
      SYS_LOG(LOG_INFO, ANALOG, ADC_INIT);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2103      	movs	r1, #3
 8001fca:	2003      	movs	r0, #3
 8001fcc:	f7ff fe0c 	bl	8001be8 <SYS_LOG>
 8001fd0:	e008      	b.n	8001fe4 <main+0x240>

      DEBUG_MSG("[%8lu] [ OK] analog input setup\r\n", HAL_GetTick());
    } else {
      syslog.value[0] = (uint8_t)ret;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <main+0x264>)
 8001fd8:	721a      	strb	r2, [r3, #8]
      SYS_LOG(LOG_ERROR, ANALOG, ADC_INIT);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2103      	movs	r1, #3
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f7ff fe02 	bl	8001be8 <SYS_LOG>

    /********** ADXL345 accelerometer initialization **********/
//  #ifdef ENABLE_MONITOR_ACCELEROMETER
//    ret = ACCELEROMETER_SETUP();

    if (ret == SYS_OK) {
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d114      	bne.n	8002014 <main+0x270>
      SYS_LOG(LOG_INFO, ACC, ACC_INIT);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2105      	movs	r1, #5
 8001fee:	2003      	movs	r0, #3
 8001ff0:	f7ff fdfa 	bl	8001be8 <SYS_LOG>
 8001ff4:	e017      	b.n	8002026 <main+0x282>
 8001ff6:	bf00      	nop
 8001ff8:	20002308 	.word	0x20002308
 8001ffc:	200022f8 	.word	0x200022f8
 8002000:	200012c0 	.word	0x200012c0
 8002004:	40021000 	.word	0x40021000
 8002008:	200012b0 	.word	0x200012b0
 800200c:	200012c8 	.word	0x200012c8
 8002010:	20006618 	.word	0x20006618

      DEBUG_MSG("[%8lu] [ OK] accelerometer setup\r\n", HAL_GetTick());
    } else {
      syslog.value[0] = (uint8_t)ret;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	4b3a      	ldr	r3, [pc, #232]	@ (8002104 <main+0x360>)
 800201a:	721a      	strb	r2, [r3, #8]
      SYS_LOG(LOG_ERROR, ACC, ACC_INIT);
 800201c:	2200      	movs	r2, #0
 800201e:	2105      	movs	r1, #5
 8002020:	2001      	movs	r0, #1
 8002022:	f7ff fde1 	bl	8001be8 <SYS_LOG>
    }
  #endif


    /********** CORE SYSTEM STARTUP COMPLETE **********/
    SYS_LOG(LOG_INFO, ECU, ECU_READY);
 8002026:	2202      	movs	r2, #2
 8002028:	2100      	movs	r1, #0
 800202a:	2003      	movs	r0, #3
 800202c:	f7ff fddc 	bl	8001be8 <SYS_LOG>
    DEBUG_MSG("[%8lu] [ OK] CORE SYSTEM STARTUP COMPLETE\r\n", HAL_GetTick());

    HAL_TIM_Base_Start_IT(&htim1); // start 100ms periodic timer
 8002030:	4835      	ldr	r0, [pc, #212]	@ (8002108 <main+0x364>)
 8002032:	f008 f93f 	bl	800a2b4 <HAL_TIM_Base_Start_IT>
      HAL_GPIO_WritePin(GPIOE, LED_HEARTBEAT_Pin, GPIO_PIN_SET);
 8002036:	2201      	movs	r2, #1
 8002038:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800203c:	4833      	ldr	r0, [pc, #204]	@ (800210c <main+0x368>)
 800203e:	f004 f817 	bl	8006070 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* check flags */
	      // system monitor: core temperature and input voltage
	      if (adc_flag & (1 << FLAG_ADC_SYS)) {
 8002042:	4b33      	ldr	r3, [pc, #204]	@ (8002110 <main+0x36c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d012      	beq.n	8002074 <main+0x2d0>
	        adc_flag &= ~(1 << FLAG_ADC_SYS);
 800204e:	4b30      	ldr	r3, [pc, #192]	@ (8002110 <main+0x36c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	4a2e      	ldr	r2, [pc, #184]	@ (8002110 <main+0x36c>)
 8002058:	6013      	str	r3, [r2, #0]

	        *(uint16_t *)(syslog.value + 0) = (uint16_t)adc_sys_value[0];
 800205a:	4b2e      	ldr	r3, [pc, #184]	@ (8002114 <main+0x370>)
 800205c:	4a2e      	ldr	r2, [pc, #184]	@ (8002118 <main+0x374>)
 800205e:	8812      	ldrh	r2, [r2, #0]
 8002060:	801a      	strh	r2, [r3, #0]
	        *(uint16_t *)(syslog.value + 2) = (uint16_t)adc_sys_value[1];
 8002062:	4b2e      	ldr	r3, [pc, #184]	@ (800211c <main+0x378>)
 8002064:	4a2c      	ldr	r2, [pc, #176]	@ (8002118 <main+0x374>)
 8002066:	8852      	ldrh	r2, [r2, #2]
 8002068:	801a      	strh	r2, [r3, #0]
	        SYS_LOG(LOG_INFO, ANALOG, ADC_CPU);
 800206a:	2201      	movs	r2, #1
 800206c:	2103      	movs	r1, #3
 800206e:	2003      	movs	r0, #3
 8002070:	f7ff fdba 	bl	8001be8 <SYS_LOG>
	      }

	  #ifdef ENABLE_MONITOR_ANALOG
	      if (adc_flag & (1 << FLAG_ADC_AIN)) {
 8002074:	4b26      	ldr	r3, [pc, #152]	@ (8002110 <main+0x36c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00e      	beq.n	800209e <main+0x2fa>
	        adc_flag &= ~(1 << FLAG_ADC_AIN);
 8002080:	4b23      	ldr	r3, [pc, #140]	@ (8002110 <main+0x36c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f023 0302 	bic.w	r3, r3, #2
 8002088:	4a21      	ldr	r2, [pc, #132]	@ (8002110 <main+0x36c>)
 800208a:	6013      	str	r3, [r2, #0]

	        *(uint16_t *)(syslog.value + 0) = (uint16_t)adc_ain_value[0];
 800208c:	4b21      	ldr	r3, [pc, #132]	@ (8002114 <main+0x370>)
 800208e:	4a24      	ldr	r2, [pc, #144]	@ (8002120 <main+0x37c>)
 8002090:	8812      	ldrh	r2, [r2, #0]
 8002092:	801a      	strh	r2, [r3, #0]



	        SYS_LOG(LOG_INFO, ANALOG, ADC_DIST);
 8002094:	2202      	movs	r2, #2
 8002096:	2103      	movs	r1, #3
 8002098:	2003      	movs	r0, #3
 800209a:	f7ff fda5 	bl	8001be8 <SYS_LOG>
	        pulse_flag = 0;
	      }
	  #endif

	  #ifdef ENABLE_MONITOR_ACCELEROMETER
	      if (accelerometer_flag == true) {
 800209e:	4b21      	ldr	r3, [pc, #132]	@ (8002124 <main+0x380>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d10d      	bne.n	80020c2 <main+0x31e>
	        accelerometer_flag = false;
 80020a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002124 <main+0x380>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

	        *(uint64_t *)syslog.value = *(uint64_t *)accelerometer_value;
 80020ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002128 <main+0x384>)
 80020ae:	4919      	ldr	r1, [pc, #100]	@ (8002114 <main+0x370>)
 80020b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b4:	e9c1 2300 	strd	r2, r3, [r1]

	        SYS_LOG(LOG_INFO, ACC, ACC_DATA);
 80020b8:	2201      	movs	r2, #1
 80020ba:	2105      	movs	r1, #5
 80020bc:	2003      	movs	r0, #3
 80020be:	f7ff fd93 	bl	8001be8 <SYS_LOG>
	        GPS_PARSE();
	      }
	  #endif

	      /* handle recorded LOGs */
	      SD_WRITE();
 80020c2:	f000 fcd3 	bl	8002a6c <SD_WRITE>
	  #ifdef ENABLE_SERIAL
	  //    SERIAL_TRANSMIT_LOG();
	  #endif

	  #ifdef ENABLE_TELEMETRY
	      TELEMETRY_TRANSMIT_LOG();
 80020c6:	f7ff fcf9 	bl	8001abc <TELEMETRY_TRANSMIT_LOG>
	  #endif

	      /* check timer flags */
	      if (timer_flag & (1 << FLAG_TIMER_100ms)) {
 80020ca:	4b18      	ldr	r3, [pc, #96]	@ (800212c <main+0x388>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <main+0x342>
	        timer_flag &= ~(1 << FLAG_TIMER_100ms);
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <main+0x388>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	4a13      	ldr	r2, [pc, #76]	@ (800212c <main+0x388>)
 80020e0:	6013      	str	r3, [r2, #0]
	        TIMER_100ms();
 80020e2:	f000 f893 	bl	800220c <TIMER_100ms>
	      }

	      if (timer_flag & (1 << FLAG_TIMER_1s)) {
 80020e6:	4b11      	ldr	r3, [pc, #68]	@ (800212c <main+0x388>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0a7      	beq.n	8002042 <main+0x29e>
	        timer_flag &= ~(1 << FLAG_TIMER_1s);
 80020f2:	4b0e      	ldr	r3, [pc, #56]	@ (800212c <main+0x388>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 0302 	bic.w	r3, r3, #2
 80020fa:	4a0c      	ldr	r2, [pc, #48]	@ (800212c <main+0x388>)
 80020fc:	6013      	str	r3, [r2, #0]
	        TIMER_1s();
 80020fe:	f000 f905 	bl	800230c <TIMER_1s>
	      if (adc_flag & (1 << FLAG_ADC_SYS)) {
 8002102:	e79e      	b.n	8002042 <main+0x29e>
 8002104:	200012b0 	.word	0x200012b0
 8002108:	200064c4 	.word	0x200064c4
 800210c:	40021000 	.word	0x40021000
 8002110:	2000630c 	.word	0x2000630c
 8002114:	200012b8 	.word	0x200012b8
 8002118:	20006310 	.word	0x20006310
 800211c:	200012ba 	.word	0x200012ba
 8002120:	20006308 	.word	0x20006308
 8002124:	20006314 	.word	0x20006314
 8002128:	20006318 	.word	0x20006318
 800212c:	200012c4 	.word	0x200012c4

08002130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b094      	sub	sp, #80	@ 0x50
 8002134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002136:	f107 0320 	add.w	r3, r7, #32
 800213a:	2230      	movs	r2, #48	@ 0x30
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f00d ffbd 	bl	80100be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	4b2a      	ldr	r3, [pc, #168]	@ (8002204 <SystemClock_Config+0xd4>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	4a29      	ldr	r2, [pc, #164]	@ (8002204 <SystemClock_Config+0xd4>)
 800215e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002162:	6413      	str	r3, [r2, #64]	@ 0x40
 8002164:	4b27      	ldr	r3, [pc, #156]	@ (8002204 <SystemClock_Config+0xd4>)
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002170:	2300      	movs	r3, #0
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	4b24      	ldr	r3, [pc, #144]	@ (8002208 <SystemClock_Config+0xd8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a23      	ldr	r2, [pc, #140]	@ (8002208 <SystemClock_Config+0xd8>)
 800217a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	4b21      	ldr	r3, [pc, #132]	@ (8002208 <SystemClock_Config+0xd8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800218c:	2305      	movs	r3, #5
 800218e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002190:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002196:	2301      	movs	r3, #1
 8002198:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800219a:	2302      	movs	r3, #2
 800219c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800219e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80021a4:	2304      	movs	r3, #4
 80021a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80021a8:	23a8      	movs	r3, #168	@ 0xa8
 80021aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021ac:	2302      	movs	r3, #2
 80021ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80021b0:	2307      	movs	r3, #7
 80021b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021b4:	f107 0320 	add.w	r3, r7, #32
 80021b8:	4618      	mov	r0, r3
 80021ba:	f005 fe57 	bl	8007e6c <HAL_RCC_OscConfig>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80021c4:	f000 f8de 	bl	8002384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c8:	230f      	movs	r3, #15
 80021ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021cc:	2302      	movs	r3, #2
 80021ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	2105      	movs	r1, #5
 80021e6:	4618      	mov	r0, r3
 80021e8:	f006 f8b8 	bl	800835c <HAL_RCC_ClockConfig>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80021f2:	f000 f8c7 	bl	8002384 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80021f6:	f006 f997 	bl	8008528 <HAL_RCC_EnableCSS>
}
 80021fa:	bf00      	nop
 80021fc:	3750      	adds	r7, #80	@ 0x50
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800
 8002208:	40007000 	.word	0x40007000

0800220c <TIMER_100ms>:

/* USER CODE BEGIN 4 */
void TIMER_100ms(void) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af02      	add	r7, sp, #8
#ifdef ENABLE_MONITOR_DIGITAL
  /* record digital input channels */
	  sys_state.HV = !HAL_GPIO_ReadPin(GPIOD, HV_ACTIVE_Pin); // inverted in circuit
 8002212:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002216:	4835      	ldr	r0, [pc, #212]	@ (80022ec <TIMER_100ms+0xe0>)
 8002218:	f003 ff12 	bl	8006040 <HAL_GPIO_ReadPin>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	bf0c      	ite	eq
 8002222:	2301      	moveq	r3, #1
 8002224:	2300      	movne	r3, #0
 8002226:	b2d9      	uxtb	r1, r3
 8002228:	4a31      	ldr	r2, [pc, #196]	@ (80022f0 <TIMER_100ms+0xe4>)
 800222a:	7813      	ldrb	r3, [r2, #0]
 800222c:	f361 0300 	bfi	r3, r1, #0, #1
 8002230:	7013      	strb	r3, [r2, #0]
	  sys_state.RTD = !HAL_GPIO_ReadPin(GPIOD, RTD_ACTIVE_Pin); // inverted in circuit
 8002232:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002236:	482d      	ldr	r0, [pc, #180]	@ (80022ec <TIMER_100ms+0xe0>)
 8002238:	f003 ff02 	bl	8006040 <HAL_GPIO_ReadPin>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	bf0c      	ite	eq
 8002242:	2301      	moveq	r3, #1
 8002244:	2300      	movne	r3, #0
 8002246:	b2d9      	uxtb	r1, r3
 8002248:	4a29      	ldr	r2, [pc, #164]	@ (80022f0 <TIMER_100ms+0xe4>)
 800224a:	7813      	ldrb	r3, [r2, #0]
 800224c:	f361 0341 	bfi	r3, r1, #1, #1
 8002250:	7013      	strb	r3, [r2, #0]
	  sys_state.BMS = HAL_GPIO_ReadPin(GPIOD, BMS_FAULT_Pin);
 8002252:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002256:	4825      	ldr	r0, [pc, #148]	@ (80022ec <TIMER_100ms+0xe0>)
 8002258:	f003 fef2 	bl	8006040 <HAL_GPIO_ReadPin>
 800225c:	4603      	mov	r3, r0
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	b2d9      	uxtb	r1, r3
 8002264:	4a22      	ldr	r2, [pc, #136]	@ (80022f0 <TIMER_100ms+0xe4>)
 8002266:	7813      	ldrb	r3, [r2, #0]
 8002268:	f361 0382 	bfi	r3, r1, #2, #1
 800226c:	7013      	strb	r3, [r2, #0]
	  sys_state.IMD = HAL_GPIO_ReadPin(GPIOD, IMD_FAULT_Pin);
 800226e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002272:	481e      	ldr	r0, [pc, #120]	@ (80022ec <TIMER_100ms+0xe0>)
 8002274:	f003 fee4 	bl	8006040 <HAL_GPIO_ReadPin>
 8002278:	4603      	mov	r3, r0
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	b2d9      	uxtb	r1, r3
 8002280:	4a1b      	ldr	r2, [pc, #108]	@ (80022f0 <TIMER_100ms+0xe4>)
 8002282:	7813      	ldrb	r3, [r2, #0]
 8002284:	f361 03c3 	bfi	r3, r1, #3, #1
 8002288:	7013      	strb	r3, [r2, #0]
	  sys_state.BSPD = HAL_GPIO_ReadPin(GPIOD, BSPD_FAULT_Pin);
 800228a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800228e:	4817      	ldr	r0, [pc, #92]	@ (80022ec <TIMER_100ms+0xe0>)
 8002290:	f003 fed6 	bl	8006040 <HAL_GPIO_ReadPin>
 8002294:	4603      	mov	r3, r0
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	b2d9      	uxtb	r1, r3
 800229c:	4a14      	ldr	r2, [pc, #80]	@ (80022f0 <TIMER_100ms+0xe4>)
 800229e:	7813      	ldrb	r3, [r2, #0]
 80022a0:	f361 1304 	bfi	r3, r1, #4, #1
 80022a4:	7013      	strb	r3, [r2, #0]

	  *(SYSTEM_STATE *)syslog.value = sys_state;
 80022a6:	4a13      	ldr	r2, [pc, #76]	@ (80022f4 <TIMER_100ms+0xe8>)
 80022a8:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <TIMER_100ms+0xe4>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	8013      	strh	r3, [r2, #0]
	  SYS_LOG(LOG_INFO, ECU, ECU_STATE);
 80022ae:	2201      	movs	r2, #1
 80022b0:	2100      	movs	r1, #0
 80022b2:	2003      	movs	r0, #3
 80022b4:	f7ff fc98 	bl	8001be8 <SYS_LOG>

#endif

#ifdef ENABLE_MONITOR_ANALOG
  /* start analog input channels ADC conversion */
  if (!(adc_flag & (1 << FLAG_ADC_SYS))) {
 80022b8:	4b0f      	ldr	r3, [pc, #60]	@ (80022f8 <TIMER_100ms+0xec>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <TIMER_100ms+0xbe>
//	  Read_ADC_Values();
	  HAL_ADC_Start_IT(&hadc2);
 80022c4:	480d      	ldr	r0, [pc, #52]	@ (80022fc <TIMER_100ms+0xf0>)
 80022c6:	f001 fb71 	bl	80039ac <HAL_ADC_Start_IT>
  PULSE_CAPTURE();
#endif

#ifdef ENABLE_MONITOR_ACCELEROMETER
  /* this takes 30ms EVERY TIME if the module is NOT CONNECTED */
  if (accelerometer_flag == false) {
 80022ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002300 <TIMER_100ms+0xf4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <TIMER_100ms+0xda>
          HAL_I2C_Mem_Read_IT(&hi2c3, ACC_I2C_ADDR, 0x32, 1, accelerometer_value, 6);
 80022d2:	2306      	movs	r3, #6
 80022d4:	9301      	str	r3, [sp, #4]
 80022d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <TIMER_100ms+0xf8>)
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2301      	movs	r3, #1
 80022dc:	2232      	movs	r2, #50	@ 0x32
 80022de:	21a6      	movs	r1, #166	@ 0xa6
 80022e0:	4809      	ldr	r0, [pc, #36]	@ (8002308 <TIMER_100ms+0xfc>)
 80022e2:	f004 f839 	bl	8006358 <HAL_I2C_Mem_Read_IT>

  }
#endif
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40020c00 	.word	0x40020c00
 80022f0:	200012c0 	.word	0x200012c0
 80022f4:	200012b8 	.word	0x200012b8
 80022f8:	2000630c 	.word	0x2000630c
 80022fc:	20000120 	.word	0x20000120
 8002300:	20006314 	.word	0x20006314
 8002304:	20006318 	.word	0x20006318
 8002308:	2000022c 	.word	0x2000022c

0800230c <TIMER_1s>:

void TIMER_1s(void) {
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* internal temperature and input voltage monitor */
  if (!(adc_flag & (1 << FLAG_ADC_SYS))) {
 8002310:	4b17      	ldr	r3, [pc, #92]	@ (8002370 <TIMER_1s+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d104      	bne.n	8002326 <TIMER_1s+0x1a>
    HAL_ADC_Start_DMA(&hadc1, adc_sys_value, 2);
 800231c:	2202      	movs	r2, #2
 800231e:	4915      	ldr	r1, [pc, #84]	@ (8002374 <TIMER_1s+0x68>)
 8002320:	4815      	ldr	r0, [pc, #84]	@ (8002378 <TIMER_1s+0x6c>)
 8002322:	f001 fd31 	bl	8003d88 <HAL_ADC_Start_DMA>
  }

  /* SD card sync*/
  SD_SYNC();
 8002326:	f000 fbf1 	bl	8002b0c <SD_SYNC>

  /* heartbeat LED */
  static bool heartbeat = true;
  if (heartbeat) {
 800232a:	4b14      	ldr	r3, [pc, #80]	@ (800237c <TIMER_1s+0x70>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d006      	beq.n	8002340 <TIMER_1s+0x34>
    HAL_GPIO_WritePin(GPIOE, LED_HEARTBEAT_Pin, GPIO_PIN_SET);
 8002332:	2201      	movs	r2, #1
 8002334:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002338:	4811      	ldr	r0, [pc, #68]	@ (8002380 <TIMER_1s+0x74>)
 800233a:	f003 fe99 	bl	8006070 <HAL_GPIO_WritePin>
 800233e:	e005      	b.n	800234c <TIMER_1s+0x40>
  } else {
    HAL_GPIO_WritePin(GPIOE, LED_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8002340:	2200      	movs	r2, #0
 8002342:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002346:	480e      	ldr	r0, [pc, #56]	@ (8002380 <TIMER_1s+0x74>)
 8002348:	f003 fe92 	bl	8006070 <HAL_GPIO_WritePin>
  }
  heartbeat = !heartbeat;
 800234c:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <TIMER_1s+0x70>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f083 0301 	eor.w	r3, r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b05      	ldr	r3, [pc, #20]	@ (800237c <TIMER_1s+0x70>)
 8002368:	701a      	strb	r2, [r3, #0]
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000630c 	.word	0x2000630c
 8002374:	20006310 	.word	0x20006310
 8002378:	200000d8 	.word	0x200000d8
 800237c:	20000000 	.word	0x20000000
 8002380:	40021000 	.word	0x40021000

08002384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002388:	b672      	cpsid	i
}
 800238a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <Error_Handler+0x8>

08002390 <protocol_reg_ctrl>:
#include "protocol.h"

extern reg_t g_i2c_reg_data[];

void protocol_reg_ctrl(reg_idx_t idx){
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
	  switch (idx){
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d002      	beq.n	80023a8 <protocol_reg_ctrl+0x18>
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d007      	beq.n	80023b6 <protocol_reg_ctrl+0x26>
		  break;
	  case INT16_RW:
		  g_i2c_reg_data[INT16_RO].value.int16_val++;
		  break;
	  default:
		  break;
 80023a6:	e010      	b.n	80023ca <protocol_reg_ctrl+0x3a>
		  g_i2c_reg_data[UINT16_RO].value.uint16_val++;
 80023a8:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <protocol_reg_ctrl+0x48>)
 80023aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023ac:	3301      	adds	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <protocol_reg_ctrl+0x48>)
 80023b2:	86da      	strh	r2, [r3, #54]	@ 0x36
		  break;
 80023b4:	e009      	b.n	80023ca <protocol_reg_ctrl+0x3a>
		  g_i2c_reg_data[INT16_RO].value.int16_val++;
 80023b6:	4b08      	ldr	r3, [pc, #32]	@ (80023d8 <protocol_reg_ctrl+0x48>)
 80023b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3301      	adds	r3, #1
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	b21a      	sxth	r2, r3
 80023c4:	4b04      	ldr	r3, [pc, #16]	@ (80023d8 <protocol_reg_ctrl+0x48>)
 80023c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
		  break;
 80023c8:	bf00      	nop
	  }
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000004 	.word	0x20000004

080023dc <reg_get_idx>:
		[INT16_RO] = 		{ READ_ONLY, 	REG_INT16_RO_ADDR, 	INT16, {.int16_val = 0x2233}, 	{0} },
		[BOOL_RO] = 		{ READ_ONLY, 	REG_BOOL_RO_ADDR, 	BOOL,   {.bool_val = 0x01}, 	{0} },
		[CHAR_RO] = 		{ READ_ONLY, 	REG_CHAR_RO_ADDR, 	CHAR, {.char_val = 0x15},		{0} },
};

reg_idx_t reg_get_idx(uint8_t address){
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
	for(int i = 1; i < REGISTER_NUM; i++){
 80023e6:	2301      	movs	r3, #1
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	e00e      	b.n	800240a <reg_get_idx+0x2e>
		if (g_i2c_reg_data[i].reg_addr == address){
 80023ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002420 <reg_get_idx+0x44>)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4413      	add	r3, r2
 80023f4:	785b      	ldrb	r3, [r3, #1]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	79fa      	ldrb	r2, [r7, #7]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d102      	bne.n	8002404 <reg_get_idx+0x28>
			return i;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	b25b      	sxtb	r3, r3
 8002402:	e007      	b.n	8002414 <reg_get_idx+0x38>
	for(int i = 1; i < REGISTER_NUM; i++){
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3301      	adds	r3, #1
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2b09      	cmp	r3, #9
 800240e:	dded      	ble.n	80023ec <reg_get_idx+0x10>
		}
	}
	return NONE;
 8002410:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	20000004 	.word	0x20000004

08002424 <reg_get_len>:

int reg_get_len(reg_idx_t idx){
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
	int data_len = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
	switch (g_i2c_reg_data[idx].value_type){
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	4a0f      	ldr	r2, [pc, #60]	@ (8002474 <reg_get_len+0x50>)
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	789b      	ldrb	r3, [r3, #2]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b05      	cmp	r3, #5
 8002442:	d009      	beq.n	8002458 <reg_get_len+0x34>
 8002444:	2b05      	cmp	r3, #5
 8002446:	dc0d      	bgt.n	8002464 <reg_get_len+0x40>
 8002448:	2b02      	cmp	r3, #2
 800244a:	d005      	beq.n	8002458 <reg_get_len+0x34>
 800244c:	2b02      	cmp	r3, #2
 800244e:	db09      	blt.n	8002464 <reg_get_len+0x40>
 8002450:	3b03      	subs	r3, #3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d806      	bhi.n	8002464 <reg_get_len+0x40>
 8002456:	e002      	b.n	800245e <reg_get_len+0x3a>
	case BOOL:
	case CHAR:
		data_len = 1;
 8002458:	2301      	movs	r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
		break;
 800245c:	e003      	b.n	8002466 <reg_get_len+0x42>
	case UINT16:
	case INT16:
		data_len = 2;
 800245e:	2302      	movs	r3, #2
 8002460:	60fb      	str	r3, [r7, #12]
		break;
 8002462:	e000      	b.n	8002466 <reg_get_len+0x42>
	default:
		break;
 8002464:	bf00      	nop
	}
	return data_len;
 8002466:	68fb      	ldr	r3, [r7, #12]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	20000004 	.word	0x20000004

08002478 <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	429a      	cmp	r2, r3
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK(buffer)) == RING_BUFFER_MASK(buffer);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	1ad2      	subs	r2, r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	401a      	ands	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	bf0c      	ite	eq
 80024be:	2301      	moveq	r3, #1
 80024c0:	2300      	movne	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer, char *buf, size_t buf_size) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  RING_BUFFER_ASSERT(RING_BUFFER_IS_POWER_OF_TWO(buf_size) == 1);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	1e5a      	subs	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <ring_buffer_init+0x24>
 80024e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002518 <ring_buffer_init+0x48>)
 80024ea:	4a0c      	ldr	r2, [pc, #48]	@ (800251c <ring_buffer_init+0x4c>)
 80024ec:	2109      	movs	r1, #9
 80024ee:	480c      	ldr	r0, [pc, #48]	@ (8002520 <ring_buffer_init+0x50>)
 80024f0:	f00d fc0a 	bl	800fd08 <__assert_func>
  buffer->buffer = buf;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	601a      	str	r2, [r3, #0]
  buffer->buffer_mask = buf_size - 1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	1e5a      	subs	r2, r3, #1
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	605a      	str	r2, [r3, #4]
  buffer->tail_index = 0;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  buffer->head_index = 0;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	60da      	str	r2, [r3, #12]
}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	08011128 	.word	0x08011128
 800251c:	080111e0 	.word	0x080111e0
 8002520:	08011150 	.word	0x08011150

08002524 <ring_buffer_queue>:
  buffer->head_index = 0;
  // 필요에 따라, 버퍼 내용을 지우고 싶다면 다음 라인을 활성화하세요:
  // memset(buffer->buffer, 0, buffer->buffer_mask + 1);
}

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ffb4 	bl	800249e <ring_buffer_is_full>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <ring_buffer_queue+0x28>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK(buffer));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	401a      	ands	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	609a      	str	r2, [r3, #8]
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4413      	add	r3, r2
 8002556:	78fa      	ldrb	r2, [r7, #3]
 8002558:	701a      	strb	r2, [r3, #0]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK(buffer));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	401a      	ands	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	60da      	str	r2, [r3, #12]
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <ring_buffer_queue_arr>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size) {
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e00a      	b.n	800259a <ring_buffer_queue_arr+0x28>
    ring_buffer_queue(buffer, data[i]);
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	4413      	add	r3, r2
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f7ff ffc8 	bl	8002524 <ring_buffer_queue>
  for(i = 0; i < size; i++) {
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3301      	adds	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d3f0      	bcc.n	8002584 <ring_buffer_queue_arr+0x12>
  }
}
 80025a2:	bf00      	nop
 80025a4:	bf00      	nop
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <ring_buffer_dequeue>:

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff ff5e 	bl	8002478 <ring_buffer_is_empty>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e010      	b.n	80025e8 <ring_buffer_dequeue+0x3c>
  }

  *data = buffer->buffer[buffer->tail_index];
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	4413      	add	r3, r2
 80025d0:	781a      	ldrb	r2, [r3, #0]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK(buffer));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	401a      	ands	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	609a      	str	r2, [r3, #8]
  return 1;
 80025e6:	2301      	movs	r3, #1
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <ring_buffer_dequeue_arr>:

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  if(ring_buffer_is_empty(buffer)) {
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff ff3b 	bl	8002478 <ring_buffer_is_empty>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <ring_buffer_dequeue_arr+0x1c>
    /* No items */
    return 0;
 8002608:	2300      	movs	r3, #0
 800260a:	e016      	b.n	800263a <ring_buffer_dequeue_arr+0x4a>
  }

  char *data_ptr = data;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	617b      	str	r3, [r7, #20]
  ring_buffer_size_t cnt = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	613b      	str	r3, [r7, #16]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 8002614:	e005      	b.n	8002622 <ring_buffer_dequeue_arr+0x32>
    cnt++;
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	3301      	adds	r3, #1
 800261a:	613b      	str	r3, [r7, #16]
    data_ptr++;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	3301      	adds	r3, #1
 8002620:	617b      	str	r3, [r7, #20]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	429a      	cmp	r2, r3
 8002628:	d206      	bcs.n	8002638 <ring_buffer_dequeue_arr+0x48>
 800262a:	6979      	ldr	r1, [r7, #20]
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff ffbd 	bl	80025ac <ring_buffer_dequeue>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ee      	bne.n	8002616 <ring_buffer_dequeue_arr+0x26>
  }
  return cnt;
 8002638:	693b      	ldr	r3, [r7, #16]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <RTC_FIX>:
/* USER CODE BEGIN 0 */
extern LOG syslog;

extern uint8_t rtc[25];

void RTC_FIX(int source) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b08c      	sub	sp, #48	@ 0x30
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = rtc + 2;
 800264c:	4b53      	ldr	r3, [pc, #332]	@ (800279c <RTC_FIX+0x158>)
 800264e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t tmp[3];
  int32_t cnt = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	62bb      	str	r3, [r7, #40]	@ 0x28

  RTC_DateTypeDef RTC_DATE;
  RTC_TimeTypeDef RTC_TIME;

  while (*ptr && cnt < 6) {
 8002654:	e067      	b.n	8002726 <RTC_FIX+0xe2>
    strncpy((char *)tmp, (char *)ptr, 3);
 8002656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800265a:	2203      	movs	r2, #3
 800265c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800265e:	4618      	mov	r0, r3
 8002660:	f00d fd35 	bl	80100ce <strncpy>
    tmp[2] = '\0';
 8002664:	2300      	movs	r3, #0
 8002666:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    switch (cnt) {
 800266a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266c:	2b05      	cmp	r3, #5
 800266e:	d854      	bhi.n	800271a <RTC_FIX+0xd6>
 8002670:	a201      	add	r2, pc, #4	@ (adr r2, 8002678 <RTC_FIX+0x34>)
 8002672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002676:	bf00      	nop
 8002678:	08002691 	.word	0x08002691
 800267c:	080026a9 	.word	0x080026a9
 8002680:	080026c1 	.word	0x080026c1
 8002684:	080026d9 	.word	0x080026d9
 8002688:	080026ef 	.word	0x080026ef
 800268c:	08002705 	.word	0x08002705
      case 0: RTC_DATE.Year    = (uint8_t)strtol((char *)tmp, NULL, 10); break;
 8002690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002694:	220a      	movs	r2, #10
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f00d fbcd 	bl	800fe38 <strtol>
 800269e:	4603      	mov	r3, r0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80026a6:	e038      	b.n	800271a <RTC_FIX+0xd6>
      case 1: RTC_DATE.Month   = (uint8_t)strtol((char *)tmp, NULL, 16); break;
 80026a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ac:	2210      	movs	r2, #16
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f00d fbc1 	bl	800fe38 <strtol>
 80026b6:	4603      	mov	r3, r0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80026be:	e02c      	b.n	800271a <RTC_FIX+0xd6>
      case 2: RTC_DATE.Date    = (uint8_t)strtol((char *)tmp, NULL, 10); break;
 80026c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026c4:	220a      	movs	r2, #10
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f00d fbb5 	bl	800fe38 <strtol>
 80026ce:	4603      	mov	r3, r0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80026d6:	e020      	b.n	800271a <RTC_FIX+0xd6>
      case 3: RTC_TIME.Hours   = (uint8_t)strtol((char *)tmp, NULL, 10); break;
 80026d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026dc:	220a      	movs	r2, #10
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f00d fba9 	bl	800fe38 <strtol>
 80026e6:	4603      	mov	r3, r0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	733b      	strb	r3, [r7, #12]
 80026ec:	e015      	b.n	800271a <RTC_FIX+0xd6>
      case 4: RTC_TIME.Minutes = (uint8_t)strtol((char *)tmp, NULL, 10); break;
 80026ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026f2:	220a      	movs	r2, #10
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f00d fb9e 	bl	800fe38 <strtol>
 80026fc:	4603      	mov	r3, r0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	737b      	strb	r3, [r7, #13]
 8002702:	e00a      	b.n	800271a <RTC_FIX+0xd6>
      case 5: RTC_TIME.Seconds = (uint8_t)strtol((char *)tmp, NULL, 10); break;
 8002704:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002708:	220a      	movs	r2, #10
 800270a:	2100      	movs	r1, #0
 800270c:	4618      	mov	r0, r3
 800270e:	f00d fb93 	bl	800fe38 <strtol>
 8002712:	4603      	mov	r3, r0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	73bb      	strb	r3, [r7, #14]
 8002718:	bf00      	nop
    }

    // move to next datetime
    ptr += 3;
 800271a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271c:	3303      	adds	r3, #3
 800271e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    cnt++;
 8002720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002722:	3301      	adds	r3, #1
 8002724:	62bb      	str	r3, [r7, #40]	@ 0x28
  while (*ptr && cnt < 6) {
 8002726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <RTC_FIX+0xf0>
 800272e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002730:	2b05      	cmp	r3, #5
 8002732:	dd90      	ble.n	8002656 <RTC_FIX+0x12>
  }

  // set weekday; required for accurate year value
  RTC_DATE.WeekDay = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	f887 3020 	strb.w	r3, [r7, #32]

  HAL_RTC_SetTime(&hrtc, &RTC_TIME, FORMAT_BIN);
 800273a:	f107 030c 	add.w	r3, r7, #12
 800273e:	2200      	movs	r2, #0
 8002740:	4619      	mov	r1, r3
 8002742:	4817      	ldr	r0, [pc, #92]	@ (80027a0 <RTC_FIX+0x15c>)
 8002744:	f006 f9b5 	bl	8008ab2 <HAL_RTC_SetTime>
  HAL_RTC_SetDate(&hrtc, &RTC_DATE, FORMAT_BIN);
 8002748:	f107 0320 	add.w	r3, r7, #32
 800274c:	2200      	movs	r2, #0
 800274e:	4619      	mov	r1, r3
 8002750:	4813      	ldr	r0, [pc, #76]	@ (80027a0 <RTC_FIX+0x15c>)
 8002752:	f006 faa6 	bl	8008ca2 <HAL_RTC_SetDate>

  syslog.value[0] = RTC_DATE.Year;
 8002756:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800275a:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <RTC_FIX+0x160>)
 800275c:	721a      	strb	r2, [r3, #8]
  syslog.value[1] = RTC_DATE.Month;
 800275e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002762:	4b10      	ldr	r3, [pc, #64]	@ (80027a4 <RTC_FIX+0x160>)
 8002764:	725a      	strb	r2, [r3, #9]
  syslog.value[2] = RTC_DATE.Date;
 8002766:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800276a:	4b0e      	ldr	r3, [pc, #56]	@ (80027a4 <RTC_FIX+0x160>)
 800276c:	729a      	strb	r2, [r3, #10]
  syslog.value[3] = RTC_TIME.Hours;
 800276e:	7b3a      	ldrb	r2, [r7, #12]
 8002770:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <RTC_FIX+0x160>)
 8002772:	72da      	strb	r2, [r3, #11]
  syslog.value[4] = RTC_TIME.Minutes;
 8002774:	7b7a      	ldrb	r2, [r7, #13]
 8002776:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <RTC_FIX+0x160>)
 8002778:	731a      	strb	r2, [r3, #12]
  syslog.value[5] = RTC_TIME.Seconds;
 800277a:	7bba      	ldrb	r2, [r7, #14]
 800277c:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <RTC_FIX+0x160>)
 800277e:	735a      	strb	r2, [r3, #13]
  syslog.value[6] = source;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	b2da      	uxtb	r2, r3
 8002784:	4b07      	ldr	r3, [pc, #28]	@ (80027a4 <RTC_FIX+0x160>)
 8002786:	739a      	strb	r2, [r3, #14]
  SYS_LOG(LOG_INFO, ESP, ESP_RTC_FIX);
 8002788:	2202      	movs	r2, #2
 800278a:	2101      	movs	r1, #1
 800278c:	2003      	movs	r0, #3
 800278e:	f7ff fa2b 	bl	8001be8 <SYS_LOG>



  return;
 8002792:	bf00      	nop
}
 8002794:	3730      	adds	r7, #48	@ 0x30
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	200012ca 	.word	0x200012ca
 80027a0:	20006320 	.word	0x20006320
 80027a4:	200012b0 	.word	0x200012b0

080027a8 <RTC_READ>:

void RTC_READ(DATETIME *boot) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  RTC_DateTypeDef RTC_DATE;
  RTC_TimeTypeDef RTC_TIME;

  HAL_RTC_GetTime(&hrtc, &RTC_TIME, FORMAT_BIN);
 80027b0:	f107 0308 	add.w	r3, r7, #8
 80027b4:	2200      	movs	r2, #0
 80027b6:	4619      	mov	r1, r3
 80027b8:	480f      	ldr	r0, [pc, #60]	@ (80027f8 <RTC_READ+0x50>)
 80027ba:	f006 fa14 	bl	8008be6 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &RTC_DATE, FORMAT_BIN);
 80027be:	f107 031c 	add.w	r3, r7, #28
 80027c2:	2200      	movs	r2, #0
 80027c4:	4619      	mov	r1, r3
 80027c6:	480c      	ldr	r0, [pc, #48]	@ (80027f8 <RTC_READ+0x50>)
 80027c8:	f006 faef 	bl	8008daa <HAL_RTC_GetDate>

  boot->second = RTC_TIME.Seconds;
 80027cc:	7aba      	ldrb	r2, [r7, #10]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	715a      	strb	r2, [r3, #5]
  boot->minute = RTC_TIME.Minutes;
 80027d2:	7a7a      	ldrb	r2, [r7, #9]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	711a      	strb	r2, [r3, #4]
  boot->hour = RTC_TIME.Hours;
 80027d8:	7a3a      	ldrb	r2, [r7, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	70da      	strb	r2, [r3, #3]
  boot->date = RTC_DATE.Date;
 80027de:	7fba      	ldrb	r2, [r7, #30]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	709a      	strb	r2, [r3, #2]
  boot->month = RTC_DATE.Month;
 80027e4:	7f7a      	ldrb	r2, [r7, #29]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	705a      	strb	r2, [r3, #1]
  boot->year = RTC_DATE.Year;
 80027ea:	7ffa      	ldrb	r2, [r7, #31]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	701a      	strb	r2, [r3, #0]

  return;
 80027f0:	bf00      	nop
}
 80027f2:	3720      	adds	r7, #32
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20006320 	.word	0x20006320

080027fc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002810:	2300      	movs	r3, #0
 8002812:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002814:	4b24      	ldr	r3, [pc, #144]	@ (80028a8 <MX_RTC_Init+0xac>)
 8002816:	4a25      	ldr	r2, [pc, #148]	@ (80028ac <MX_RTC_Init+0xb0>)
 8002818:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800281a:	4b23      	ldr	r3, [pc, #140]	@ (80028a8 <MX_RTC_Init+0xac>)
 800281c:	2200      	movs	r2, #0
 800281e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002820:	4b21      	ldr	r3, [pc, #132]	@ (80028a8 <MX_RTC_Init+0xac>)
 8002822:	227f      	movs	r2, #127	@ 0x7f
 8002824:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002826:	4b20      	ldr	r3, [pc, #128]	@ (80028a8 <MX_RTC_Init+0xac>)
 8002828:	22ff      	movs	r2, #255	@ 0xff
 800282a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800282c:	4b1e      	ldr	r3, [pc, #120]	@ (80028a8 <MX_RTC_Init+0xac>)
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002832:	4b1d      	ldr	r3, [pc, #116]	@ (80028a8 <MX_RTC_Init+0xac>)
 8002834:	2200      	movs	r2, #0
 8002836:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002838:	4b1b      	ldr	r3, [pc, #108]	@ (80028a8 <MX_RTC_Init+0xac>)
 800283a:	2200      	movs	r2, #0
 800283c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800283e:	481a      	ldr	r0, [pc, #104]	@ (80028a8 <MX_RTC_Init+0xac>)
 8002840:	f006 f8b6 	bl	80089b0 <HAL_RTC_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800284a:	f7ff fd9b 	bl	8002384 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800284e:	2300      	movs	r3, #0
 8002850:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002852:	2300      	movs	r3, #0
 8002854:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002856:	2300      	movs	r3, #0
 8002858:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002862:	1d3b      	adds	r3, r7, #4
 8002864:	2201      	movs	r2, #1
 8002866:	4619      	mov	r1, r3
 8002868:	480f      	ldr	r0, [pc, #60]	@ (80028a8 <MX_RTC_Init+0xac>)
 800286a:	f006 f922 	bl	8008ab2 <HAL_RTC_SetTime>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002874:	f7ff fd86 	bl	8002384 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8002878:	2307      	movs	r3, #7
 800287a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800287c:	2301      	movs	r3, #1
 800287e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002880:	2301      	movs	r3, #1
 8002882:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8002884:	2323      	movs	r3, #35	@ 0x23
 8002886:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002888:	463b      	mov	r3, r7
 800288a:	2201      	movs	r2, #1
 800288c:	4619      	mov	r1, r3
 800288e:	4806      	ldr	r0, [pc, #24]	@ (80028a8 <MX_RTC_Init+0xac>)
 8002890:	f006 fa07 	bl	8008ca2 <HAL_RTC_SetDate>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800289a:	f7ff fd73 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800289e:	bf00      	nop
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20006320 	.word	0x20006320
 80028ac:	40002800 	.word	0x40002800

080028b0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028b8:	f107 0308 	add.w	r3, r7, #8
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a0c      	ldr	r2, [pc, #48]	@ (80028fc <HAL_RTC_MspInit+0x4c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d111      	bne.n	80028f4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80028d0:	2302      	movs	r3, #2
 80028d2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80028d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028d8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028da:	f107 0308 	add.w	r3, r7, #8
 80028de:	4618      	mov	r0, r3
 80028e0:	f005 ff84 	bl	80087ec <HAL_RCCEx_PeriphCLKConfig>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80028ea:	f7ff fd4b 	bl	8002384 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80028ee:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <HAL_RTC_MspInit+0x50>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80028f4:	bf00      	nop
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40002800 	.word	0x40002800
 8002900:	42470e3c 	.word	0x42470e3c

08002904 <SD_SETUP>:

LOG syslog_buffer;
extern ring_buffer_t SD_BUFFER;
extern uint8_t SD_BUFFER_ARR[1 << 12];

int SD_SETUP(DATETIME *boot) {
 8002904:	b5b0      	push	{r4, r5, r7, lr}
 8002906:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800290a:	b086      	sub	sp, #24
 800290c:	af04      	add	r7, sp, #16
 800290e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002912:	f843 0c44 	str.w	r0, [r3, #-68]
  FATFS SD_FATFS;

  // init buffer
  ring_buffer_init(&SD_BUFFER, (char *)SD_BUFFER_ARR, sizeof(SD_BUFFER_ARR));
 8002916:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800291a:	494c      	ldr	r1, [pc, #304]	@ (8002a4c <SD_SETUP+0x148>)
 800291c:	484c      	ldr	r0, [pc, #304]	@ (8002a50 <SD_SETUP+0x14c>)
 800291e:	f7ff fdd7 	bl	80024d0 <ring_buffer_init>

  disk_initialize((BYTE) 0);
 8002922:	2000      	movs	r0, #0
 8002924:	f00a fb2a 	bl	800cf7c <disk_initialize>
  int ret = f_mount(&SD_FATFS, "", 0);
 8002928:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800292c:	3b1c      	subs	r3, #28
 800292e:	2200      	movs	r2, #0
 8002930:	4948      	ldr	r1, [pc, #288]	@ (8002a54 <SD_SETUP+0x150>)
 8002932:	4618      	mov	r0, r3
 8002934:	f00c fca6 	bl	800f284 <f_mount>
 8002938:	4603      	mov	r3, r0
 800293a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800293e:	f102 0204 	add.w	r2, r2, #4
 8002942:	6013      	str	r3, [r2, #0]

  if (ret != FR_OK) {
 8002944:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002948:	f103 0304 	add.w	r3, r3, #4
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d015      	beq.n	800297e <SD_SETUP+0x7a>
    sys_state.SD = false;
 8002952:	4a41      	ldr	r2, [pc, #260]	@ (8002a58 <SD_SETUP+0x154>)
 8002954:	7813      	ldrb	r3, [r2, #0]
 8002956:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800295a:	7013      	strb	r3, [r2, #0]
    HAL_GPIO_WritePin(GPIOE, LED_SD_Pin, GPIO_PIN_RESET);
 800295c:	2200      	movs	r2, #0
 800295e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002962:	483e      	ldr	r0, [pc, #248]	@ (8002a5c <SD_SETUP+0x158>)
 8002964:	f003 fb84 	bl	8006070 <HAL_GPIO_WritePin>

    SYS_LOG(LOG_ERROR, ECU, SD_INIT);
 8002968:	2203      	movs	r2, #3
 800296a:	2100      	movs	r1, #0
 800296c:	2001      	movs	r0, #1
 800296e:	f7ff f93b 	bl	8001be8 <SYS_LOG>

    return ret;
 8002972:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002976:	f103 0304 	add.w	r3, r3, #4
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	e060      	b.n	8002a40 <SD_SETUP+0x13c>
  }

  sprintf(logname, "20%02d-%02d-%02d %02d-%02d-%02d.log",
      boot->year, boot->month, boot->date, boot->hour, boot->minute, boot->second);
 800297e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002982:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002986:	781b      	ldrb	r3, [r3, #0]
  sprintf(logname, "20%02d-%02d-%02d %02d-%02d-%02d.log",
 8002988:	461c      	mov	r4, r3
      boot->year, boot->month, boot->date, boot->hour, boot->minute, boot->second);
 800298a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800298e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002992:	785b      	ldrb	r3, [r3, #1]
  sprintf(logname, "20%02d-%02d-%02d %02d-%02d-%02d.log",
 8002994:	461d      	mov	r5, r3
      boot->year, boot->month, boot->date, boot->hour, boot->minute, boot->second);
 8002996:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800299a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800299e:	789b      	ldrb	r3, [r3, #2]
  sprintf(logname, "20%02d-%02d-%02d %02d-%02d-%02d.log",
 80029a0:	461a      	mov	r2, r3
      boot->year, boot->month, boot->date, boot->hour, boot->minute, boot->second);
 80029a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80029a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80029aa:	78db      	ldrb	r3, [r3, #3]
  sprintf(logname, "20%02d-%02d-%02d %02d-%02d-%02d.log",
 80029ac:	4619      	mov	r1, r3
      boot->year, boot->month, boot->date, boot->hour, boot->minute, boot->second);
 80029ae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80029b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80029b6:	791b      	ldrb	r3, [r3, #4]
  sprintf(logname, "20%02d-%02d-%02d %02d-%02d-%02d.log",
 80029b8:	4618      	mov	r0, r3
      boot->year, boot->month, boot->date, boot->hour, boot->minute, boot->second);
 80029ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80029be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80029c2:	795b      	ldrb	r3, [r3, #5]
  sprintf(logname, "20%02d-%02d-%02d %02d-%02d-%02d.log",
 80029c4:	9303      	str	r3, [sp, #12]
 80029c6:	9002      	str	r0, [sp, #8]
 80029c8:	9101      	str	r1, [sp, #4]
 80029ca:	9200      	str	r2, [sp, #0]
 80029cc:	462b      	mov	r3, r5
 80029ce:	4622      	mov	r2, r4
 80029d0:	4923      	ldr	r1, [pc, #140]	@ (8002a60 <SD_SETUP+0x15c>)
 80029d2:	4824      	ldr	r0, [pc, #144]	@ (8002a64 <SD_SETUP+0x160>)
 80029d4:	f00d fb0e 	bl	800fff4 <siprintf>

  ret = f_open(&logfile, logname, FA_OPEN_APPEND | FA_WRITE);
 80029d8:	2232      	movs	r2, #50	@ 0x32
 80029da:	4922      	ldr	r1, [pc, #136]	@ (8002a64 <SD_SETUP+0x160>)
 80029dc:	4822      	ldr	r0, [pc, #136]	@ (8002a68 <SD_SETUP+0x164>)
 80029de:	f00c fc97 	bl	800f310 <f_open>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80029e8:	f102 0204 	add.w	r2, r2, #4
 80029ec:	6013      	str	r3, [r2, #0]

  if (ret != FR_OK) {
 80029ee:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80029f2:	f103 0304 	add.w	r3, r3, #4
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d015      	beq.n	8002a28 <SD_SETUP+0x124>
    sys_state.SD = false;
 80029fc:	4a16      	ldr	r2, [pc, #88]	@ (8002a58 <SD_SETUP+0x154>)
 80029fe:	7813      	ldrb	r3, [r2, #0]
 8002a00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a04:	7013      	strb	r3, [r2, #0]
    HAL_GPIO_WritePin(GPIOE, LED_SD_Pin, GPIO_PIN_RESET);
 8002a06:	2200      	movs	r2, #0
 8002a08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a0c:	4813      	ldr	r0, [pc, #76]	@ (8002a5c <SD_SETUP+0x158>)
 8002a0e:	f003 fb2f 	bl	8006070 <HAL_GPIO_WritePin>

    SYS_LOG(LOG_ERROR, ECU, SD_INIT);
 8002a12:	2203      	movs	r2, #3
 8002a14:	2100      	movs	r1, #0
 8002a16:	2001      	movs	r0, #1
 8002a18:	f7ff f8e6 	bl	8001be8 <SYS_LOG>

    return ret;
 8002a1c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002a20:	f103 0304 	add.w	r3, r3, #4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	e00b      	b.n	8002a40 <SD_SETUP+0x13c>
  }

  sys_state.SD = true;
 8002a28:	4a0b      	ldr	r2, [pc, #44]	@ (8002a58 <SD_SETUP+0x154>)
 8002a2a:	7813      	ldrb	r3, [r2, #0]
 8002a2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a30:	7013      	strb	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOE, LED_SD_Pin, GPIO_PIN_SET);
 8002a32:	2201      	movs	r2, #1
 8002a34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a38:	4808      	ldr	r0, [pc, #32]	@ (8002a5c <SD_SETUP+0x158>)
 8002a3a:	f003 fb19 	bl	8006070 <HAL_GPIO_WritePin>

  return SYS_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a4c:	200012f4 	.word	0x200012f4
 8002a50:	200012e4 	.word	0x200012e4
 8002a54:	0801116c 	.word	0x0801116c
 8002a58:	200012c0 	.word	0x200012c0
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	08011170 	.word	0x08011170
 8002a64:	20006340 	.word	0x20006340
 8002a68:	20000280 	.word	0x20000280

08002a6c <SD_WRITE>:

int SD_WRITE(void) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
  if (sys_state.SD == false) {
 8002a72:	4b20      	ldr	r3, [pc, #128]	@ (8002af4 <SD_WRITE+0x88>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d102      	bne.n	8002a86 <SD_WRITE+0x1a>
    return -1;
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	e032      	b.n	8002aec <SD_WRITE+0x80>
  }

  if (ring_buffer_is_empty(&SD_BUFFER)) {
 8002a86:	481c      	ldr	r0, [pc, #112]	@ (8002af8 <SD_WRITE+0x8c>)
 8002a88:	f7ff fcf6 	bl	8002478 <ring_buffer_is_empty>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <SD_WRITE+0x2c>
    return -1;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
 8002a96:	e029      	b.n	8002aec <SD_WRITE+0x80>
  }

  int ret = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	607b      	str	r3, [r7, #4]
  static int32_t written_count;

  while (!ring_buffer_is_empty(&SD_BUFFER)) {
 8002a9c:	e00c      	b.n	8002ab8 <SD_WRITE+0x4c>
    ring_buffer_dequeue_arr(&SD_BUFFER, (char *)&syslog_buffer, sizeof(LOG));
 8002a9e:	2210      	movs	r2, #16
 8002aa0:	4916      	ldr	r1, [pc, #88]	@ (8002afc <SD_WRITE+0x90>)
 8002aa2:	4815      	ldr	r0, [pc, #84]	@ (8002af8 <SD_WRITE+0x8c>)
 8002aa4:	f7ff fda4 	bl	80025f0 <ring_buffer_dequeue_arr>
    ret = f_write(&logfile, &syslog_buffer, sizeof(LOG), (void *)&written_count);
 8002aa8:	4b15      	ldr	r3, [pc, #84]	@ (8002b00 <SD_WRITE+0x94>)
 8002aaa:	2210      	movs	r2, #16
 8002aac:	4913      	ldr	r1, [pc, #76]	@ (8002afc <SD_WRITE+0x90>)
 8002aae:	4815      	ldr	r0, [pc, #84]	@ (8002b04 <SD_WRITE+0x98>)
 8002ab0:	f00c fdf6 	bl	800f6a0 <f_write>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	607b      	str	r3, [r7, #4]
  while (!ring_buffer_is_empty(&SD_BUFFER)) {
 8002ab8:	480f      	ldr	r0, [pc, #60]	@ (8002af8 <SD_WRITE+0x8c>)
 8002aba:	f7ff fcdd 	bl	8002478 <ring_buffer_is_empty>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0ec      	beq.n	8002a9e <SD_WRITE+0x32>
  }

  if (ret != FR_OK) {
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00f      	beq.n	8002aea <SD_WRITE+0x7e>
    sys_state.SD = false;
 8002aca:	4a0a      	ldr	r2, [pc, #40]	@ (8002af4 <SD_WRITE+0x88>)
 8002acc:	7813      	ldrb	r3, [r2, #0]
 8002ace:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ad2:	7013      	strb	r3, [r2, #0]
    HAL_GPIO_WritePin(GPIOE, LED_SD_Pin, GPIO_PIN_RESET);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ada:	480b      	ldr	r0, [pc, #44]	@ (8002b08 <SD_WRITE+0x9c>)
 8002adc:	f003 fac8 	bl	8006070 <HAL_GPIO_WritePin>

    SYS_LOG(LOG_ERROR, ECU, SD_INIT);
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	f7ff f87f 	bl	8001be8 <SYS_LOG>
  }

  return ret;
 8002aea:	687b      	ldr	r3, [r7, #4]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	200012c0 	.word	0x200012c0
 8002af8:	200012e4 	.word	0x200012e4
 8002afc:	20006368 	.word	0x20006368
 8002b00:	200064bc 	.word	0x200064bc
 8002b04:	20000280 	.word	0x20000280
 8002b08:	40021000 	.word	0x40021000

08002b0c <SD_SYNC>:

int SD_SYNC(void) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
  if (sys_state.SD == false) {
 8002b12:	4b13      	ldr	r3, [pc, #76]	@ (8002b60 <SD_SYNC+0x54>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <SD_SYNC+0x1a>
    return -1;
 8002b20:	f04f 33ff 	mov.w	r3, #4294967295
 8002b24:	e018      	b.n	8002b58 <SD_SYNC+0x4c>
  }

  int ret = f_sync(&logfile);
 8002b26:	480f      	ldr	r0, [pc, #60]	@ (8002b64 <SD_SYNC+0x58>)
 8002b28:	f00c ff4e 	bl	800f9c8 <f_sync>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	607b      	str	r3, [r7, #4]

  if (ret != FR_OK) {
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00f      	beq.n	8002b56 <SD_SYNC+0x4a>
    sys_state.SD = false;
 8002b36:	4a0a      	ldr	r2, [pc, #40]	@ (8002b60 <SD_SYNC+0x54>)
 8002b38:	7813      	ldrb	r3, [r2, #0]
 8002b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b3e:	7013      	strb	r3, [r2, #0]
    HAL_GPIO_WritePin(GPIOE, LED_SD_Pin, GPIO_PIN_RESET);
 8002b40:	2200      	movs	r2, #0
 8002b42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b46:	4808      	ldr	r0, [pc, #32]	@ (8002b68 <SD_SYNC+0x5c>)
 8002b48:	f003 fa92 	bl	8006070 <HAL_GPIO_WritePin>

    SYS_LOG(LOG_ERROR, ECU, SD_INIT);
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	2100      	movs	r1, #0
 8002b50:	2001      	movs	r0, #1
 8002b52:	f7ff f849 	bl	8001be8 <SYS_LOG>
  }

  return ret;
 8002b56:	687b      	ldr	r3, [r7, #4]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	200012c0 	.word	0x200012c0
 8002b64:	20000280 	.word	0x20000280
 8002b68:	40021000 	.word	0x40021000

08002b6c <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002b70:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba8 <MX_SDIO_SD_Init+0x3c>)
 8002b72:	4a0e      	ldr	r2, [pc, #56]	@ (8002bac <MX_SDIO_SD_Init+0x40>)
 8002b74:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002b76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba8 <MX_SDIO_SD_Init+0x3c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba8 <MX_SDIO_SD_Init+0x3c>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002b82:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <MX_SDIO_SD_Init+0x3c>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002b88:	4b07      	ldr	r3, [pc, #28]	@ (8002ba8 <MX_SDIO_SD_Init+0x3c>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8002b8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <MX_SDIO_SD_Init+0x3c>)
 8002b90:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b94:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 12;
 8002b96:	4b04      	ldr	r3, [pc, #16]	@ (8002ba8 <MX_SDIO_SD_Init+0x3c>)
 8002b98:	220c      	movs	r2, #12
 8002b9a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20006378 	.word	0x20006378
 8002bac:	40012c00 	.word	0x40012c00

08002bb0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08a      	sub	sp, #40	@ 0x28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a70      	ldr	r2, [pc, #448]	@ (8002d90 <HAL_SD_MspInit+0x1e0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	f040 80da 	bne.w	8002d88 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	4b6e      	ldr	r3, [pc, #440]	@ (8002d94 <HAL_SD_MspInit+0x1e4>)
 8002bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bdc:	4a6d      	ldr	r2, [pc, #436]	@ (8002d94 <HAL_SD_MspInit+0x1e4>)
 8002bde:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002be2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002be4:	4b6b      	ldr	r3, [pc, #428]	@ (8002d94 <HAL_SD_MspInit+0x1e4>)
 8002be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	4b67      	ldr	r3, [pc, #412]	@ (8002d94 <HAL_SD_MspInit+0x1e4>)
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf8:	4a66      	ldr	r2, [pc, #408]	@ (8002d94 <HAL_SD_MspInit+0x1e4>)
 8002bfa:	f043 0304 	orr.w	r3, r3, #4
 8002bfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c00:	4b64      	ldr	r3, [pc, #400]	@ (8002d94 <HAL_SD_MspInit+0x1e4>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	4b60      	ldr	r3, [pc, #384]	@ (8002d94 <HAL_SD_MspInit+0x1e4>)
 8002c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c14:	4a5f      	ldr	r2, [pc, #380]	@ (8002d94 <HAL_SD_MspInit+0x1e4>)
 8002c16:	f043 0308 	orr.w	r3, r3, #8
 8002c1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c1c:	4b5d      	ldr	r3, [pc, #372]	@ (8002d94 <HAL_SD_MspInit+0x1e4>)
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c32:	2301      	movs	r3, #1
 8002c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c36:	2303      	movs	r3, #3
 8002c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002c3a:	230c      	movs	r3, #12
 8002c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c3e:	f107 0314 	add.w	r3, r7, #20
 8002c42:	4619      	mov	r1, r3
 8002c44:	4854      	ldr	r0, [pc, #336]	@ (8002d98 <HAL_SD_MspInit+0x1e8>)
 8002c46:	f003 f85f 	bl	8005d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c50:	2302      	movs	r3, #2
 8002c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002c5c:	230c      	movs	r3, #12
 8002c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	4619      	mov	r1, r3
 8002c66:	484c      	ldr	r0, [pc, #304]	@ (8002d98 <HAL_SD_MspInit+0x1e8>)
 8002c68:	f003 f84e 	bl	8005d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c74:	2301      	movs	r3, #1
 8002c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002c7c:	230c      	movs	r3, #12
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	4619      	mov	r1, r3
 8002c86:	4845      	ldr	r0, [pc, #276]	@ (8002d9c <HAL_SD_MspInit+0x1ec>)
 8002c88:	f003 f83e 	bl	8005d08 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002c8c:	4b44      	ldr	r3, [pc, #272]	@ (8002da0 <HAL_SD_MspInit+0x1f0>)
 8002c8e:	4a45      	ldr	r2, [pc, #276]	@ (8002da4 <HAL_SD_MspInit+0x1f4>)
 8002c90:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002c92:	4b43      	ldr	r3, [pc, #268]	@ (8002da0 <HAL_SD_MspInit+0x1f0>)
 8002c94:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002c98:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c9a:	4b41      	ldr	r3, [pc, #260]	@ (8002da0 <HAL_SD_MspInit+0x1f0>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca0:	4b3f      	ldr	r3, [pc, #252]	@ (8002da0 <HAL_SD_MspInit+0x1f0>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ca6:	4b3e      	ldr	r3, [pc, #248]	@ (8002da0 <HAL_SD_MspInit+0x1f0>)
 8002ca8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cac:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cae:	4b3c      	ldr	r3, [pc, #240]	@ (8002da0 <HAL_SD_MspInit+0x1f0>)
 8002cb0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002cb4:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8002da0 <HAL_SD_MspInit+0x1f0>)
 8002cb8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cbc:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002cbe:	4b38      	ldr	r3, [pc, #224]	@ (8002da0 <HAL_SD_MspInit+0x1f0>)
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cc4:	4b36      	ldr	r3, [pc, #216]	@ (8002da0 <HAL_SD_MspInit+0x1f0>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002cca:	4b35      	ldr	r3, [pc, #212]	@ (8002da0 <HAL_SD_MspInit+0x1f0>)
 8002ccc:	2204      	movs	r2, #4
 8002cce:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002cd0:	4b33      	ldr	r3, [pc, #204]	@ (8002da0 <HAL_SD_MspInit+0x1f0>)
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002cd6:	4b32      	ldr	r3, [pc, #200]	@ (8002da0 <HAL_SD_MspInit+0x1f0>)
 8002cd8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002cdc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002cde:	4b30      	ldr	r3, [pc, #192]	@ (8002da0 <HAL_SD_MspInit+0x1f0>)
 8002ce0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002ce4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002ce6:	482e      	ldr	r0, [pc, #184]	@ (8002da0 <HAL_SD_MspInit+0x1f0>)
 8002ce8:	f002 fbf2 	bl	80054d0 <HAL_DMA_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8002cf2:	f7ff fb47 	bl	8002384 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a29      	ldr	r2, [pc, #164]	@ (8002da0 <HAL_SD_MspInit+0x1f0>)
 8002cfa:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cfc:	4a28      	ldr	r2, [pc, #160]	@ (8002da0 <HAL_SD_MspInit+0x1f0>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002d02:	4b29      	ldr	r3, [pc, #164]	@ (8002da8 <HAL_SD_MspInit+0x1f8>)
 8002d04:	4a29      	ldr	r2, [pc, #164]	@ (8002dac <HAL_SD_MspInit+0x1fc>)
 8002d06:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002d08:	4b27      	ldr	r3, [pc, #156]	@ (8002da8 <HAL_SD_MspInit+0x1f8>)
 8002d0a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002d0e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d10:	4b25      	ldr	r3, [pc, #148]	@ (8002da8 <HAL_SD_MspInit+0x1f8>)
 8002d12:	2240      	movs	r2, #64	@ 0x40
 8002d14:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d16:	4b24      	ldr	r3, [pc, #144]	@ (8002da8 <HAL_SD_MspInit+0x1f8>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d1c:	4b22      	ldr	r3, [pc, #136]	@ (8002da8 <HAL_SD_MspInit+0x1f8>)
 8002d1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d22:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d24:	4b20      	ldr	r3, [pc, #128]	@ (8002da8 <HAL_SD_MspInit+0x1f8>)
 8002d26:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d2a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002da8 <HAL_SD_MspInit+0x1f8>)
 8002d2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d32:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002d34:	4b1c      	ldr	r3, [pc, #112]	@ (8002da8 <HAL_SD_MspInit+0x1f8>)
 8002d36:	2220      	movs	r2, #32
 8002d38:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002da8 <HAL_SD_MspInit+0x1f8>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002d40:	4b19      	ldr	r3, [pc, #100]	@ (8002da8 <HAL_SD_MspInit+0x1f8>)
 8002d42:	2204      	movs	r2, #4
 8002d44:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002d46:	4b18      	ldr	r3, [pc, #96]	@ (8002da8 <HAL_SD_MspInit+0x1f8>)
 8002d48:	2203      	movs	r2, #3
 8002d4a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002d4c:	4b16      	ldr	r3, [pc, #88]	@ (8002da8 <HAL_SD_MspInit+0x1f8>)
 8002d4e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d52:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002d54:	4b14      	ldr	r3, [pc, #80]	@ (8002da8 <HAL_SD_MspInit+0x1f8>)
 8002d56:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002d5a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002d5c:	4812      	ldr	r0, [pc, #72]	@ (8002da8 <HAL_SD_MspInit+0x1f8>)
 8002d5e:	f002 fbb7 	bl	80054d0 <HAL_DMA_Init>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002d68:	f7ff fb0c 	bl	8002384 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8002da8 <HAL_SD_MspInit+0x1f8>)
 8002d70:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d72:	4a0d      	ldr	r2, [pc, #52]	@ (8002da8 <HAL_SD_MspInit+0x1f8>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	2031      	movs	r0, #49	@ 0x31
 8002d7e:	f002 fb70 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002d82:	2031      	movs	r0, #49	@ 0x31
 8002d84:	f002 fb89 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8002d88:	bf00      	nop
 8002d8a:	3728      	adds	r7, #40	@ 0x28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40012c00 	.word	0x40012c00
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40020800 	.word	0x40020800
 8002d9c:	40020c00 	.word	0x40020c00
 8002da0:	200063fc 	.word	0x200063fc
 8002da4:	40026458 	.word	0x40026458
 8002da8:	2000645c 	.word	0x2000645c
 8002dac:	400264a0 	.word	0x400264a0

08002db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	4b10      	ldr	r3, [pc, #64]	@ (8002dfc <HAL_MspInit+0x4c>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8002dfc <HAL_MspInit+0x4c>)
 8002dc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002dfc <HAL_MspInit+0x4c>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dce:	607b      	str	r3, [r7, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <HAL_MspInit+0x4c>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	4a08      	ldr	r2, [pc, #32]	@ (8002dfc <HAL_MspInit+0x4c>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002de2:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <HAL_MspInit+0x4c>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800

08002e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002e04:	f005 fcd6 	bl	80087b4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <NMI_Handler+0x8>

08002e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e10:	bf00      	nop
 8002e12:	e7fd      	b.n	8002e10 <HardFault_Handler+0x4>

08002e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e18:	bf00      	nop
 8002e1a:	e7fd      	b.n	8002e18 <MemManage_Handler+0x4>

08002e1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e20:	bf00      	nop
 8002e22:	e7fd      	b.n	8002e20 <BusFault_Handler+0x4>

08002e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e28:	bf00      	nop
 8002e2a:	e7fd      	b.n	8002e28 <UsageFault_Handler+0x4>

08002e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e5a:	f000 fd1f 	bl	800389c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8002e68:	4802      	ldr	r0, [pc, #8]	@ (8002e74 <DMA1_Stream2_IRQHandler+0x10>)
 8002e6a:	f002 fcc9 	bl	8005800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200065b4 	.word	0x200065b4

08002e78 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002e7c:	4802      	ldr	r0, [pc, #8]	@ (8002e88 <DMA1_Stream5_IRQHandler+0x10>)
 8002e7e:	f002 fcbf 	bl	8005800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	200066a8 	.word	0x200066a8

08002e8c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002e90:	4803      	ldr	r0, [pc, #12]	@ (8002ea0 <ADC_IRQHandler+0x14>)
 8002e92:	f000 fe69 	bl	8003b68 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002e96:	4803      	ldr	r0, [pc, #12]	@ (8002ea4 <ADC_IRQHandler+0x18>)
 8002e98:	f000 fe66 	bl	8003b68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002e9c:	bf00      	nop
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	200000d8 	.word	0x200000d8
 8002ea4:	20000120 	.word	0x20000120

08002ea8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002eac:	4802      	ldr	r0, [pc, #8]	@ (8002eb8 <CAN1_TX_IRQHandler+0x10>)
 8002eae:	f001 ff8b 	bl	8004dc8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000168 	.word	0x20000168

08002ebc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002ec0:	4802      	ldr	r0, [pc, #8]	@ (8002ecc <CAN1_RX0_IRQHandler+0x10>)
 8002ec2:	f001 ff81 	bl	8004dc8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000168 	.word	0x20000168

08002ed0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002ed4:	4802      	ldr	r0, [pc, #8]	@ (8002ee0 <CAN1_RX1_IRQHandler+0x10>)
 8002ed6:	f001 ff77 	bl	8004dc8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000168 	.word	0x20000168

08002ee4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002ee8:	4802      	ldr	r0, [pc, #8]	@ (8002ef4 <CAN1_SCE_IRQHandler+0x10>)
 8002eea:	f001 ff6d 	bl	8004dc8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000168 	.word	0x20000168

08002ef8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002efc:	4802      	ldr	r0, [pc, #8]	@ (8002f08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002efe:	f007 faa2 	bl	800a446 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	200064c4 	.word	0x200064c4

08002f0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f10:	4802      	ldr	r0, [pc, #8]	@ (8002f1c <TIM3_IRQHandler+0x10>)
 8002f12:	f007 fa98 	bl	800a446 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	2000650c 	.word	0x2000650c

08002f20 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002f24:	4802      	ldr	r0, [pc, #8]	@ (8002f30 <I2C1_EV_IRQHandler+0x10>)
 8002f26:	f003 fbed 	bl	8006704 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200001d8 	.word	0x200001d8

08002f34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f38:	4802      	ldr	r0, [pc, #8]	@ (8002f44 <USART1_IRQHandler+0x10>)
 8002f3a:	f008 f92f 	bl	800b19c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20006618 	.word	0x20006618

08002f48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f4c:	4802      	ldr	r0, [pc, #8]	@ (8002f58 <USART2_IRQHandler+0x10>)
 8002f4e:	f008 f925 	bl	800b19c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20006660 	.word	0x20006660

08002f5c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8002f60:	4802      	ldr	r0, [pc, #8]	@ (8002f6c <DMA1_Stream7_IRQHandler+0x10>)
 8002f62:	f002 fc4d 	bl	8005800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20006554 	.word	0x20006554

08002f70 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002f74:	4802      	ldr	r0, [pc, #8]	@ (8002f80 <SDIO_IRQHandler+0x10>)
 8002f76:	f006 fa95 	bl	80094a4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20006378 	.word	0x20006378

08002f84 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002f88:	4802      	ldr	r0, [pc, #8]	@ (8002f94 <DMA2_Stream3_IRQHandler+0x10>)
 8002f8a:	f002 fc39 	bl	8005800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	200063fc 	.word	0x200063fc

08002f98 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002f9c:	4802      	ldr	r0, [pc, #8]	@ (8002fa8 <CAN2_TX_IRQHandler+0x10>)
 8002f9e:	f001 ff13 	bl	8004dc8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000190 	.word	0x20000190

08002fac <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002fb0:	4802      	ldr	r0, [pc, #8]	@ (8002fbc <CAN2_RX0_IRQHandler+0x10>)
 8002fb2:	f001 ff09 	bl	8004dc8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000190 	.word	0x20000190

08002fc0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002fc4:	4802      	ldr	r0, [pc, #8]	@ (8002fd0 <CAN2_RX1_IRQHandler+0x10>)
 8002fc6:	f001 feff 	bl	8004dc8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000190 	.word	0x20000190

08002fd4 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002fd8:	4802      	ldr	r0, [pc, #8]	@ (8002fe4 <CAN2_SCE_IRQHandler+0x10>)
 8002fda:	f001 fef5 	bl	8004dc8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000190 	.word	0x20000190

08002fe8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002fec:	4802      	ldr	r0, [pc, #8]	@ (8002ff8 <DMA2_Stream6_IRQHandler+0x10>)
 8002fee:	f002 fc07 	bl	8005800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2000645c 	.word	0x2000645c

08002ffc <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003000:	4802      	ldr	r0, [pc, #8]	@ (800300c <I2C3_EV_IRQHandler+0x10>)
 8003002:	f003 fb7f 	bl	8006704 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	2000022c 	.word	0x2000022c

08003010 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return 1;
 8003014:	2301      	movs	r3, #1
}
 8003016:	4618      	mov	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <_kill>:

int _kill(int pid, int sig)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800302a:	f00d f8a9 	bl	8010180 <__errno>
 800302e:	4603      	mov	r3, r0
 8003030:	2216      	movs	r2, #22
 8003032:	601a      	str	r2, [r3, #0]
  return -1;
 8003034:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <_exit>:

void _exit (int status)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003048:	f04f 31ff 	mov.w	r1, #4294967295
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ffe7 	bl	8003020 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003052:	bf00      	nop
 8003054:	e7fd      	b.n	8003052 <_exit+0x12>

08003056 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800307e:	605a      	str	r2, [r3, #4]
  return 0;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <_isatty>:

int _isatty(int file)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003096:	2301      	movs	r3, #1
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
	...

080030c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030c8:	4a14      	ldr	r2, [pc, #80]	@ (800311c <_sbrk+0x5c>)
 80030ca:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <_sbrk+0x60>)
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030d4:	4b13      	ldr	r3, [pc, #76]	@ (8003124 <_sbrk+0x64>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030dc:	4b11      	ldr	r3, [pc, #68]	@ (8003124 <_sbrk+0x64>)
 80030de:	4a12      	ldr	r2, [pc, #72]	@ (8003128 <_sbrk+0x68>)
 80030e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030e2:	4b10      	ldr	r3, [pc, #64]	@ (8003124 <_sbrk+0x64>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d207      	bcs.n	8003100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030f0:	f00d f846 	bl	8010180 <__errno>
 80030f4:	4603      	mov	r3, r0
 80030f6:	220c      	movs	r2, #12
 80030f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030fa:	f04f 33ff 	mov.w	r3, #4294967295
 80030fe:	e009      	b.n	8003114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003100:	4b08      	ldr	r3, [pc, #32]	@ (8003124 <_sbrk+0x64>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003106:	4b07      	ldr	r3, [pc, #28]	@ (8003124 <_sbrk+0x64>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	4a05      	ldr	r2, [pc, #20]	@ (8003124 <_sbrk+0x64>)
 8003110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003112:	68fb      	ldr	r3, [r7, #12]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	20020000 	.word	0x20020000
 8003120:	00000400 	.word	0x00000400
 8003124:	200064c0 	.word	0x200064c0
 8003128:	20006aa0 	.word	0x20006aa0

0800312c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003130:	4b06      	ldr	r3, [pc, #24]	@ (800314c <SystemInit+0x20>)
 8003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003136:	4a05      	ldr	r2, [pc, #20]	@ (800314c <SystemInit+0x20>)
 8003138:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800313c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <HAL_TIM_PeriodElapsedCallback>:
extern uint32_t pulse_buffer_1[PULSE_CH_COUNT];

static void CALC_PERIOD(int channel, uint32_t arr);
#endif

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  static uint32_t count = 0;

  if (htim->Instance == TIM1) {
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a10      	ldr	r2, [pc, #64]	@ (80031a0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d117      	bne.n	8003192 <HAL_TIM_PeriodElapsedCallback+0x42>
    count++;
 8003162:	4b10      	ldr	r3, [pc, #64]	@ (80031a4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3301      	adds	r3, #1
 8003168:	4a0e      	ldr	r2, [pc, #56]	@ (80031a4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800316a:	6013      	str	r3, [r2, #0]
    timer_flag |= 1 << FLAG_TIMER_100ms;
 800316c:	4b0e      	ldr	r3, [pc, #56]	@ (80031a8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	4a0c      	ldr	r2, [pc, #48]	@ (80031a8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003176:	6013      	str	r3, [r2, #0]

    if (count == 10) {
 8003178:	4b0a      	ldr	r3, [pc, #40]	@ (80031a4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b0a      	cmp	r3, #10
 800317e:	d108      	bne.n	8003192 <HAL_TIM_PeriodElapsedCallback+0x42>
      count = 0;
 8003180:	4b08      	ldr	r3, [pc, #32]	@ (80031a4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
      timer_flag |= 1 << FLAG_TIMER_1s;
 8003186:	4b08      	ldr	r3, [pc, #32]	@ (80031a8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f043 0302 	orr.w	r3, r3, #2
 800318e:	4a06      	ldr	r2, [pc, #24]	@ (80031a8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003190:	6013      	str	r3, [r2, #0]
    }
  }
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40010000 	.word	0x40010000
 80031a4:	20006614 	.word	0x20006614
 80031a8:	200012c4 	.word	0x200012c4

080031ac <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim3_ch3;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031b2:	f107 0308 	add.w	r3, r7, #8
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	609a      	str	r2, [r3, #8]
 80031be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031c0:	463b      	mov	r3, r7
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003248 <MX_TIM1_Init+0x9c>)
 80031ca:	4a20      	ldr	r2, [pc, #128]	@ (800324c <MX_TIM1_Init+0xa0>)
 80031cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840 - 1;
 80031ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003248 <MX_TIM1_Init+0x9c>)
 80031d0:	f240 3247 	movw	r2, #839	@ 0x347
 80031d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003248 <MX_TIM1_Init+0x9c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000 - 1;
 80031dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003248 <MX_TIM1_Init+0x9c>)
 80031de:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80031e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e4:	4b18      	ldr	r3, [pc, #96]	@ (8003248 <MX_TIM1_Init+0x9c>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031ea:	4b17      	ldr	r3, [pc, #92]	@ (8003248 <MX_TIM1_Init+0x9c>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f0:	4b15      	ldr	r3, [pc, #84]	@ (8003248 <MX_TIM1_Init+0x9c>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031f6:	4814      	ldr	r0, [pc, #80]	@ (8003248 <MX_TIM1_Init+0x9c>)
 80031f8:	f007 f80c 	bl	800a214 <HAL_TIM_Base_Init>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003202:	f7ff f8bf 	bl	8002384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800320a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800320c:	f107 0308 	add.w	r3, r7, #8
 8003210:	4619      	mov	r1, r3
 8003212:	480d      	ldr	r0, [pc, #52]	@ (8003248 <MX_TIM1_Init+0x9c>)
 8003214:	f007 faa3 	bl	800a75e <HAL_TIM_ConfigClockSource>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800321e:	f7ff f8b1 	bl	8002384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003222:	2300      	movs	r3, #0
 8003224:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003226:	2300      	movs	r3, #0
 8003228:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800322a:	463b      	mov	r3, r7
 800322c:	4619      	mov	r1, r3
 800322e:	4806      	ldr	r0, [pc, #24]	@ (8003248 <MX_TIM1_Init+0x9c>)
 8003230:	f007 fdee 	bl	800ae10 <HAL_TIMEx_MasterConfigSynchronization>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800323a:	f7ff f8a3 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800323e:	bf00      	nop
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	200064c4 	.word	0x200064c4
 800324c:	40010000 	.word	0x40010000

08003250 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	@ 0x28
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003256:	f107 0318 	add.w	r3, r7, #24
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003264:	f107 0310 	add.w	r3, r7, #16
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800326e:	463b      	mov	r3, r7
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800327a:	4b31      	ldr	r3, [pc, #196]	@ (8003340 <MX_TIM3_Init+0xf0>)
 800327c:	4a31      	ldr	r2, [pc, #196]	@ (8003344 <MX_TIM3_Init+0xf4>)
 800327e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003280:	4b2f      	ldr	r3, [pc, #188]	@ (8003340 <MX_TIM3_Init+0xf0>)
 8003282:	2200      	movs	r2, #0
 8003284:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003286:	4b2e      	ldr	r3, [pc, #184]	@ (8003340 <MX_TIM3_Init+0xf0>)
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800328c:	4b2c      	ldr	r3, [pc, #176]	@ (8003340 <MX_TIM3_Init+0xf0>)
 800328e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003292:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003294:	4b2a      	ldr	r3, [pc, #168]	@ (8003340 <MX_TIM3_Init+0xf0>)
 8003296:	2200      	movs	r2, #0
 8003298:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800329a:	4b29      	ldr	r3, [pc, #164]	@ (8003340 <MX_TIM3_Init+0xf0>)
 800329c:	2200      	movs	r2, #0
 800329e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032a0:	4827      	ldr	r0, [pc, #156]	@ (8003340 <MX_TIM3_Init+0xf0>)
 80032a2:	f006 ffb7 	bl	800a214 <HAL_TIM_Base_Init>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80032ac:	f7ff f86a 	bl	8002384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032b4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80032b6:	f107 0318 	add.w	r3, r7, #24
 80032ba:	4619      	mov	r1, r3
 80032bc:	4820      	ldr	r0, [pc, #128]	@ (8003340 <MX_TIM3_Init+0xf0>)
 80032be:	f007 fa4e 	bl	800a75e <HAL_TIM_ConfigClockSource>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80032c8:	f7ff f85c 	bl	8002384 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80032cc:	481c      	ldr	r0, [pc, #112]	@ (8003340 <MX_TIM3_Init+0xf0>)
 80032ce:	f007 f861 	bl	800a394 <HAL_TIM_IC_Init>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80032d8:	f7ff f854 	bl	8002384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032e4:	f107 0310 	add.w	r3, r7, #16
 80032e8:	4619      	mov	r1, r3
 80032ea:	4815      	ldr	r0, [pc, #84]	@ (8003340 <MX_TIM3_Init+0xf0>)
 80032ec:	f007 fd90 	bl	800ae10 <HAL_TIMEx_MasterConfigSynchronization>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80032f6:	f7ff f845 	bl	8002384 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80032fa:	2300      	movs	r3, #0
 80032fc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80032fe:	2301      	movs	r3, #1
 8003300:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800330a:	463b      	mov	r3, r7
 800330c:	2208      	movs	r2, #8
 800330e:	4619      	mov	r1, r3
 8003310:	480b      	ldr	r0, [pc, #44]	@ (8003340 <MX_TIM3_Init+0xf0>)
 8003312:	f007 f988 	bl	800a626 <HAL_TIM_IC_ConfigChannel>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 800331c:	f7ff f832 	bl	8002384 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003320:	463b      	mov	r3, r7
 8003322:	220c      	movs	r2, #12
 8003324:	4619      	mov	r1, r3
 8003326:	4806      	ldr	r0, [pc, #24]	@ (8003340 <MX_TIM3_Init+0xf0>)
 8003328:	f007 f97d 	bl	800a626 <HAL_TIM_IC_ConfigChannel>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8003332:	f7ff f827 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003336:	bf00      	nop
 8003338:	3728      	adds	r7, #40	@ 0x28
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	2000650c 	.word	0x2000650c
 8003344:	40000400 	.word	0x40000400

08003348 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	@ 0x28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003350:	f107 0314 	add.w	r3, r7, #20
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a5e      	ldr	r2, [pc, #376]	@ (80034e0 <HAL_TIM_Base_MspInit+0x198>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d116      	bne.n	8003398 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	4b5d      	ldr	r3, [pc, #372]	@ (80034e4 <HAL_TIM_Base_MspInit+0x19c>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003372:	4a5c      	ldr	r2, [pc, #368]	@ (80034e4 <HAL_TIM_Base_MspInit+0x19c>)
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	6453      	str	r3, [r2, #68]	@ 0x44
 800337a:	4b5a      	ldr	r3, [pc, #360]	@ (80034e4 <HAL_TIM_Base_MspInit+0x19c>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003386:	2200      	movs	r2, #0
 8003388:	2100      	movs	r1, #0
 800338a:	2019      	movs	r0, #25
 800338c:	f002 f869 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003390:	2019      	movs	r0, #25
 8003392:	f002 f882 	bl	800549a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003396:	e09f      	b.n	80034d8 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM3)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a52      	ldr	r2, [pc, #328]	@ (80034e8 <HAL_TIM_Base_MspInit+0x1a0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	f040 809a 	bne.w	80034d8 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	4b4e      	ldr	r3, [pc, #312]	@ (80034e4 <HAL_TIM_Base_MspInit+0x19c>)
 80033aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ac:	4a4d      	ldr	r2, [pc, #308]	@ (80034e4 <HAL_TIM_Base_MspInit+0x19c>)
 80033ae:	f043 0302 	orr.w	r3, r3, #2
 80033b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b4:	4b4b      	ldr	r3, [pc, #300]	@ (80034e4 <HAL_TIM_Base_MspInit+0x19c>)
 80033b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c0:	2300      	movs	r3, #0
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	4b47      	ldr	r3, [pc, #284]	@ (80034e4 <HAL_TIM_Base_MspInit+0x19c>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c8:	4a46      	ldr	r2, [pc, #280]	@ (80034e4 <HAL_TIM_Base_MspInit+0x19c>)
 80033ca:	f043 0302 	orr.w	r3, r3, #2
 80033ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80033d0:	4b44      	ldr	r3, [pc, #272]	@ (80034e4 <HAL_TIM_Base_MspInit+0x19c>)
 80033d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033dc:	2303      	movs	r3, #3
 80033de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e0:	2302      	movs	r3, #2
 80033e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e8:	2300      	movs	r3, #0
 80033ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033ec:	2302      	movs	r3, #2
 80033ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f0:	f107 0314 	add.w	r3, r7, #20
 80033f4:	4619      	mov	r1, r3
 80033f6:	483d      	ldr	r0, [pc, #244]	@ (80034ec <HAL_TIM_Base_MspInit+0x1a4>)
 80033f8:	f002 fc86 	bl	8005d08 <HAL_GPIO_Init>
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 80033fc:	4b3c      	ldr	r3, [pc, #240]	@ (80034f0 <HAL_TIM_Base_MspInit+0x1a8>)
 80033fe:	4a3d      	ldr	r2, [pc, #244]	@ (80034f4 <HAL_TIM_Base_MspInit+0x1ac>)
 8003400:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 8003402:	4b3b      	ldr	r3, [pc, #236]	@ (80034f0 <HAL_TIM_Base_MspInit+0x1a8>)
 8003404:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003408:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800340a:	4b39      	ldr	r3, [pc, #228]	@ (80034f0 <HAL_TIM_Base_MspInit+0x1a8>)
 800340c:	2200      	movs	r2, #0
 800340e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003410:	4b37      	ldr	r3, [pc, #220]	@ (80034f0 <HAL_TIM_Base_MspInit+0x1a8>)
 8003412:	2200      	movs	r2, #0
 8003414:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003416:	4b36      	ldr	r3, [pc, #216]	@ (80034f0 <HAL_TIM_Base_MspInit+0x1a8>)
 8003418:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800341c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800341e:	4b34      	ldr	r3, [pc, #208]	@ (80034f0 <HAL_TIM_Base_MspInit+0x1a8>)
 8003420:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003424:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003426:	4b32      	ldr	r3, [pc, #200]	@ (80034f0 <HAL_TIM_Base_MspInit+0x1a8>)
 8003428:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800342c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 800342e:	4b30      	ldr	r3, [pc, #192]	@ (80034f0 <HAL_TIM_Base_MspInit+0x1a8>)
 8003430:	2200      	movs	r2, #0
 8003432:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003434:	4b2e      	ldr	r3, [pc, #184]	@ (80034f0 <HAL_TIM_Base_MspInit+0x1a8>)
 8003436:	2200      	movs	r2, #0
 8003438:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800343a:	4b2d      	ldr	r3, [pc, #180]	@ (80034f0 <HAL_TIM_Base_MspInit+0x1a8>)
 800343c:	2200      	movs	r2, #0
 800343e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8003440:	482b      	ldr	r0, [pc, #172]	@ (80034f0 <HAL_TIM_Base_MspInit+0x1a8>)
 8003442:	f002 f845 	bl	80054d0 <HAL_DMA_Init>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_TIM_Base_MspInit+0x108>
      Error_Handler();
 800344c:	f7fe ff9a 	bl	8002384 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a27      	ldr	r2, [pc, #156]	@ (80034f0 <HAL_TIM_Base_MspInit+0x1a8>)
 8003454:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003456:	4a26      	ldr	r2, [pc, #152]	@ (80034f0 <HAL_TIM_Base_MspInit+0x1a8>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 800345c:	4b26      	ldr	r3, [pc, #152]	@ (80034f8 <HAL_TIM_Base_MspInit+0x1b0>)
 800345e:	4a27      	ldr	r2, [pc, #156]	@ (80034fc <HAL_TIM_Base_MspInit+0x1b4>)
 8003460:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8003462:	4b25      	ldr	r3, [pc, #148]	@ (80034f8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003464:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003468:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800346a:	4b23      	ldr	r3, [pc, #140]	@ (80034f8 <HAL_TIM_Base_MspInit+0x1b0>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003470:	4b21      	ldr	r3, [pc, #132]	@ (80034f8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003472:	2200      	movs	r2, #0
 8003474:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8003476:	4b20      	ldr	r3, [pc, #128]	@ (80034f8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003478:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800347c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800347e:	4b1e      	ldr	r3, [pc, #120]	@ (80034f8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003480:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003484:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003486:	4b1c      	ldr	r3, [pc, #112]	@ (80034f8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003488:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800348c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 800348e:	4b1a      	ldr	r3, [pc, #104]	@ (80034f8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003490:	2200      	movs	r2, #0
 8003492:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8003494:	4b18      	ldr	r3, [pc, #96]	@ (80034f8 <HAL_TIM_Base_MspInit+0x1b0>)
 8003496:	2200      	movs	r2, #0
 8003498:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800349a:	4b17      	ldr	r3, [pc, #92]	@ (80034f8 <HAL_TIM_Base_MspInit+0x1b0>)
 800349c:	2200      	movs	r2, #0
 800349e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80034a0:	4815      	ldr	r0, [pc, #84]	@ (80034f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80034a2:	f002 f815 	bl	80054d0 <HAL_DMA_Init>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_TIM_Base_MspInit+0x168>
      Error_Handler();
 80034ac:	f7fe ff6a 	bl	8002384 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a11      	ldr	r2, [pc, #68]	@ (80034f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80034b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80034b6:	4a10      	ldr	r2, [pc, #64]	@ (80034f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a0e      	ldr	r2, [pc, #56]	@ (80034f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80034c0:	621a      	str	r2, [r3, #32]
 80034c2:	4a0d      	ldr	r2, [pc, #52]	@ (80034f8 <HAL_TIM_Base_MspInit+0x1b0>)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80034c8:	2200      	movs	r2, #0
 80034ca:	2100      	movs	r1, #0
 80034cc:	201d      	movs	r0, #29
 80034ce:	f001 ffc8 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80034d2:	201d      	movs	r0, #29
 80034d4:	f001 ffe1 	bl	800549a <HAL_NVIC_EnableIRQ>
}
 80034d8:	bf00      	nop
 80034da:	3728      	adds	r7, #40	@ 0x28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40010000 	.word	0x40010000
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40000400 	.word	0x40000400
 80034ec:	40020400 	.word	0x40020400
 80034f0:	20006554 	.word	0x20006554
 80034f4:	400260b8 	.word	0x400260b8
 80034f8:	200065b4 	.word	0x200065b4
 80034fc:	40026040 	.word	0x40026040

08003500 <HAL_UART_RxCpltCallback>:
extern uint32_t gps_flag;
extern uint8_t gps_data[1 << 7];
#endif

// RTC sync rx event
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a17      	ldr	r2, [pc, #92]	@ (800356c <HAL_UART_RxCpltCallback+0x6c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d128      	bne.n	8003564 <HAL_UART_RxCpltCallback+0x64>
    // checksum verification
    uint32_t checksum = 0;
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < 19; i++) {
 8003516:	2300      	movs	r3, #0
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	e00a      	b.n	8003532 <HAL_UART_RxCpltCallback+0x32>
      checksum += rtc[i];
 800351c:	4a14      	ldr	r2, [pc, #80]	@ (8003570 <HAL_UART_RxCpltCallback+0x70>)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4413      	add	r3, r2
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4413      	add	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 19; i++) {
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	3301      	adds	r3, #1
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b12      	cmp	r3, #18
 8003536:	ddf1      	ble.n	800351c <HAL_UART_RxCpltCallback+0x1c>
    }

    checksum &= 0xff;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	60fb      	str	r3, [r7, #12]

    if (rtc[19] == (uint8_t)checksum) {
 800353e:	4b0c      	ldr	r3, [pc, #48]	@ (8003570 <HAL_UART_RxCpltCallback+0x70>)
 8003540:	7cda      	ldrb	r2, [r3, #19]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	429a      	cmp	r2, r3
 8003548:	d10c      	bne.n	8003564 <HAL_UART_RxCpltCallback+0x64>
      // transmit ACK; tx complete interrupt will be ignored
      HAL_UART_Transmit_IT(UART_DEBUG, (uint8_t *)"ACK", 3);
 800354a:	2203      	movs	r2, #3
 800354c:	4909      	ldr	r1, [pc, #36]	@ (8003574 <HAL_UART_RxCpltCallback+0x74>)
 800354e:	480a      	ldr	r0, [pc, #40]	@ (8003578 <HAL_UART_RxCpltCallback+0x78>)
 8003550:	f007 fdc9 	bl	800b0e6 <HAL_UART_Transmit_IT>

      RTC_FIX(RTC_UART);
 8003554:	2000      	movs	r0, #0
 8003556:	f7ff f875 	bl	8002644 <RTC_FIX>

      // re-enable RTC fix message
      HAL_UART_Receive_IT(UART_DEBUG, rtc, 20);
 800355a:	2214      	movs	r2, #20
 800355c:	4904      	ldr	r1, [pc, #16]	@ (8003570 <HAL_UART_RxCpltCallback+0x70>)
 800355e:	4806      	ldr	r0, [pc, #24]	@ (8003578 <HAL_UART_RxCpltCallback+0x78>)
 8003560:	f007 fdf7 	bl	800b152 <HAL_UART_Receive_IT>
    }
  }
}
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40011000 	.word	0x40011000
 8003570:	200012c8 	.word	0x200012c8
 8003574:	08011194 	.word	0x08011194
 8003578:	20006618 	.word	0x20006618

0800357c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003580:	4b11      	ldr	r3, [pc, #68]	@ (80035c8 <MX_USART1_UART_Init+0x4c>)
 8003582:	4a12      	ldr	r2, [pc, #72]	@ (80035cc <MX_USART1_UART_Init+0x50>)
 8003584:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003586:	4b10      	ldr	r3, [pc, #64]	@ (80035c8 <MX_USART1_UART_Init+0x4c>)
 8003588:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800358c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800358e:	4b0e      	ldr	r3, [pc, #56]	@ (80035c8 <MX_USART1_UART_Init+0x4c>)
 8003590:	2200      	movs	r2, #0
 8003592:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003594:	4b0c      	ldr	r3, [pc, #48]	@ (80035c8 <MX_USART1_UART_Init+0x4c>)
 8003596:	2200      	movs	r2, #0
 8003598:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800359a:	4b0b      	ldr	r3, [pc, #44]	@ (80035c8 <MX_USART1_UART_Init+0x4c>)
 800359c:	2200      	movs	r2, #0
 800359e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80035a0:	4b09      	ldr	r3, [pc, #36]	@ (80035c8 <MX_USART1_UART_Init+0x4c>)
 80035a2:	220c      	movs	r2, #12
 80035a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035a6:	4b08      	ldr	r3, [pc, #32]	@ (80035c8 <MX_USART1_UART_Init+0x4c>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80035ac:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <MX_USART1_UART_Init+0x4c>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80035b2:	4805      	ldr	r0, [pc, #20]	@ (80035c8 <MX_USART1_UART_Init+0x4c>)
 80035b4:	f007 fcbc 	bl	800af30 <HAL_UART_Init>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80035be:	f7fe fee1 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20006618 	.word	0x20006618
 80035cc:	40011000 	.word	0x40011000

080035d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80035d4:	4b11      	ldr	r3, [pc, #68]	@ (800361c <MX_USART2_UART_Init+0x4c>)
 80035d6:	4a12      	ldr	r2, [pc, #72]	@ (8003620 <MX_USART2_UART_Init+0x50>)
 80035d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80035da:	4b10      	ldr	r3, [pc, #64]	@ (800361c <MX_USART2_UART_Init+0x4c>)
 80035dc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80035e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035e2:	4b0e      	ldr	r3, [pc, #56]	@ (800361c <MX_USART2_UART_Init+0x4c>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035e8:	4b0c      	ldr	r3, [pc, #48]	@ (800361c <MX_USART2_UART_Init+0x4c>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035ee:	4b0b      	ldr	r3, [pc, #44]	@ (800361c <MX_USART2_UART_Init+0x4c>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035f4:	4b09      	ldr	r3, [pc, #36]	@ (800361c <MX_USART2_UART_Init+0x4c>)
 80035f6:	220c      	movs	r2, #12
 80035f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035fa:	4b08      	ldr	r3, [pc, #32]	@ (800361c <MX_USART2_UART_Init+0x4c>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003600:	4b06      	ldr	r3, [pc, #24]	@ (800361c <MX_USART2_UART_Init+0x4c>)
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003606:	4805      	ldr	r0, [pc, #20]	@ (800361c <MX_USART2_UART_Init+0x4c>)
 8003608:	f007 fc92 	bl	800af30 <HAL_UART_Init>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003612:	f7fe feb7 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20006660 	.word	0x20006660
 8003620:	40004400 	.word	0x40004400

08003624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08c      	sub	sp, #48	@ 0x30
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800362c:	f107 031c 	add.w	r3, r7, #28
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a51      	ldr	r2, [pc, #324]	@ (8003788 <HAL_UART_MspInit+0x164>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d135      	bne.n	80036b2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	4b50      	ldr	r3, [pc, #320]	@ (800378c <HAL_UART_MspInit+0x168>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364e:	4a4f      	ldr	r2, [pc, #316]	@ (800378c <HAL_UART_MspInit+0x168>)
 8003650:	f043 0310 	orr.w	r3, r3, #16
 8003654:	6453      	str	r3, [r2, #68]	@ 0x44
 8003656:	4b4d      	ldr	r3, [pc, #308]	@ (800378c <HAL_UART_MspInit+0x168>)
 8003658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	4b49      	ldr	r3, [pc, #292]	@ (800378c <HAL_UART_MspInit+0x168>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	4a48      	ldr	r2, [pc, #288]	@ (800378c <HAL_UART_MspInit+0x168>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6313      	str	r3, [r2, #48]	@ 0x30
 8003672:	4b46      	ldr	r3, [pc, #280]	@ (800378c <HAL_UART_MspInit+0x168>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800367e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003684:	2302      	movs	r3, #2
 8003686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	2300      	movs	r3, #0
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368c:	2303      	movs	r3, #3
 800368e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003690:	2307      	movs	r3, #7
 8003692:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003694:	f107 031c 	add.w	r3, r7, #28
 8003698:	4619      	mov	r1, r3
 800369a:	483d      	ldr	r0, [pc, #244]	@ (8003790 <HAL_UART_MspInit+0x16c>)
 800369c:	f002 fb34 	bl	8005d08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80036a0:	2200      	movs	r2, #0
 80036a2:	2100      	movs	r1, #0
 80036a4:	2025      	movs	r0, #37	@ 0x25
 80036a6:	f001 fedc 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036aa:	2025      	movs	r0, #37	@ 0x25
 80036ac:	f001 fef5 	bl	800549a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80036b0:	e066      	b.n	8003780 <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART2)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a37      	ldr	r2, [pc, #220]	@ (8003794 <HAL_UART_MspInit+0x170>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d161      	bne.n	8003780 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	4b32      	ldr	r3, [pc, #200]	@ (800378c <HAL_UART_MspInit+0x168>)
 80036c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c4:	4a31      	ldr	r2, [pc, #196]	@ (800378c <HAL_UART_MspInit+0x168>)
 80036c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80036cc:	4b2f      	ldr	r3, [pc, #188]	@ (800378c <HAL_UART_MspInit+0x168>)
 80036ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036d8:	2300      	movs	r3, #0
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	4b2b      	ldr	r3, [pc, #172]	@ (800378c <HAL_UART_MspInit+0x168>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e0:	4a2a      	ldr	r2, [pc, #168]	@ (800378c <HAL_UART_MspInit+0x168>)
 80036e2:	f043 0308 	orr.w	r3, r3, #8
 80036e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80036e8:	4b28      	ldr	r3, [pc, #160]	@ (800378c <HAL_UART_MspInit+0x168>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80036f4:	2360      	movs	r3, #96	@ 0x60
 80036f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f8:	2302      	movs	r3, #2
 80036fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003700:	2303      	movs	r3, #3
 8003702:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003704:	2307      	movs	r3, #7
 8003706:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003708:	f107 031c 	add.w	r3, r7, #28
 800370c:	4619      	mov	r1, r3
 800370e:	4822      	ldr	r0, [pc, #136]	@ (8003798 <HAL_UART_MspInit+0x174>)
 8003710:	f002 fafa 	bl	8005d08 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003714:	4b21      	ldr	r3, [pc, #132]	@ (800379c <HAL_UART_MspInit+0x178>)
 8003716:	4a22      	ldr	r2, [pc, #136]	@ (80037a0 <HAL_UART_MspInit+0x17c>)
 8003718:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800371a:	4b20      	ldr	r3, [pc, #128]	@ (800379c <HAL_UART_MspInit+0x178>)
 800371c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003720:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003722:	4b1e      	ldr	r3, [pc, #120]	@ (800379c <HAL_UART_MspInit+0x178>)
 8003724:	2200      	movs	r2, #0
 8003726:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003728:	4b1c      	ldr	r3, [pc, #112]	@ (800379c <HAL_UART_MspInit+0x178>)
 800372a:	2200      	movs	r2, #0
 800372c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800372e:	4b1b      	ldr	r3, [pc, #108]	@ (800379c <HAL_UART_MspInit+0x178>)
 8003730:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003734:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003736:	4b19      	ldr	r3, [pc, #100]	@ (800379c <HAL_UART_MspInit+0x178>)
 8003738:	2200      	movs	r2, #0
 800373a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800373c:	4b17      	ldr	r3, [pc, #92]	@ (800379c <HAL_UART_MspInit+0x178>)
 800373e:	2200      	movs	r2, #0
 8003740:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003742:	4b16      	ldr	r3, [pc, #88]	@ (800379c <HAL_UART_MspInit+0x178>)
 8003744:	2200      	movs	r2, #0
 8003746:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003748:	4b14      	ldr	r3, [pc, #80]	@ (800379c <HAL_UART_MspInit+0x178>)
 800374a:	2200      	movs	r2, #0
 800374c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800374e:	4b13      	ldr	r3, [pc, #76]	@ (800379c <HAL_UART_MspInit+0x178>)
 8003750:	2200      	movs	r2, #0
 8003752:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003754:	4811      	ldr	r0, [pc, #68]	@ (800379c <HAL_UART_MspInit+0x178>)
 8003756:	f001 febb 	bl	80054d0 <HAL_DMA_Init>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8003760:	f7fe fe10 	bl	8002384 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a0d      	ldr	r2, [pc, #52]	@ (800379c <HAL_UART_MspInit+0x178>)
 8003768:	63da      	str	r2, [r3, #60]	@ 0x3c
 800376a:	4a0c      	ldr	r2, [pc, #48]	@ (800379c <HAL_UART_MspInit+0x178>)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003770:	2200      	movs	r2, #0
 8003772:	2100      	movs	r1, #0
 8003774:	2026      	movs	r0, #38	@ 0x26
 8003776:	f001 fe74 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800377a:	2026      	movs	r0, #38	@ 0x26
 800377c:	f001 fe8d 	bl	800549a <HAL_NVIC_EnableIRQ>
}
 8003780:	bf00      	nop
 8003782:	3730      	adds	r7, #48	@ 0x30
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40011000 	.word	0x40011000
 800378c:	40023800 	.word	0x40023800
 8003790:	40020000 	.word	0x40020000
 8003794:	40004400 	.word	0x40004400
 8003798:	40020c00 	.word	0x40020c00
 800379c:	200066a8 	.word	0x200066a8
 80037a0:	40026088 	.word	0x40026088

080037a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80037a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80037a8:	f7ff fcc0 	bl	800312c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037ac:	480c      	ldr	r0, [pc, #48]	@ (80037e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037ae:	490d      	ldr	r1, [pc, #52]	@ (80037e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037b0:	4a0d      	ldr	r2, [pc, #52]	@ (80037e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037b4:	e002      	b.n	80037bc <LoopCopyDataInit>

080037b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037ba:	3304      	adds	r3, #4

080037bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037c0:	d3f9      	bcc.n	80037b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037c2:	4a0a      	ldr	r2, [pc, #40]	@ (80037ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037c4:	4c0a      	ldr	r4, [pc, #40]	@ (80037f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80037c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037c8:	e001      	b.n	80037ce <LoopFillZerobss>

080037ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037cc:	3204      	adds	r2, #4

080037ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037d0:	d3fb      	bcc.n	80037ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037d2:	f00c fcdb 	bl	801018c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037d6:	f7fe fae5 	bl	8001da4 <main>
  bx  lr    
 80037da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80037dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037e4:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80037e8:	080117e8 	.word	0x080117e8
  ldr r2, =_sbss
 80037ec:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 80037f0:	20006a9c 	.word	0x20006a9c

080037f4 <DCMI_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037f4:	e7fe      	b.n	80037f4 <DCMI_IRQHandler>
	...

080037f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003838 <HAL_Init+0x40>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a0d      	ldr	r2, [pc, #52]	@ (8003838 <HAL_Init+0x40>)
 8003802:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003808:	4b0b      	ldr	r3, [pc, #44]	@ (8003838 <HAL_Init+0x40>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a0a      	ldr	r2, [pc, #40]	@ (8003838 <HAL_Init+0x40>)
 800380e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003814:	4b08      	ldr	r3, [pc, #32]	@ (8003838 <HAL_Init+0x40>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a07      	ldr	r2, [pc, #28]	@ (8003838 <HAL_Init+0x40>)
 800381a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800381e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003820:	2003      	movs	r0, #3
 8003822:	f001 fe13 	bl	800544c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003826:	2000      	movs	r0, #0
 8003828:	f000 f808 	bl	800383c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800382c:	f7ff fac0 	bl	8002db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40023c00 	.word	0x40023c00

0800383c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003844:	4b12      	ldr	r3, [pc, #72]	@ (8003890 <HAL_InitTick+0x54>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	4b12      	ldr	r3, [pc, #72]	@ (8003894 <HAL_InitTick+0x58>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	4619      	mov	r1, r3
 800384e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003852:	fbb3 f3f1 	udiv	r3, r3, r1
 8003856:	fbb2 f3f3 	udiv	r3, r2, r3
 800385a:	4618      	mov	r0, r3
 800385c:	f001 fe2b 	bl	80054b6 <HAL_SYSTICK_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e00e      	b.n	8003888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b0f      	cmp	r3, #15
 800386e:	d80a      	bhi.n	8003886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003870:	2200      	movs	r2, #0
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	f04f 30ff 	mov.w	r0, #4294967295
 8003878:	f001 fdf3 	bl	8005462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800387c:	4a06      	ldr	r2, [pc, #24]	@ (8003898 <HAL_InitTick+0x5c>)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	e000      	b.n	8003888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
}
 8003888:	4618      	mov	r0, r3
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20000054 	.word	0x20000054
 8003894:	2000005c 	.word	0x2000005c
 8003898:	20000058 	.word	0x20000058

0800389c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038a0:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <HAL_IncTick+0x20>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	4b06      	ldr	r3, [pc, #24]	@ (80038c0 <HAL_IncTick+0x24>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4413      	add	r3, r2
 80038ac:	4a04      	ldr	r2, [pc, #16]	@ (80038c0 <HAL_IncTick+0x24>)
 80038ae:	6013      	str	r3, [r2, #0]
}
 80038b0:	bf00      	nop
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	2000005c 	.word	0x2000005c
 80038c0:	20006708 	.word	0x20006708

080038c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return uwTick;
 80038c8:	4b03      	ldr	r3, [pc, #12]	@ (80038d8 <HAL_GetTick+0x14>)
 80038ca:	681b      	ldr	r3, [r3, #0]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20006708 	.word	0x20006708

080038dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038e4:	f7ff ffee 	bl	80038c4 <HAL_GetTick>
 80038e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d005      	beq.n	8003902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003920 <HAL_Delay+0x44>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003902:	bf00      	nop
 8003904:	f7ff ffde 	bl	80038c4 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	429a      	cmp	r2, r3
 8003912:	d8f7      	bhi.n	8003904 <HAL_Delay+0x28>
  {
  }
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	2000005c 	.word	0x2000005c

08003924 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e033      	b.n	80039a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd fb3a 	bl	8000fbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b00      	cmp	r3, #0
 8003960:	d118      	bne.n	8003994 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003966:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800396a:	f023 0302 	bic.w	r3, r3, #2
 800396e:	f043 0202 	orr.w	r2, r3, #2
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fc68 	bl	800424c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003986:	f023 0303 	bic.w	r3, r3, #3
 800398a:	f043 0201 	orr.w	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	641a      	str	r2, [r3, #64]	@ 0x40
 8003992:	e001      	b.n	8003998 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_ADC_Start_IT+0x1a>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e0bd      	b.n	8003b42 <HAL_ADC_Start_IT+0x196>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d018      	beq.n	8003a0e <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039ec:	4b58      	ldr	r3, [pc, #352]	@ (8003b50 <HAL_ADC_Start_IT+0x1a4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a58      	ldr	r2, [pc, #352]	@ (8003b54 <HAL_ADC_Start_IT+0x1a8>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	0c9a      	lsrs	r2, r3, #18
 80039f8:	4613      	mov	r3, r2
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	4413      	add	r3, r2
 80039fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003a00:	e002      	b.n	8003a08 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f9      	bne.n	8003a02 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	f040 8085 	bne.w	8003b28 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a44:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a48:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a5c:	d106      	bne.n	8003a6c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a62:	f023 0206 	bic.w	r2, r3, #6
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	645a      	str	r2, [r3, #68]	@ 0x44
 8003a6a:	e002      	b.n	8003a72 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a7a:	4b37      	ldr	r3, [pc, #220]	@ (8003b58 <HAL_ADC_Start_IT+0x1ac>)
 8003a7c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003a86:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a96:	f043 0320 	orr.w	r3, r3, #32
 8003a9a:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d12a      	bne.n	8003afe <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a2b      	ldr	r2, [pc, #172]	@ (8003b5c <HAL_ADC_Start_IT+0x1b0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d015      	beq.n	8003ade <HAL_ADC_Start_IT+0x132>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8003b60 <HAL_ADC_Start_IT+0x1b4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d105      	bne.n	8003ac8 <HAL_ADC_Start_IT+0x11c>
 8003abc:	4b26      	ldr	r3, [pc, #152]	@ (8003b58 <HAL_ADC_Start_IT+0x1ac>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a25      	ldr	r2, [pc, #148]	@ (8003b64 <HAL_ADC_Start_IT+0x1b8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d136      	bne.n	8003b40 <HAL_ADC_Start_IT+0x194>
 8003ad2:	4b21      	ldr	r3, [pc, #132]	@ (8003b58 <HAL_ADC_Start_IT+0x1ac>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d130      	bne.n	8003b40 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d129      	bne.n	8003b40 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	e020      	b.n	8003b40 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a16      	ldr	r2, [pc, #88]	@ (8003b5c <HAL_ADC_Start_IT+0x1b0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d11b      	bne.n	8003b40 <HAL_ADC_Start_IT+0x194>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d114      	bne.n	8003b40 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003b24:	609a      	str	r2, [r3, #8]
 8003b26:	e00b      	b.n	8003b40 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2c:	f043 0210 	orr.w	r2, r3, #16
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b38:	f043 0201 	orr.w	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000054 	.word	0x20000054
 8003b54:	431bde83 	.word	0x431bde83
 8003b58:	40012300 	.word	0x40012300
 8003b5c:	40012000 	.word	0x40012000
 8003b60:	40012100 	.word	0x40012100
 8003b64:	40012200 	.word	0x40012200

08003b68 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d049      	beq.n	8003c32 <HAL_ADC_IRQHandler+0xca>
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d046      	beq.n	8003c32 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d105      	bne.n	8003bbc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d12b      	bne.n	8003c22 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d127      	bne.n	8003c22 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d006      	beq.n	8003bee <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d119      	bne.n	8003c22 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0220 	bic.w	r2, r2, #32
 8003bfc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d105      	bne.n	8003c22 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	f043 0201 	orr.w	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fd f8a8 	bl	8000d78 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 0212 	mvn.w	r2, #18
 8003c30:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c40:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d057      	beq.n	8003cf8 <HAL_ADC_IRQHandler+0x190>
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d054      	beq.n	8003cf8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	f003 0310 	and.w	r3, r3, #16
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d105      	bne.n	8003c66 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d139      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d006      	beq.n	8003c90 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d12b      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d124      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d11d      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d119      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cc2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d105      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce0:	f043 0201 	orr.w	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fc2d 	bl	8004548 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f06f 020c 	mvn.w	r2, #12
 8003cf6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d06:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d017      	beq.n	8003d3e <HAL_ADC_IRQHandler+0x1d6>
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d014      	beq.n	8003d3e <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d10d      	bne.n	8003d3e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f955 	bl	8003fde <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0201 	mvn.w	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d4c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d015      	beq.n	8003d80 <HAL_ADC_IRQHandler+0x218>
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d012      	beq.n	8003d80 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5e:	f043 0202 	orr.w	r2, r3, #2
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f06f 0220 	mvn.w	r2, #32
 8003d6e:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f93e 	bl	8003ff2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f06f 0220 	mvn.w	r2, #32
 8003d7e:	601a      	str	r2, [r3, #0]
  }
}
 8003d80:	bf00      	nop
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_ADC_Start_DMA+0x22>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e0eb      	b.n	8003f82 <HAL_ADC_Start_DMA+0x1fa>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d018      	beq.n	8003df2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003dd0:	4b6e      	ldr	r3, [pc, #440]	@ (8003f8c <HAL_ADC_Start_DMA+0x204>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a6e      	ldr	r2, [pc, #440]	@ (8003f90 <HAL_ADC_Start_DMA+0x208>)
 8003dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dda:	0c9a      	lsrs	r2, r3, #18
 8003ddc:	4613      	mov	r3, r2
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	4413      	add	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003de4:	e002      	b.n	8003dec <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f9      	bne.n	8003de6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e00:	d107      	bne.n	8003e12 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e10:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	f040 80a3 	bne.w	8003f68 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e48:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003e4c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e60:	d106      	bne.n	8003e70 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e66:	f023 0206 	bic.w	r2, r3, #6
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	645a      	str	r2, [r3, #68]	@ 0x44
 8003e6e:	e002      	b.n	8003e76 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e7e:	4b45      	ldr	r3, [pc, #276]	@ (8003f94 <HAL_ADC_Start_DMA+0x20c>)
 8003e80:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e86:	4a44      	ldr	r2, [pc, #272]	@ (8003f98 <HAL_ADC_Start_DMA+0x210>)
 8003e88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8e:	4a43      	ldr	r2, [pc, #268]	@ (8003f9c <HAL_ADC_Start_DMA+0x214>)
 8003e90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e96:	4a42      	ldr	r2, [pc, #264]	@ (8003fa0 <HAL_ADC_Start_DMA+0x218>)
 8003e98:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003ea2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003eb2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ec2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	334c      	adds	r3, #76	@ 0x4c
 8003ece:	4619      	mov	r1, r3
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f001 fbaa 	bl	800562c <HAL_DMA_Start_IT>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d12a      	bne.n	8003f3e <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a2d      	ldr	r2, [pc, #180]	@ (8003fa4 <HAL_ADC_Start_DMA+0x21c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d015      	beq.n	8003f1e <HAL_ADC_Start_DMA+0x196>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa8 <HAL_ADC_Start_DMA+0x220>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d105      	bne.n	8003f08 <HAL_ADC_Start_DMA+0x180>
 8003efc:	4b25      	ldr	r3, [pc, #148]	@ (8003f94 <HAL_ADC_Start_DMA+0x20c>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a27      	ldr	r2, [pc, #156]	@ (8003fac <HAL_ADC_Start_DMA+0x224>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d136      	bne.n	8003f80 <HAL_ADC_Start_DMA+0x1f8>
 8003f12:	4b20      	ldr	r3, [pc, #128]	@ (8003f94 <HAL_ADC_Start_DMA+0x20c>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d130      	bne.n	8003f80 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d129      	bne.n	8003f80 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	e020      	b.n	8003f80 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a18      	ldr	r2, [pc, #96]	@ (8003fa4 <HAL_ADC_Start_DMA+0x21c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d11b      	bne.n	8003f80 <HAL_ADC_Start_DMA+0x1f8>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d114      	bne.n	8003f80 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003f64:	609a      	str	r2, [r3, #8]
 8003f66:	e00b      	b.n	8003f80 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6c:	f043 0210 	orr.w	r2, r3, #16
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f78:	f043 0201 	orr.w	r2, r3, #1
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003f80:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000054 	.word	0x20000054
 8003f90:	431bde83 	.word	0x431bde83
 8003f94:	40012300 	.word	0x40012300
 8003f98:	08004445 	.word	0x08004445
 8003f9c:	080044ff 	.word	0x080044ff
 8003fa0:	0800451b 	.word	0x0800451b
 8003fa4:	40012000 	.word	0x40012000
 8003fa8:	40012100 	.word	0x40012100
 8003fac:	40012200 	.word	0x40012200

08003fb0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x1c>
 8004020:	2302      	movs	r3, #2
 8004022:	e105      	b.n	8004230 <HAL_ADC_ConfigChannel+0x228>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b09      	cmp	r3, #9
 8004032:	d925      	bls.n	8004080 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68d9      	ldr	r1, [r3, #12]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	b29b      	uxth	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	4613      	mov	r3, r2
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4413      	add	r3, r2
 8004048:	3b1e      	subs	r3, #30
 800404a:	2207      	movs	r2, #7
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	43da      	mvns	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	400a      	ands	r2, r1
 8004058:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68d9      	ldr	r1, [r3, #12]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	b29b      	uxth	r3, r3
 800406a:	4618      	mov	r0, r3
 800406c:	4603      	mov	r3, r0
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	4403      	add	r3, r0
 8004072:	3b1e      	subs	r3, #30
 8004074:	409a      	lsls	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	60da      	str	r2, [r3, #12]
 800407e:	e022      	b.n	80040c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6919      	ldr	r1, [r3, #16]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	b29b      	uxth	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	4613      	mov	r3, r2
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	4413      	add	r3, r2
 8004094:	2207      	movs	r2, #7
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	43da      	mvns	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	400a      	ands	r2, r1
 80040a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6919      	ldr	r1, [r3, #16]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	4618      	mov	r0, r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4403      	add	r3, r0
 80040bc:	409a      	lsls	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b06      	cmp	r3, #6
 80040cc:	d824      	bhi.n	8004118 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	3b05      	subs	r3, #5
 80040e0:	221f      	movs	r2, #31
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43da      	mvns	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	400a      	ands	r2, r1
 80040ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	4618      	mov	r0, r3
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	3b05      	subs	r3, #5
 800410a:	fa00 f203 	lsl.w	r2, r0, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	635a      	str	r2, [r3, #52]	@ 0x34
 8004116:	e04c      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b0c      	cmp	r3, #12
 800411e:	d824      	bhi.n	800416a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	3b23      	subs	r3, #35	@ 0x23
 8004132:	221f      	movs	r2, #31
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43da      	mvns	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	400a      	ands	r2, r1
 8004140:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	b29b      	uxth	r3, r3
 800414e:	4618      	mov	r0, r3
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	3b23      	subs	r3, #35	@ 0x23
 800415c:	fa00 f203 	lsl.w	r2, r0, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	631a      	str	r2, [r3, #48]	@ 0x30
 8004168:	e023      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	3b41      	subs	r3, #65	@ 0x41
 800417c:	221f      	movs	r2, #31
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43da      	mvns	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	400a      	ands	r2, r1
 800418a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	b29b      	uxth	r3, r3
 8004198:	4618      	mov	r0, r3
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	3b41      	subs	r3, #65	@ 0x41
 80041a6:	fa00 f203 	lsl.w	r2, r0, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041b2:	4b22      	ldr	r3, [pc, #136]	@ (800423c <HAL_ADC_ConfigChannel+0x234>)
 80041b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a21      	ldr	r2, [pc, #132]	@ (8004240 <HAL_ADC_ConfigChannel+0x238>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d109      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x1cc>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b12      	cmp	r3, #18
 80041c6:	d105      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a19      	ldr	r2, [pc, #100]	@ (8004240 <HAL_ADC_ConfigChannel+0x238>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d123      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x21e>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b10      	cmp	r3, #16
 80041e4:	d003      	beq.n	80041ee <HAL_ADC_ConfigChannel+0x1e6>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b11      	cmp	r3, #17
 80041ec:	d11b      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b10      	cmp	r3, #16
 8004200:	d111      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004202:	4b10      	ldr	r3, [pc, #64]	@ (8004244 <HAL_ADC_ConfigChannel+0x23c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a10      	ldr	r2, [pc, #64]	@ (8004248 <HAL_ADC_ConfigChannel+0x240>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	0c9a      	lsrs	r2, r3, #18
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004218:	e002      	b.n	8004220 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	3b01      	subs	r3, #1
 800421e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f9      	bne.n	800421a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	40012300 	.word	0x40012300
 8004240:	40012000 	.word	0x40012000
 8004244:	20000054 	.word	0x20000054
 8004248:	431bde83 	.word	0x431bde83

0800424c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004254:	4b79      	ldr	r3, [pc, #484]	@ (800443c <ADC_Init+0x1f0>)
 8004256:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	431a      	orrs	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004280:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6859      	ldr	r1, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	021a      	lsls	r2, r3, #8
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80042a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6899      	ldr	r1, [r3, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042de:	4a58      	ldr	r2, [pc, #352]	@ (8004440 <ADC_Init+0x1f4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d022      	beq.n	800432a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80042f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6899      	ldr	r1, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004314:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6899      	ldr	r1, [r3, #8]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	609a      	str	r2, [r3, #8]
 8004328:	e00f      	b.n	800434a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004338:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004348:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0202 	bic.w	r2, r2, #2
 8004358:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6899      	ldr	r1, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	7e1b      	ldrb	r3, [r3, #24]
 8004364:	005a      	lsls	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01b      	beq.n	80043b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004386:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004396:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6859      	ldr	r1, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	3b01      	subs	r3, #1
 80043a4:	035a      	lsls	r2, r3, #13
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	e007      	b.n	80043c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043be:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80043ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	3b01      	subs	r3, #1
 80043dc:	051a      	lsls	r2, r3, #20
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80043f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6899      	ldr	r1, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004402:	025a      	lsls	r2, r3, #9
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800441a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6899      	ldr	r1, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	029a      	lsls	r2, r3, #10
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	40012300 	.word	0x40012300
 8004440:	0f000001 	.word	0x0f000001

08004444 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004450:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800445a:	2b00      	cmp	r3, #0
 800445c:	d13c      	bne.n	80044d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d12b      	bne.n	80044d0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800447c:	2b00      	cmp	r3, #0
 800447e:	d127      	bne.n	80044d0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004486:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800448a:	2b00      	cmp	r3, #0
 800448c:	d006      	beq.n	800449c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004498:	2b00      	cmp	r3, #0
 800449a:	d119      	bne.n	80044d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0220 	bic.w	r2, r2, #32
 80044aa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d105      	bne.n	80044d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	f043 0201 	orr.w	r2, r3, #1
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f7fc fc51 	bl	8000d78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80044d6:	e00e      	b.n	80044f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff fd84 	bl	8003ff2 <HAL_ADC_ErrorCallback>
}
 80044ea:	e004      	b.n	80044f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	4798      	blx	r3
}
 80044f6:	bf00      	nop
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f7ff fd5c 	bl	8003fca <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004526:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2240      	movs	r2, #64	@ 0x40
 800452c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004532:	f043 0204 	orr.w	r2, r3, #4
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f7ff fd59 	bl	8003ff2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004540:	bf00      	nop
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e0ed      	b.n	800474a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d102      	bne.n	8004580 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fc ffba 	bl	80014f4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004590:	f7ff f998 	bl	80038c4 <HAL_GetTick>
 8004594:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004596:	e012      	b.n	80045be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004598:	f7ff f994 	bl	80038c4 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b0a      	cmp	r3, #10
 80045a4:	d90b      	bls.n	80045be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2205      	movs	r2, #5
 80045b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e0c5      	b.n	800474a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0e5      	beq.n	8004598 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0202 	bic.w	r2, r2, #2
 80045da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045dc:	f7ff f972 	bl	80038c4 <HAL_GetTick>
 80045e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80045e2:	e012      	b.n	800460a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80045e4:	f7ff f96e 	bl	80038c4 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b0a      	cmp	r3, #10
 80045f0:	d90b      	bls.n	800460a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2205      	movs	r2, #5
 8004602:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e09f      	b.n	800474a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e5      	bne.n	80045e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	7e1b      	ldrb	r3, [r3, #24]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d108      	bne.n	8004632 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	e007      	b.n	8004642 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004640:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	7e5b      	ldrb	r3, [r3, #25]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d108      	bne.n	800465c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	e007      	b.n	800466c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800466a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	7e9b      	ldrb	r3, [r3, #26]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d108      	bne.n	8004686 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0220 	orr.w	r2, r2, #32
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	e007      	b.n	8004696 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0220 	bic.w	r2, r2, #32
 8004694:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	7edb      	ldrb	r3, [r3, #27]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d108      	bne.n	80046b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0210 	bic.w	r2, r2, #16
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	e007      	b.n	80046c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0210 	orr.w	r2, r2, #16
 80046be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	7f1b      	ldrb	r3, [r3, #28]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d108      	bne.n	80046da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0208 	orr.w	r2, r2, #8
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	e007      	b.n	80046ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0208 	bic.w	r2, r2, #8
 80046e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	7f5b      	ldrb	r3, [r3, #29]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d108      	bne.n	8004704 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0204 	orr.w	r2, r2, #4
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	e007      	b.n	8004714 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0204 	bic.w	r2, r2, #4
 8004712:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	ea42 0103 	orr.w	r1, r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	1e5a      	subs	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004764:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8004766:	7dfb      	ldrb	r3, [r7, #23]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d003      	beq.n	8004774 <HAL_CAN_ConfigFilter+0x20>
 800476c:	7dfb      	ldrb	r3, [r7, #23]
 800476e:	2b02      	cmp	r3, #2
 8004770:	f040 80be 	bne.w	80048f0 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004774:	4b65      	ldr	r3, [pc, #404]	@ (800490c <HAL_CAN_ConfigFilter+0x1b8>)
 8004776:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800477e:	f043 0201 	orr.w	r2, r3, #1
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800478e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	431a      	orrs	r2, r3
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	2201      	movs	r2, #1
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	43db      	mvns	r3, r3
 80047c6:	401a      	ands	r2, r3
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d123      	bne.n	800481e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	43db      	mvns	r3, r3
 80047e0:	401a      	ands	r2, r3
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80047f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	3248      	adds	r2, #72	@ 0x48
 80047fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004812:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004814:	6939      	ldr	r1, [r7, #16]
 8004816:	3348      	adds	r3, #72	@ 0x48
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	440b      	add	r3, r1
 800481c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d122      	bne.n	800486c <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	431a      	orrs	r2, r3
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004846:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	3248      	adds	r2, #72	@ 0x48
 800484c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004860:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004862:	6939      	ldr	r1, [r7, #16]
 8004864:	3348      	adds	r3, #72	@ 0x48
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	440b      	add	r3, r1
 800486a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d109      	bne.n	8004888 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	43db      	mvns	r3, r3
 800487e:	401a      	ands	r2, r3
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004886:	e007      	b.n	8004898 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	431a      	orrs	r2, r3
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d109      	bne.n	80048b4 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	401a      	ands	r2, r3
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80048b2:	e007      	b.n	80048c4 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	431a      	orrs	r2, r3
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d107      	bne.n	80048dc <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	431a      	orrs	r2, r3
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80048e2:	f023 0201 	bic.w	r2, r3, #1
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	e006      	b.n	80048fe <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
  }
}
 80048fe:	4618      	mov	r0, r3
 8004900:	371c      	adds	r7, #28
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40006400 	.word	0x40006400

08004910 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	d12e      	bne.n	8004982 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0201 	bic.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800493c:	f7fe ffc2 	bl	80038c4 <HAL_GetTick>
 8004940:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004942:	e012      	b.n	800496a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004944:	f7fe ffbe 	bl	80038c4 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b0a      	cmp	r3, #10
 8004950:	d90b      	bls.n	800496a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004956:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2205      	movs	r2, #5
 8004962:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e012      	b.n	8004990 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e5      	bne.n	8004944 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	e006      	b.n	8004990 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004986:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
  }
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004998:	b480      	push	{r7}
 800499a:	b089      	sub	sp, #36	@ 0x24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049ac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80049b6:	7ffb      	ldrb	r3, [r7, #31]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d003      	beq.n	80049c4 <HAL_CAN_AddTxMessage+0x2c>
 80049bc:	7ffb      	ldrb	r3, [r7, #31]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	f040 80ad 	bne.w	8004b1e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d105      	bne.n	80049e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 8095 	beq.w	8004b0e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	0e1b      	lsrs	r3, r3, #24
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80049ee:	2201      	movs	r2, #1
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	409a      	lsls	r2, r3
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10d      	bne.n	8004a1c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004a0a:	68f9      	ldr	r1, [r7, #12]
 8004a0c:	6809      	ldr	r1, [r1, #0]
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	3318      	adds	r3, #24
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	440b      	add	r3, r1
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e00f      	b.n	8004a3c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a26:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a2c:	68f9      	ldr	r1, [r7, #12]
 8004a2e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004a30:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	3318      	adds	r3, #24
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	440b      	add	r3, r1
 8004a3a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6819      	ldr	r1, [r3, #0]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	3318      	adds	r3, #24
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	440b      	add	r3, r1
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	7d1b      	ldrb	r3, [r3, #20]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d111      	bne.n	8004a7c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	3318      	adds	r3, #24
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	4413      	add	r3, r2
 8004a64:	3304      	adds	r3, #4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	6811      	ldr	r1, [r2, #0]
 8004a6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	3318      	adds	r3, #24
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	440b      	add	r3, r1
 8004a78:	3304      	adds	r3, #4
 8004a7a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3307      	adds	r3, #7
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	061a      	lsls	r2, r3, #24
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3306      	adds	r3, #6
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	041b      	lsls	r3, r3, #16
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3305      	adds	r3, #5
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	4313      	orrs	r3, r2
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	3204      	adds	r2, #4
 8004a9c:	7812      	ldrb	r2, [r2, #0]
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	6811      	ldr	r1, [r2, #0]
 8004aa4:	ea43 0200 	orr.w	r2, r3, r0
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	440b      	add	r3, r1
 8004aae:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004ab2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3303      	adds	r3, #3
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	061a      	lsls	r2, r3, #24
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3302      	adds	r3, #2
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	7812      	ldrb	r2, [r2, #0]
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	6811      	ldr	r1, [r2, #0]
 8004ada:	ea43 0200 	orr.w	r2, r3, r0
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	440b      	add	r3, r1
 8004ae4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004ae8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	3318      	adds	r3, #24
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	4413      	add	r3, r2
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	6811      	ldr	r1, [r2, #0]
 8004afc:	f043 0201 	orr.w	r2, r3, #1
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	3318      	adds	r3, #24
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	440b      	add	r3, r1
 8004b08:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e00e      	b.n	8004b2c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b12:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e006      	b.n	8004b2c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b22:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
  }
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3724      	adds	r7, #36	@ 0x24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b4c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b4e:	7dfb      	ldrb	r3, [r7, #23]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d003      	beq.n	8004b5c <HAL_CAN_GetRxMessage+0x24>
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	f040 8103 	bne.w	8004d62 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10e      	bne.n	8004b80 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0303 	and.w	r3, r3, #3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d116      	bne.n	8004b9e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b74:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e0f7      	b.n	8004d70 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d107      	bne.n	8004b9e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b92:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e0e8      	b.n	8004d70 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	331b      	adds	r3, #27
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	4413      	add	r3, r2
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0204 	and.w	r2, r3, #4
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10c      	bne.n	8004bd6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	331b      	adds	r3, #27
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	4413      	add	r3, r2
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	0d5b      	lsrs	r3, r3, #21
 8004bcc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e00b      	b.n	8004bee <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	331b      	adds	r3, #27
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	4413      	add	r3, r2
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	08db      	lsrs	r3, r3, #3
 8004be6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	331b      	adds	r3, #27
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	4413      	add	r3, r2
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0202 	and.w	r2, r3, #2
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	331b      	adds	r3, #27
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	4413      	add	r3, r2
 8004c10:	3304      	adds	r3, #4
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2208      	movs	r2, #8
 8004c20:	611a      	str	r2, [r3, #16]
 8004c22:	e00b      	b.n	8004c3c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	331b      	adds	r3, #27
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	4413      	add	r3, r2
 8004c30:	3304      	adds	r3, #4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 020f 	and.w	r2, r3, #15
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	331b      	adds	r3, #27
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	4413      	add	r3, r2
 8004c48:	3304      	adds	r3, #4
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	0a1b      	lsrs	r3, r3, #8
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	331b      	adds	r3, #27
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	4413      	add	r3, r2
 8004c60:	3304      	adds	r3, #4
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	0c1b      	lsrs	r3, r3, #16
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	0a1a      	lsrs	r2, r3, #8
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	3301      	adds	r3, #1
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	0c1a      	lsrs	r2, r3, #16
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	3302      	adds	r3, #2
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	0e1a      	lsrs	r2, r3, #24
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	3303      	adds	r3, #3
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	0a1a      	lsrs	r2, r3, #8
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	3305      	adds	r3, #5
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	0c1a      	lsrs	r2, r3, #16
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	3306      	adds	r3, #6
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	0e1a      	lsrs	r2, r3, #24
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	3307      	adds	r3, #7
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d108      	bne.n	8004d4e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0220 	orr.w	r2, r2, #32
 8004d4a:	60da      	str	r2, [r3, #12]
 8004d4c:	e007      	b.n	8004d5e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0220 	orr.w	r2, r2, #32
 8004d5c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e006      	b.n	8004d70 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d66:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
  }
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d8c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d002      	beq.n	8004d9a <HAL_CAN_ActivateNotification+0x1e>
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d109      	bne.n	8004dae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6959      	ldr	r1, [r3, #20]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e006      	b.n	8004dbc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
  }
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08a      	sub	sp, #40	@ 0x28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d07c      	beq.n	8004f08 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d023      	beq.n	8004e60 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f983 	bl	8005136 <HAL_CAN_TxMailbox0CompleteCallback>
 8004e30:	e016      	b.n	8004e60 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d004      	beq.n	8004e46 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e44:	e00c      	b.n	8004e60 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	f003 0308 	and.w	r3, r3, #8
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e52:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e58:	e002      	b.n	8004e60 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f989 	bl	8005172 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d024      	beq.n	8004eb4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f963 	bl	800514a <HAL_CAN_TxMailbox1CompleteCallback>
 8004e84:	e016      	b.n	8004eb4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d004      	beq.n	8004e9a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e92:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e98:	e00c      	b.n	8004eb4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d004      	beq.n	8004eae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eac:	e002      	b.n	8004eb4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f969 	bl	8005186 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d024      	beq.n	8004f08 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004ec6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f943 	bl	800515e <HAL_CAN_TxMailbox2CompleteCallback>
 8004ed8:	e016      	b.n	8004f08 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d004      	beq.n	8004eee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eec:	e00c      	b.n	8004f08 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d004      	beq.n	8004f02 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f00:	e002      	b.n	8004f08 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f949 	bl	800519a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00c      	beq.n	8004f2c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f003 0310 	and.w	r3, r3, #16
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f22:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2210      	movs	r2, #16
 8004f2a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00b      	beq.n	8004f4e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d006      	beq.n	8004f4e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2208      	movs	r2, #8
 8004f46:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7fc f939 	bl	80011c0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d009      	beq.n	8004f6c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fc f8ae 	bl	80010c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00c      	beq.n	8004f90 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f86:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2210      	movs	r2, #16
 8004f8e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00b      	beq.n	8004fb2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f003 0308 	and.w	r3, r3, #8
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d006      	beq.n	8004fb2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2208      	movs	r2, #8
 8004faa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f908 	bl	80051c2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d009      	beq.n	8004fd0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f8ef 	bl	80051ae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00b      	beq.n	8004ff2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	f003 0310 	and.w	r3, r3, #16
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d006      	beq.n	8004ff2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2210      	movs	r2, #16
 8004fea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f8f2 	bl	80051d6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00b      	beq.n	8005014 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	2b00      	cmp	r3, #0
 8005004:	d006      	beq.n	8005014 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2208      	movs	r2, #8
 800500c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8eb 	bl	80051ea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d07b      	beq.n	8005116 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d072      	beq.n	800510e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d008      	beq.n	8005044 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800504a:	2b00      	cmp	r3, #0
 800504c:	d008      	beq.n	8005060 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	f043 0302 	orr.w	r3, r3, #2
 800505e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005066:	2b00      	cmp	r3, #0
 8005068:	d008      	beq.n	800507c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005076:	f043 0304 	orr.w	r3, r3, #4
 800507a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005082:	2b00      	cmp	r3, #0
 8005084:	d043      	beq.n	800510e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800508c:	2b00      	cmp	r3, #0
 800508e:	d03e      	beq.n	800510e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005096:	2b60      	cmp	r3, #96	@ 0x60
 8005098:	d02b      	beq.n	80050f2 <HAL_CAN_IRQHandler+0x32a>
 800509a:	2b60      	cmp	r3, #96	@ 0x60
 800509c:	d82e      	bhi.n	80050fc <HAL_CAN_IRQHandler+0x334>
 800509e:	2b50      	cmp	r3, #80	@ 0x50
 80050a0:	d022      	beq.n	80050e8 <HAL_CAN_IRQHandler+0x320>
 80050a2:	2b50      	cmp	r3, #80	@ 0x50
 80050a4:	d82a      	bhi.n	80050fc <HAL_CAN_IRQHandler+0x334>
 80050a6:	2b40      	cmp	r3, #64	@ 0x40
 80050a8:	d019      	beq.n	80050de <HAL_CAN_IRQHandler+0x316>
 80050aa:	2b40      	cmp	r3, #64	@ 0x40
 80050ac:	d826      	bhi.n	80050fc <HAL_CAN_IRQHandler+0x334>
 80050ae:	2b30      	cmp	r3, #48	@ 0x30
 80050b0:	d010      	beq.n	80050d4 <HAL_CAN_IRQHandler+0x30c>
 80050b2:	2b30      	cmp	r3, #48	@ 0x30
 80050b4:	d822      	bhi.n	80050fc <HAL_CAN_IRQHandler+0x334>
 80050b6:	2b10      	cmp	r3, #16
 80050b8:	d002      	beq.n	80050c0 <HAL_CAN_IRQHandler+0x2f8>
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	d005      	beq.n	80050ca <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80050be:	e01d      	b.n	80050fc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	f043 0308 	orr.w	r3, r3, #8
 80050c6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80050c8:	e019      	b.n	80050fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80050ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050cc:	f043 0310 	orr.w	r3, r3, #16
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80050d2:	e014      	b.n	80050fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80050d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d6:	f043 0320 	orr.w	r3, r3, #32
 80050da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80050dc:	e00f      	b.n	80050fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80050de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80050e6:	e00a      	b.n	80050fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80050f0:	e005      	b.n	80050fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80050fa:	e000      	b.n	80050fe <HAL_CAN_IRQHandler+0x336>
            break;
 80050fc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	699a      	ldr	r2, [r3, #24]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800510c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2204      	movs	r2, #4
 8005114:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005118:	2b00      	cmp	r3, #0
 800511a:	d008      	beq.n	800512e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7fc f821 	bl	8001170 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800512e:	bf00      	nop
 8005130:	3728      	adds	r7, #40	@ 0x28
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <HAL_CAN_GetState>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(const CAN_HandleTypeDef *hcan)
{
 80051fe:	b480      	push	{r7}
 8005200:	b085      	sub	sp, #20
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800520c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_CAN_STATE_READY) ||
 800520e:	7bfb      	ldrb	r3, [r7, #15]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d002      	beq.n	800521a <HAL_CAN_GetState+0x1c>
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d112      	bne.n	8005240 <HAL_CAN_GetState+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check sleep mode acknowledge flag */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <HAL_CAN_GetState+0x30>
    {
      /* Sleep mode is active */
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 8005228:	2304      	movs	r3, #4
 800522a:	73fb      	strb	r3, [r7, #15]
 800522c:	e008      	b.n	8005240 <HAL_CAN_GetState+0x42>
    }
    /* Check sleep mode request flag */
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_CAN_GetState+0x42>
    {
      /* Sleep mode request is pending */
      state = HAL_CAN_STATE_SLEEP_PENDING;
 800523c:	2303      	movs	r3, #3
 800523e:	73fb      	strb	r3, [r7, #15]
      /* Neither sleep mode request nor sleep mode acknowledge */
    }
  }

  /* Return CAN state */
  return state;
 8005240:	7bfb      	ldrb	r3, [r7, #15]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005278:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 800527a:	7bbb      	ldrb	r3, [r7, #14]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d002      	beq.n	8005286 <HAL_CAN_ResetError+0x20>
 8005280:	7bbb      	ldrb	r3, [r7, #14]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d103      	bne.n	800528e <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	625a      	str	r2, [r3, #36]	@ 0x24
 800528c:	e007      	b.n	800529e <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005292:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	625a      	str	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 800529e:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052bc:	4b0c      	ldr	r3, [pc, #48]	@ (80052f0 <__NVIC_SetPriorityGrouping+0x44>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80052c8:	4013      	ands	r3, r2
 80052ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80052d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052de:	4a04      	ldr	r2, [pc, #16]	@ (80052f0 <__NVIC_SetPriorityGrouping+0x44>)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	60d3      	str	r3, [r2, #12]
}
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	e000ed00 	.word	0xe000ed00

080052f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052f8:	4b04      	ldr	r3, [pc, #16]	@ (800530c <__NVIC_GetPriorityGrouping+0x18>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	0a1b      	lsrs	r3, r3, #8
 80052fe:	f003 0307 	and.w	r3, r3, #7
}
 8005302:	4618      	mov	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	e000ed00 	.word	0xe000ed00

08005310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	4603      	mov	r3, r0
 8005318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800531a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800531e:	2b00      	cmp	r3, #0
 8005320:	db0b      	blt.n	800533a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	f003 021f 	and.w	r2, r3, #31
 8005328:	4907      	ldr	r1, [pc, #28]	@ (8005348 <__NVIC_EnableIRQ+0x38>)
 800532a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	2001      	movs	r0, #1
 8005332:	fa00 f202 	lsl.w	r2, r0, r2
 8005336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	e000e100 	.word	0xe000e100

0800534c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	4603      	mov	r3, r0
 8005354:	6039      	str	r1, [r7, #0]
 8005356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800535c:	2b00      	cmp	r3, #0
 800535e:	db0a      	blt.n	8005376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	b2da      	uxtb	r2, r3
 8005364:	490c      	ldr	r1, [pc, #48]	@ (8005398 <__NVIC_SetPriority+0x4c>)
 8005366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800536a:	0112      	lsls	r2, r2, #4
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	440b      	add	r3, r1
 8005370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005374:	e00a      	b.n	800538c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	b2da      	uxtb	r2, r3
 800537a:	4908      	ldr	r1, [pc, #32]	@ (800539c <__NVIC_SetPriority+0x50>)
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	3b04      	subs	r3, #4
 8005384:	0112      	lsls	r2, r2, #4
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	440b      	add	r3, r1
 800538a:	761a      	strb	r2, [r3, #24]
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	e000e100 	.word	0xe000e100
 800539c:	e000ed00 	.word	0xe000ed00

080053a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b089      	sub	sp, #36	@ 0x24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	f1c3 0307 	rsb	r3, r3, #7
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	bf28      	it	cs
 80053be:	2304      	movcs	r3, #4
 80053c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	3304      	adds	r3, #4
 80053c6:	2b06      	cmp	r3, #6
 80053c8:	d902      	bls.n	80053d0 <NVIC_EncodePriority+0x30>
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	3b03      	subs	r3, #3
 80053ce:	e000      	b.n	80053d2 <NVIC_EncodePriority+0x32>
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053d4:	f04f 32ff 	mov.w	r2, #4294967295
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	43da      	mvns	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	401a      	ands	r2, r3
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053e8:	f04f 31ff 	mov.w	r1, #4294967295
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	fa01 f303 	lsl.w	r3, r1, r3
 80053f2:	43d9      	mvns	r1, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053f8:	4313      	orrs	r3, r2
         );
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3724      	adds	r7, #36	@ 0x24
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
	...

08005408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3b01      	subs	r3, #1
 8005414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005418:	d301      	bcc.n	800541e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800541a:	2301      	movs	r3, #1
 800541c:	e00f      	b.n	800543e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800541e:	4a0a      	ldr	r2, [pc, #40]	@ (8005448 <SysTick_Config+0x40>)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3b01      	subs	r3, #1
 8005424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005426:	210f      	movs	r1, #15
 8005428:	f04f 30ff 	mov.w	r0, #4294967295
 800542c:	f7ff ff8e 	bl	800534c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005430:	4b05      	ldr	r3, [pc, #20]	@ (8005448 <SysTick_Config+0x40>)
 8005432:	2200      	movs	r2, #0
 8005434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005436:	4b04      	ldr	r3, [pc, #16]	@ (8005448 <SysTick_Config+0x40>)
 8005438:	2207      	movs	r2, #7
 800543a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	e000e010 	.word	0xe000e010

0800544c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff ff29 	bl	80052ac <__NVIC_SetPriorityGrouping>
}
 800545a:	bf00      	nop
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005462:	b580      	push	{r7, lr}
 8005464:	b086      	sub	sp, #24
 8005466:	af00      	add	r7, sp, #0
 8005468:	4603      	mov	r3, r0
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	607a      	str	r2, [r7, #4]
 800546e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005474:	f7ff ff3e 	bl	80052f4 <__NVIC_GetPriorityGrouping>
 8005478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	6978      	ldr	r0, [r7, #20]
 8005480:	f7ff ff8e 	bl	80053a0 <NVIC_EncodePriority>
 8005484:	4602      	mov	r2, r0
 8005486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800548a:	4611      	mov	r1, r2
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff ff5d 	bl	800534c <__NVIC_SetPriority>
}
 8005492:	bf00      	nop
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	4603      	mov	r3, r0
 80054a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff ff31 	bl	8005310 <__NVIC_EnableIRQ>
}
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff ffa2 	bl	8005408 <SysTick_Config>
 80054c4:	4603      	mov	r3, r0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80054dc:	f7fe f9f2 	bl	80038c4 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e099      	b.n	8005620 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0201 	bic.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800550c:	e00f      	b.n	800552e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800550e:	f7fe f9d9 	bl	80038c4 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b05      	cmp	r3, #5
 800551a:	d908      	bls.n	800552e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2203      	movs	r2, #3
 8005526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e078      	b.n	8005620 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e8      	bne.n	800550e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4b38      	ldr	r3, [pc, #224]	@ (8005628 <HAL_DMA_Init+0x158>)
 8005548:	4013      	ands	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800555a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005566:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005572:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005584:	2b04      	cmp	r3, #4
 8005586:	d107      	bne.n	8005598 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005590:	4313      	orrs	r3, r2
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f023 0307 	bic.w	r3, r3, #7
 80055ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d117      	bne.n	80055f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00e      	beq.n	80055f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fb1b 	bl	8005c10 <DMA_CheckFifoParam>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d008      	beq.n	80055f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2240      	movs	r2, #64	@ 0x40
 80055e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80055ee:	2301      	movs	r3, #1
 80055f0:	e016      	b.n	8005620 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fad2 	bl	8005ba4 <DMA_CalcBaseAndBitshift>
 8005600:	4603      	mov	r3, r0
 8005602:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005608:	223f      	movs	r2, #63	@ 0x3f
 800560a:	409a      	lsls	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	f010803f 	.word	0xf010803f

0800562c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005642:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_DMA_Start_IT+0x26>
 800564e:	2302      	movs	r3, #2
 8005650:	e040      	b.n	80056d4 <HAL_DMA_Start_IT+0xa8>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b01      	cmp	r3, #1
 8005664:	d12f      	bne.n	80056c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2202      	movs	r2, #2
 800566a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 fa64 	bl	8005b48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005684:	223f      	movs	r2, #63	@ 0x3f
 8005686:	409a      	lsls	r2, r3
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0216 	orr.w	r2, r2, #22
 800569a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d007      	beq.n	80056b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0208 	orr.w	r2, r2, #8
 80056b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	e005      	b.n	80056d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80056ce:	2302      	movs	r3, #2
 80056d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80056ea:	f7fe f8eb 	bl	80038c4 <HAL_GetTick>
 80056ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d008      	beq.n	800570e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2280      	movs	r2, #128	@ 0x80
 8005700:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e052      	b.n	80057b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0216 	bic.w	r2, r2, #22
 800571c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695a      	ldr	r2, [r3, #20]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800572c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005732:	2b00      	cmp	r3, #0
 8005734:	d103      	bne.n	800573e <HAL_DMA_Abort+0x62>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800573a:	2b00      	cmp	r3, #0
 800573c:	d007      	beq.n	800574e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0208 	bic.w	r2, r2, #8
 800574c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0201 	bic.w	r2, r2, #1
 800575c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800575e:	e013      	b.n	8005788 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005760:	f7fe f8b0 	bl	80038c4 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b05      	cmp	r3, #5
 800576c:	d90c      	bls.n	8005788 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2203      	movs	r2, #3
 8005778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e015      	b.n	80057b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e4      	bne.n	8005760 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800579a:	223f      	movs	r2, #63	@ 0x3f
 800579c:	409a      	lsls	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d004      	beq.n	80057da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2280      	movs	r2, #128	@ 0x80
 80057d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e00c      	b.n	80057f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2205      	movs	r2, #5
 80057de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0201 	bic.w	r2, r2, #1
 80057f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800580c:	4b8e      	ldr	r3, [pc, #568]	@ (8005a48 <HAL_DMA_IRQHandler+0x248>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a8e      	ldr	r2, [pc, #568]	@ (8005a4c <HAL_DMA_IRQHandler+0x24c>)
 8005812:	fba2 2303 	umull	r2, r3, r2, r3
 8005816:	0a9b      	lsrs	r3, r3, #10
 8005818:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800581e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800582a:	2208      	movs	r2, #8
 800582c:	409a      	lsls	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4013      	ands	r3, r2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d01a      	beq.n	800586c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d013      	beq.n	800586c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0204 	bic.w	r2, r2, #4
 8005852:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005858:	2208      	movs	r2, #8
 800585a:	409a      	lsls	r2, r3
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005864:	f043 0201 	orr.w	r2, r3, #1
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005870:	2201      	movs	r2, #1
 8005872:	409a      	lsls	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4013      	ands	r3, r2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d012      	beq.n	80058a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00b      	beq.n	80058a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800588e:	2201      	movs	r2, #1
 8005890:	409a      	lsls	r2, r3
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800589a:	f043 0202 	orr.w	r2, r3, #2
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a6:	2204      	movs	r2, #4
 80058a8:	409a      	lsls	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4013      	ands	r3, r2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d012      	beq.n	80058d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00b      	beq.n	80058d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c4:	2204      	movs	r2, #4
 80058c6:	409a      	lsls	r2, r3
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d0:	f043 0204 	orr.w	r2, r3, #4
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058dc:	2210      	movs	r2, #16
 80058de:	409a      	lsls	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4013      	ands	r3, r2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d043      	beq.n	8005970 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d03c      	beq.n	8005970 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058fa:	2210      	movs	r2, #16
 80058fc:	409a      	lsls	r2, r3
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d018      	beq.n	8005942 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d108      	bne.n	8005930 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	d024      	beq.n	8005970 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	4798      	blx	r3
 800592e:	e01f      	b.n	8005970 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01b      	beq.n	8005970 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
 8005940:	e016      	b.n	8005970 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800594c:	2b00      	cmp	r3, #0
 800594e:	d107      	bne.n	8005960 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0208 	bic.w	r2, r2, #8
 800595e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005974:	2220      	movs	r2, #32
 8005976:	409a      	lsls	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 808f 	beq.w	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0310 	and.w	r3, r3, #16
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8087 	beq.w	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005996:	2220      	movs	r2, #32
 8005998:	409a      	lsls	r2, r3
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b05      	cmp	r3, #5
 80059a8:	d136      	bne.n	8005a18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0216 	bic.w	r2, r2, #22
 80059b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695a      	ldr	r2, [r3, #20]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d103      	bne.n	80059da <HAL_DMA_IRQHandler+0x1da>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0208 	bic.w	r2, r2, #8
 80059e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ee:	223f      	movs	r2, #63	@ 0x3f
 80059f0:	409a      	lsls	r2, r3
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d07e      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	4798      	blx	r3
        }
        return;
 8005a16:	e079      	b.n	8005b0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d01d      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10d      	bne.n	8005a50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d031      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	4798      	blx	r3
 8005a44:	e02c      	b.n	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
 8005a46:	bf00      	nop
 8005a48:	20000054 	.word	0x20000054
 8005a4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d023      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	4798      	blx	r3
 8005a60:	e01e      	b.n	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10f      	bne.n	8005a90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0210 	bic.w	r2, r2, #16
 8005a7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d032      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d022      	beq.n	8005afa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2205      	movs	r2, #5
 8005ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0201 	bic.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d307      	bcc.n	8005ae8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f2      	bne.n	8005acc <HAL_DMA_IRQHandler+0x2cc>
 8005ae6:	e000      	b.n	8005aea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005ae8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	4798      	blx	r3
 8005b0a:	e000      	b.n	8005b0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005b0c:	bf00      	nop
    }
  }
}
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b22:	b2db      	uxtb	r3, r3
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	2b40      	cmp	r3, #64	@ 0x40
 8005b74:	d108      	bne.n	8005b88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b86:	e007      	b.n	8005b98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	60da      	str	r2, [r3, #12]
}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	3b10      	subs	r3, #16
 8005bb4:	4a14      	ldr	r2, [pc, #80]	@ (8005c08 <DMA_CalcBaseAndBitshift+0x64>)
 8005bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bba:	091b      	lsrs	r3, r3, #4
 8005bbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005bbe:	4a13      	ldr	r2, [pc, #76]	@ (8005c0c <DMA_CalcBaseAndBitshift+0x68>)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d909      	bls.n	8005be6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005bda:	f023 0303 	bic.w	r3, r3, #3
 8005bde:	1d1a      	adds	r2, r3, #4
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	659a      	str	r2, [r3, #88]	@ 0x58
 8005be4:	e007      	b.n	8005bf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005bee:	f023 0303 	bic.w	r3, r3, #3
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	aaaaaaab 	.word	0xaaaaaaab
 8005c0c:	0801120c 	.word	0x0801120c

08005c10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d11f      	bne.n	8005c6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d856      	bhi.n	8005cde <DMA_CheckFifoParam+0xce>
 8005c30:	a201      	add	r2, pc, #4	@ (adr r2, 8005c38 <DMA_CheckFifoParam+0x28>)
 8005c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c36:	bf00      	nop
 8005c38:	08005c49 	.word	0x08005c49
 8005c3c:	08005c5b 	.word	0x08005c5b
 8005c40:	08005c49 	.word	0x08005c49
 8005c44:	08005cdf 	.word	0x08005cdf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d046      	beq.n	8005ce2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c58:	e043      	b.n	8005ce2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c62:	d140      	bne.n	8005ce6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c68:	e03d      	b.n	8005ce6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c72:	d121      	bne.n	8005cb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d837      	bhi.n	8005cea <DMA_CheckFifoParam+0xda>
 8005c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c80 <DMA_CheckFifoParam+0x70>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005c91 	.word	0x08005c91
 8005c84:	08005c97 	.word	0x08005c97
 8005c88:	08005c91 	.word	0x08005c91
 8005c8c:	08005ca9 	.word	0x08005ca9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
      break;
 8005c94:	e030      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d025      	beq.n	8005cee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ca6:	e022      	b.n	8005cee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005cb0:	d11f      	bne.n	8005cf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005cb6:	e01c      	b.n	8005cf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d903      	bls.n	8005cc6 <DMA_CheckFifoParam+0xb6>
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d003      	beq.n	8005ccc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005cc4:	e018      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8005cca:	e015      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00e      	beq.n	8005cf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	73fb      	strb	r3, [r7, #15]
      break;
 8005cdc:	e00b      	b.n	8005cf6 <DMA_CheckFifoParam+0xe6>
      break;
 8005cde:	bf00      	nop
 8005ce0:	e00a      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ce2:	bf00      	nop
 8005ce4:	e008      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ce6:	bf00      	nop
 8005ce8:	e006      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cea:	bf00      	nop
 8005cec:	e004      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cee:	bf00      	nop
 8005cf0:	e002      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
      break;   
 8005cf2:	bf00      	nop
 8005cf4:	e000      	b.n	8005cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cf6:	bf00      	nop
    }
  } 
  
  return status; 
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop

08005d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b089      	sub	sp, #36	@ 0x24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d1e:	2300      	movs	r3, #0
 8005d20:	61fb      	str	r3, [r7, #28]
 8005d22:	e16b      	b.n	8005ffc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d24:	2201      	movs	r2, #1
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4013      	ands	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	f040 815a 	bne.w	8005ff6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d005      	beq.n	8005d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d130      	bne.n	8005dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	2203      	movs	r2, #3
 8005d66:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6a:	43db      	mvns	r3, r3
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d90:	2201      	movs	r2, #1
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	091b      	lsrs	r3, r3, #4
 8005da6:	f003 0201 	and.w	r2, r3, #1
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	fa02 f303 	lsl.w	r3, r2, r3
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f003 0303 	and.w	r3, r3, #3
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d017      	beq.n	8005df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	2203      	movs	r2, #3
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	005b      	lsls	r3, r3, #1
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f003 0303 	and.w	r3, r3, #3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d123      	bne.n	8005e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	08da      	lsrs	r2, r3, #3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3208      	adds	r2, #8
 8005e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	220f      	movs	r2, #15
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	43db      	mvns	r3, r3
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	4013      	ands	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	fa02 f303 	lsl.w	r3, r2, r3
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	08da      	lsrs	r2, r3, #3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	3208      	adds	r2, #8
 8005e46:	69b9      	ldr	r1, [r7, #24]
 8005e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	2203      	movs	r2, #3
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	43db      	mvns	r3, r3
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	4013      	ands	r3, r2
 8005e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f003 0203 	and.w	r2, r3, #3
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	fa02 f303 	lsl.w	r3, r2, r3
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 80b4 	beq.w	8005ff6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	4b60      	ldr	r3, [pc, #384]	@ (8006014 <HAL_GPIO_Init+0x30c>)
 8005e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e96:	4a5f      	ldr	r2, [pc, #380]	@ (8006014 <HAL_GPIO_Init+0x30c>)
 8005e98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8006014 <HAL_GPIO_Init+0x30c>)
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005eaa:	4a5b      	ldr	r2, [pc, #364]	@ (8006018 <HAL_GPIO_Init+0x310>)
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	089b      	lsrs	r3, r3, #2
 8005eb0:	3302      	adds	r3, #2
 8005eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	220f      	movs	r2, #15
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	43db      	mvns	r3, r3
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a52      	ldr	r2, [pc, #328]	@ (800601c <HAL_GPIO_Init+0x314>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d02b      	beq.n	8005f2e <HAL_GPIO_Init+0x226>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a51      	ldr	r2, [pc, #324]	@ (8006020 <HAL_GPIO_Init+0x318>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d025      	beq.n	8005f2a <HAL_GPIO_Init+0x222>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a50      	ldr	r2, [pc, #320]	@ (8006024 <HAL_GPIO_Init+0x31c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d01f      	beq.n	8005f26 <HAL_GPIO_Init+0x21e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a4f      	ldr	r2, [pc, #316]	@ (8006028 <HAL_GPIO_Init+0x320>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d019      	beq.n	8005f22 <HAL_GPIO_Init+0x21a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a4e      	ldr	r2, [pc, #312]	@ (800602c <HAL_GPIO_Init+0x324>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d013      	beq.n	8005f1e <HAL_GPIO_Init+0x216>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a4d      	ldr	r2, [pc, #308]	@ (8006030 <HAL_GPIO_Init+0x328>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00d      	beq.n	8005f1a <HAL_GPIO_Init+0x212>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a4c      	ldr	r2, [pc, #304]	@ (8006034 <HAL_GPIO_Init+0x32c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d007      	beq.n	8005f16 <HAL_GPIO_Init+0x20e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a4b      	ldr	r2, [pc, #300]	@ (8006038 <HAL_GPIO_Init+0x330>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d101      	bne.n	8005f12 <HAL_GPIO_Init+0x20a>
 8005f0e:	2307      	movs	r3, #7
 8005f10:	e00e      	b.n	8005f30 <HAL_GPIO_Init+0x228>
 8005f12:	2308      	movs	r3, #8
 8005f14:	e00c      	b.n	8005f30 <HAL_GPIO_Init+0x228>
 8005f16:	2306      	movs	r3, #6
 8005f18:	e00a      	b.n	8005f30 <HAL_GPIO_Init+0x228>
 8005f1a:	2305      	movs	r3, #5
 8005f1c:	e008      	b.n	8005f30 <HAL_GPIO_Init+0x228>
 8005f1e:	2304      	movs	r3, #4
 8005f20:	e006      	b.n	8005f30 <HAL_GPIO_Init+0x228>
 8005f22:	2303      	movs	r3, #3
 8005f24:	e004      	b.n	8005f30 <HAL_GPIO_Init+0x228>
 8005f26:	2302      	movs	r3, #2
 8005f28:	e002      	b.n	8005f30 <HAL_GPIO_Init+0x228>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e000      	b.n	8005f30 <HAL_GPIO_Init+0x228>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	69fa      	ldr	r2, [r7, #28]
 8005f32:	f002 0203 	and.w	r2, r2, #3
 8005f36:	0092      	lsls	r2, r2, #2
 8005f38:	4093      	lsls	r3, r2
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f40:	4935      	ldr	r1, [pc, #212]	@ (8006018 <HAL_GPIO_Init+0x310>)
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	089b      	lsrs	r3, r3, #2
 8005f46:	3302      	adds	r3, #2
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800603c <HAL_GPIO_Init+0x334>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	43db      	mvns	r3, r3
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f72:	4a32      	ldr	r2, [pc, #200]	@ (800603c <HAL_GPIO_Init+0x334>)
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f78:	4b30      	ldr	r3, [pc, #192]	@ (800603c <HAL_GPIO_Init+0x334>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	43db      	mvns	r3, r3
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	4013      	ands	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f9c:	4a27      	ldr	r2, [pc, #156]	@ (800603c <HAL_GPIO_Init+0x334>)
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005fa2:	4b26      	ldr	r3, [pc, #152]	@ (800603c <HAL_GPIO_Init+0x334>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	43db      	mvns	r3, r3
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	4013      	ands	r3, r2
 8005fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800603c <HAL_GPIO_Init+0x334>)
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800603c <HAL_GPIO_Init+0x334>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ff0:	4a12      	ldr	r2, [pc, #72]	@ (800603c <HAL_GPIO_Init+0x334>)
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	61fb      	str	r3, [r7, #28]
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	2b0f      	cmp	r3, #15
 8006000:	f67f ae90 	bls.w	8005d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop
 8006008:	3724      	adds	r7, #36	@ 0x24
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	40023800 	.word	0x40023800
 8006018:	40013800 	.word	0x40013800
 800601c:	40020000 	.word	0x40020000
 8006020:	40020400 	.word	0x40020400
 8006024:	40020800 	.word	0x40020800
 8006028:	40020c00 	.word	0x40020c00
 800602c:	40021000 	.word	0x40021000
 8006030:	40021400 	.word	0x40021400
 8006034:	40021800 	.word	0x40021800
 8006038:	40021c00 	.word	0x40021c00
 800603c:	40013c00 	.word	0x40013c00

08006040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	691a      	ldr	r2, [r3, #16]
 8006050:	887b      	ldrh	r3, [r7, #2]
 8006052:	4013      	ands	r3, r2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006058:	2301      	movs	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]
 800605c:	e001      	b.n	8006062 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800605e:	2300      	movs	r3, #0
 8006060:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006062:	7bfb      	ldrb	r3, [r7, #15]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	807b      	strh	r3, [r7, #2]
 800607c:	4613      	mov	r3, r2
 800607e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006080:	787b      	ldrb	r3, [r7, #1]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006086:	887a      	ldrh	r2, [r7, #2]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800608c:	e003      	b.n	8006096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800608e:	887b      	ldrh	r3, [r7, #2]
 8006090:	041a      	lsls	r2, r3, #16
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	619a      	str	r2, [r3, #24]
}
 8006096:	bf00      	nop
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
	...

080060a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e12b      	b.n	800630e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fb fd3c 	bl	8001b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2224      	movs	r2, #36	@ 0x24
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0201 	bic.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006106:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006108:	f002 fb2c 	bl	8008764 <HAL_RCC_GetPCLK1Freq>
 800610c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	4a81      	ldr	r2, [pc, #516]	@ (8006318 <HAL_I2C_Init+0x274>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d807      	bhi.n	8006128 <HAL_I2C_Init+0x84>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4a80      	ldr	r2, [pc, #512]	@ (800631c <HAL_I2C_Init+0x278>)
 800611c:	4293      	cmp	r3, r2
 800611e:	bf94      	ite	ls
 8006120:	2301      	movls	r3, #1
 8006122:	2300      	movhi	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	e006      	b.n	8006136 <HAL_I2C_Init+0x92>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4a7d      	ldr	r2, [pc, #500]	@ (8006320 <HAL_I2C_Init+0x27c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	bf94      	ite	ls
 8006130:	2301      	movls	r3, #1
 8006132:	2300      	movhi	r3, #0
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e0e7      	b.n	800630e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4a78      	ldr	r2, [pc, #480]	@ (8006324 <HAL_I2C_Init+0x280>)
 8006142:	fba2 2303 	umull	r2, r3, r2, r3
 8006146:	0c9b      	lsrs	r3, r3, #18
 8006148:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	4a6a      	ldr	r2, [pc, #424]	@ (8006318 <HAL_I2C_Init+0x274>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d802      	bhi.n	8006178 <HAL_I2C_Init+0xd4>
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	3301      	adds	r3, #1
 8006176:	e009      	b.n	800618c <HAL_I2C_Init+0xe8>
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800617e:	fb02 f303 	mul.w	r3, r2, r3
 8006182:	4a69      	ldr	r2, [pc, #420]	@ (8006328 <HAL_I2C_Init+0x284>)
 8006184:	fba2 2303 	umull	r2, r3, r2, r3
 8006188:	099b      	lsrs	r3, r3, #6
 800618a:	3301      	adds	r3, #1
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6812      	ldr	r2, [r2, #0]
 8006190:	430b      	orrs	r3, r1
 8006192:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800619e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	495c      	ldr	r1, [pc, #368]	@ (8006318 <HAL_I2C_Init+0x274>)
 80061a8:	428b      	cmp	r3, r1
 80061aa:	d819      	bhi.n	80061e0 <HAL_I2C_Init+0x13c>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	1e59      	subs	r1, r3, #1
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80061ba:	1c59      	adds	r1, r3, #1
 80061bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80061c0:	400b      	ands	r3, r1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <HAL_I2C_Init+0x138>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	1e59      	subs	r1, r3, #1
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80061d4:	3301      	adds	r3, #1
 80061d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061da:	e051      	b.n	8006280 <HAL_I2C_Init+0x1dc>
 80061dc:	2304      	movs	r3, #4
 80061de:	e04f      	b.n	8006280 <HAL_I2C_Init+0x1dc>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d111      	bne.n	800620c <HAL_I2C_Init+0x168>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	1e58      	subs	r0, r3, #1
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6859      	ldr	r1, [r3, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	440b      	add	r3, r1
 80061f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80061fa:	3301      	adds	r3, #1
 80061fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006200:	2b00      	cmp	r3, #0
 8006202:	bf0c      	ite	eq
 8006204:	2301      	moveq	r3, #1
 8006206:	2300      	movne	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	e012      	b.n	8006232 <HAL_I2C_Init+0x18e>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	1e58      	subs	r0, r3, #1
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6859      	ldr	r1, [r3, #4]
 8006214:	460b      	mov	r3, r1
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	0099      	lsls	r1, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006222:	3301      	adds	r3, #1
 8006224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006228:	2b00      	cmp	r3, #0
 800622a:	bf0c      	ite	eq
 800622c:	2301      	moveq	r3, #1
 800622e:	2300      	movne	r3, #0
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <HAL_I2C_Init+0x196>
 8006236:	2301      	movs	r3, #1
 8006238:	e022      	b.n	8006280 <HAL_I2C_Init+0x1dc>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10e      	bne.n	8006260 <HAL_I2C_Init+0x1bc>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	1e58      	subs	r0, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6859      	ldr	r1, [r3, #4]
 800624a:	460b      	mov	r3, r1
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	440b      	add	r3, r1
 8006250:	fbb0 f3f3 	udiv	r3, r0, r3
 8006254:	3301      	adds	r3, #1
 8006256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800625a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800625e:	e00f      	b.n	8006280 <HAL_I2C_Init+0x1dc>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	1e58      	subs	r0, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6859      	ldr	r1, [r3, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	440b      	add	r3, r1
 800626e:	0099      	lsls	r1, r3, #2
 8006270:	440b      	add	r3, r1
 8006272:	fbb0 f3f3 	udiv	r3, r0, r3
 8006276:	3301      	adds	r3, #1
 8006278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800627c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	6809      	ldr	r1, [r1, #0]
 8006284:	4313      	orrs	r3, r2
 8006286:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69da      	ldr	r2, [r3, #28]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80062ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6911      	ldr	r1, [r2, #16]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	68d2      	ldr	r2, [r2, #12]
 80062ba:	4311      	orrs	r1, r2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	6812      	ldr	r2, [r2, #0]
 80062c0:	430b      	orrs	r3, r1
 80062c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695a      	ldr	r2, [r3, #20]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	000186a0 	.word	0x000186a0
 800631c:	001e847f 	.word	0x001e847f
 8006320:	003d08ff 	.word	0x003d08ff
 8006324:	431bde83 	.word	0x431bde83
 8006328:	10624dd3 	.word	0x10624dd3

0800632c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800633e:	2b80      	cmp	r3, #128	@ 0x80
 8006340:	d103      	bne.n	800634a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2200      	movs	r2, #0
 8006348:	611a      	str	r2, [r3, #16]
  }
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
	...

08006358 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	4608      	mov	r0, r1
 8006362:	4611      	mov	r1, r2
 8006364:	461a      	mov	r2, r3
 8006366:	4603      	mov	r3, r0
 8006368:	817b      	strh	r3, [r7, #10]
 800636a:	460b      	mov	r3, r1
 800636c:	813b      	strh	r3, [r7, #8]
 800636e:	4613      	mov	r3, r2
 8006370:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b20      	cmp	r3, #32
 8006380:	f040 8096 	bne.w	80064b0 <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006384:	4b4e      	ldr	r3, [pc, #312]	@ (80064c0 <HAL_I2C_Mem_Read_IT+0x168>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	08db      	lsrs	r3, r3, #3
 800638a:	4a4e      	ldr	r2, [pc, #312]	@ (80064c4 <HAL_I2C_Mem_Read_IT+0x16c>)
 800638c:	fba2 2303 	umull	r2, r3, r2, r3
 8006390:	0a1a      	lsrs	r2, r3, #8
 8006392:	4613      	mov	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	009a      	lsls	r2, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	3b01      	subs	r3, #1
 80063a2:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d112      	bne.n	80063d0 <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c4:	f043 0220 	orr.w	r2, r3, #32
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80063cc:	2302      	movs	r3, #2
 80063ce:	e070      	b.n	80064b2 <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d0df      	beq.n	800639e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_I2C_Mem_Read_IT+0x94>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e062      	b.n	80064b2 <HAL_I2C_Mem_Read_IT+0x15a>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d007      	beq.n	8006412 <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f042 0201 	orr.w	r2, r2, #1
 8006410:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006420:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2222      	movs	r2, #34	@ 0x22
 8006426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2240      	movs	r2, #64	@ 0x40
 800642e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a3a      	ldr	r2, [r7, #32]
 800643c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006442:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006448:	b29a      	uxth	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4a1d      	ldr	r2, [pc, #116]	@ (80064c8 <HAL_I2C_Mem_Read_IT+0x170>)
 8006452:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8006454:	897a      	ldrh	r2, [r7, #10]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800645a:	893a      	ldrh	r2, [r7, #8]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006460:	88fa      	ldrh	r2, [r7, #6]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800647a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800648a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80064aa:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	e000      	b.n	80064b2 <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 80064b0:	2302      	movs	r3, #2
  }
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	371c      	adds	r7, #28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20000054 	.word	0x20000054
 80064c4:	14f8b589 	.word	0x14f8b589
 80064c8:	ffff0000 	.word	0xffff0000

080064cc <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	4613      	mov	r3, r2
 80064da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80064e8:	2b28      	cmp	r3, #40	@ 0x28
 80064ea:	d15b      	bne.n	80065a4 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 80064f2:	88fb      	ldrh	r3, [r7, #6]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e054      	b.n	80065a6 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006502:	2b01      	cmp	r3, #1
 8006504:	d101      	bne.n	800650a <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8006506:	2302      	movs	r3, #2
 8006508:	e04d      	b.n	80065a6 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b01      	cmp	r3, #1
 800651e:	d007      	beq.n	8006530 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800653e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2229      	movs	r2, #41	@ 0x29
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2220      	movs	r2, #32
 800654c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	88fa      	ldrh	r2, [r7, #6]
 8006560:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006566:	b29a      	uxth	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006572:	2300      	movs	r3, #0
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800659e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e000      	b.n	80065a6 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 80065a4:	2302      	movs	r3, #2
  }
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b087      	sub	sp, #28
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	603b      	str	r3, [r7, #0]
 80065be:	4613      	mov	r3, r2
 80065c0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80065ce:	2b28      	cmp	r3, #40	@ 0x28
 80065d0:	d15b      	bne.n	800668a <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e054      	b.n	800668c <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d101      	bne.n	80065f0 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 80065ec:	2302      	movs	r3, #2
 80065ee:	e04d      	b.n	800668c <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b01      	cmp	r3, #1
 8006604:	d007      	beq.n	8006616 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f042 0201 	orr.w	r2, r2, #1
 8006614:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006624:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	222a      	movs	r2, #42	@ 0x2a
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	88fa      	ldrh	r2, [r7, #6]
 8006646:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006658:	2300      	movs	r3, #0
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	617b      	str	r3, [r7, #20]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8006684:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	e000      	b.n	800668c <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800668a:	2302      	movs	r3, #2
  }
}
 800668c:	4618      	mov	r0, r3
 800668e:	371c      	adds	r7, #28
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b20      	cmp	r3, #32
 80066aa:	d124      	bne.n	80066f6 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2228      	movs	r2, #40	@ 0x28
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d007      	beq.n	80066d2 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f042 0201 	orr.w	r2, r2, #1
 80066d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80066e0:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80066f0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	e000      	b.n	80066f8 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80066f6:	2302      	movs	r3, #2
  }
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800671c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006724:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800672c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	2b10      	cmp	r3, #16
 8006732:	d003      	beq.n	800673c <HAL_I2C_EV_IRQHandler+0x38>
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	2b40      	cmp	r3, #64	@ 0x40
 8006738:	f040 80c1 	bne.w	80068be <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10d      	bne.n	8006772 <HAL_I2C_EV_IRQHandler+0x6e>
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800675c:	d003      	beq.n	8006766 <HAL_I2C_EV_IRQHandler+0x62>
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006764:	d101      	bne.n	800676a <HAL_I2C_EV_IRQHandler+0x66>
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <HAL_I2C_EV_IRQHandler+0x68>
 800676a:	2300      	movs	r3, #0
 800676c:	2b01      	cmp	r3, #1
 800676e:	f000 8132 	beq.w	80069d6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00c      	beq.n	8006796 <HAL_I2C_EV_IRQHandler+0x92>
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	0a5b      	lsrs	r3, r3, #9
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d006      	beq.n	8006796 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 fb53 	bl	8007e34 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fcca 	bl	8007128 <I2C_Master_SB>
 8006794:	e092      	b.n	80068bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	08db      	lsrs	r3, r3, #3
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <HAL_I2C_EV_IRQHandler+0xb2>
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	0a5b      	lsrs	r3, r3, #9
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fd40 	bl	8007234 <I2C_Master_ADD10>
 80067b4:	e082      	b.n	80068bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	085b      	lsrs	r3, r3, #1
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d009      	beq.n	80067d6 <HAL_I2C_EV_IRQHandler+0xd2>
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	0a5b      	lsrs	r3, r3, #9
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fd5a 	bl	8007288 <I2C_Master_ADDR>
 80067d4:	e072      	b.n	80068bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	089b      	lsrs	r3, r3, #2
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d03b      	beq.n	800685a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067f0:	f000 80f3 	beq.w	80069da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	09db      	lsrs	r3, r3, #7
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00f      	beq.n	8006820 <HAL_I2C_EV_IRQHandler+0x11c>
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	0a9b      	lsrs	r3, r3, #10
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	d009      	beq.n	8006820 <HAL_I2C_EV_IRQHandler+0x11c>
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	089b      	lsrs	r3, r3, #2
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d103      	bne.n	8006820 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f922 	bl	8006a62 <I2C_MasterTransmit_TXE>
 800681e:	e04d      	b.n	80068bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	089b      	lsrs	r3, r3, #2
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 80d6 	beq.w	80069da <HAL_I2C_EV_IRQHandler+0x2d6>
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	0a5b      	lsrs	r3, r3, #9
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 80cf 	beq.w	80069da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800683c:	7bbb      	ldrb	r3, [r7, #14]
 800683e:	2b21      	cmp	r3, #33	@ 0x21
 8006840:	d103      	bne.n	800684a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f9a9 	bl	8006b9a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006848:	e0c7      	b.n	80069da <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	2b40      	cmp	r3, #64	@ 0x40
 800684e:	f040 80c4 	bne.w	80069da <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fa17 	bl	8006c86 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006858:	e0bf      	b.n	80069da <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006868:	f000 80b7 	beq.w	80069da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	099b      	lsrs	r3, r3, #6
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00f      	beq.n	8006898 <HAL_I2C_EV_IRQHandler+0x194>
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	0a9b      	lsrs	r3, r3, #10
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b00      	cmp	r3, #0
 8006882:	d009      	beq.n	8006898 <HAL_I2C_EV_IRQHandler+0x194>
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	089b      	lsrs	r3, r3, #2
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d103      	bne.n	8006898 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fa90 	bl	8006db6 <I2C_MasterReceive_RXNE>
 8006896:	e011      	b.n	80068bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	089b      	lsrs	r3, r3, #2
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 809a 	beq.w	80069da <HAL_I2C_EV_IRQHandler+0x2d6>
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	0a5b      	lsrs	r3, r3, #9
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 8093 	beq.w	80069da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fb46 	bl	8006f46 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068ba:	e08e      	b.n	80069da <HAL_I2C_EV_IRQHandler+0x2d6>
 80068bc:	e08d      	b.n	80069da <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d004      	beq.n	80068d0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	61fb      	str	r3, [r7, #28]
 80068ce:	e007      	b.n	80068e0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	085b      	lsrs	r3, r3, #1
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d012      	beq.n	8006912 <HAL_I2C_EV_IRQHandler+0x20e>
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	0a5b      	lsrs	r3, r3, #9
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00c      	beq.n	8006912 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006908:	69b9      	ldr	r1, [r7, #24]
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 ff0b 	bl	8007726 <I2C_Slave_ADDR>
 8006910:	e066      	b.n	80069e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	091b      	lsrs	r3, r3, #4
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d009      	beq.n	8006932 <HAL_I2C_EV_IRQHandler+0x22e>
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	0a5b      	lsrs	r3, r3, #9
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 ff46 	bl	80077bc <I2C_Slave_STOPF>
 8006930:	e056      	b.n	80069e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006932:	7bbb      	ldrb	r3, [r7, #14]
 8006934:	2b21      	cmp	r3, #33	@ 0x21
 8006936:	d002      	beq.n	800693e <HAL_I2C_EV_IRQHandler+0x23a>
 8006938:	7bbb      	ldrb	r3, [r7, #14]
 800693a:	2b29      	cmp	r3, #41	@ 0x29
 800693c:	d125      	bne.n	800698a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	09db      	lsrs	r3, r3, #7
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00f      	beq.n	800696a <HAL_I2C_EV_IRQHandler+0x266>
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	0a9b      	lsrs	r3, r3, #10
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d009      	beq.n	800696a <HAL_I2C_EV_IRQHandler+0x266>
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	089b      	lsrs	r3, r3, #2
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d103      	bne.n	800696a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fe21 	bl	80075aa <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006968:	e039      	b.n	80069de <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	089b      	lsrs	r3, r3, #2
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d033      	beq.n	80069de <HAL_I2C_EV_IRQHandler+0x2da>
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	0a5b      	lsrs	r3, r3, #9
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d02d      	beq.n	80069de <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fe4e 	bl	8007624 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006988:	e029      	b.n	80069de <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	099b      	lsrs	r3, r3, #6
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00f      	beq.n	80069b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	0a9b      	lsrs	r3, r3, #10
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	089b      	lsrs	r3, r3, #2
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d103      	bne.n	80069b6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fe59 	bl	8007666 <I2C_SlaveReceive_RXNE>
 80069b4:	e014      	b.n	80069e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	089b      	lsrs	r3, r3, #2
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00e      	beq.n	80069e0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	0a5b      	lsrs	r3, r3, #9
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d008      	beq.n	80069e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fe87 	bl	80076e2 <I2C_SlaveReceive_BTF>
 80069d4:	e004      	b.n	80069e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80069d6:	bf00      	nop
 80069d8:	e002      	b.n	80069e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069da:	bf00      	nop
 80069dc:	e000      	b.n	80069e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069de:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80069e0:	3720      	adds	r7, #32
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a70:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a78:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d150      	bne.n	8006b2a <I2C_MasterTransmit_TXE+0xc8>
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
 8006a8a:	2b21      	cmp	r3, #33	@ 0x21
 8006a8c:	d14d      	bne.n	8006b2a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	d01d      	beq.n	8006ad0 <I2C_MasterTransmit_TXE+0x6e>
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2b20      	cmp	r3, #32
 8006a98:	d01a      	beq.n	8006ad0 <I2C_MasterTransmit_TXE+0x6e>
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006aa0:	d016      	beq.n	8006ad0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ab0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2211      	movs	r2, #17
 8006ab6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7ff ff8c 	bl	80069e6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ace:	e060      	b.n	8006b92 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ade:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006aee:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b40      	cmp	r3, #64	@ 0x40
 8006b08:	d107      	bne.n	8006b1a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7ff ff7b 	bl	8006a0e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b18:	e03b      	b.n	8006b92 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7ff ff5f 	bl	80069e6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b28:	e033      	b.n	8006b92 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
 8006b2c:	2b21      	cmp	r3, #33	@ 0x21
 8006b2e:	d005      	beq.n	8006b3c <I2C_MasterTransmit_TXE+0xda>
 8006b30:	7bbb      	ldrb	r3, [r7, #14]
 8006b32:	2b40      	cmp	r3, #64	@ 0x40
 8006b34:	d12d      	bne.n	8006b92 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
 8006b38:	2b22      	cmp	r3, #34	@ 0x22
 8006b3a:	d12a      	bne.n	8006b92 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d108      	bne.n	8006b58 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b54:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006b56:	e01c      	b.n	8006b92 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b40      	cmp	r3, #64	@ 0x40
 8006b62:	d103      	bne.n	8006b6c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f88e 	bl	8006c86 <I2C_MemoryTransmit_TXE_BTF>
}
 8006b6a:	e012      	b.n	8006b92 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b70:	781a      	ldrb	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006b90:	e7ff      	b.n	8006b92 <I2C_MasterTransmit_TXE+0x130>
 8006b92:	bf00      	nop
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b21      	cmp	r3, #33	@ 0x21
 8006bb2:	d164      	bne.n	8006c7e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d012      	beq.n	8006be4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc2:	781a      	ldrb	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006be2:	e04c      	b.n	8006c7e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2b08      	cmp	r3, #8
 8006be8:	d01d      	beq.n	8006c26 <I2C_MasterTransmit_BTF+0x8c>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	d01a      	beq.n	8006c26 <I2C_MasterTransmit_BTF+0x8c>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006bf6:	d016      	beq.n	8006c26 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006c06:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2211      	movs	r2, #17
 8006c0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7ff fee1 	bl	80069e6 <HAL_I2C_MasterTxCpltCallback>
}
 8006c24:	e02b      	b.n	8006c7e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006c34:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c44:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b40      	cmp	r3, #64	@ 0x40
 8006c5e:	d107      	bne.n	8006c70 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff fed0 	bl	8006a0e <HAL_I2C_MemTxCpltCallback>
}
 8006c6e:	e006      	b.n	8006c7e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7ff feb4 	bl	80069e6 <HAL_I2C_MasterTxCpltCallback>
}
 8006c7e:	bf00      	nop
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c94:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d11d      	bne.n	8006cda <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d10b      	bne.n	8006cbe <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cb6:	1c9a      	adds	r2, r3, #2
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006cbc:	e077      	b.n	8006dae <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	121b      	asrs	r3, r3, #8
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006cd8:	e069      	b.n	8006dae <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d10b      	bne.n	8006cfa <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006cf8:	e059      	b.n	8006dae <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d152      	bne.n	8006da8 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	2b22      	cmp	r3, #34	@ 0x22
 8006d06:	d10d      	bne.n	8006d24 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d16:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006d22:	e044      	b.n	8006dae <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d015      	beq.n	8006d5a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
 8006d30:	2b21      	cmp	r3, #33	@ 0x21
 8006d32:	d112      	bne.n	8006d5a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d38:	781a      	ldrb	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	3b01      	subs	r3, #1
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006d58:	e029      	b.n	8006dae <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d124      	bne.n	8006dae <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
 8006d66:	2b21      	cmp	r3, #33	@ 0x21
 8006d68:	d121      	bne.n	8006dae <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006d78:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d88:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2220      	movs	r2, #32
 8006d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7ff fe34 	bl	8006a0e <HAL_I2C_MemTxCpltCallback>
}
 8006da6:	e002      	b.n	8006dae <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7ff fabf 	bl	800632c <I2C_Flush_DR>
}
 8006dae:	bf00      	nop
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b22      	cmp	r3, #34	@ 0x22
 8006dc8:	f040 80b9 	bne.w	8006f3e <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd0:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	d921      	bls.n	8006e24 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	691a      	ldr	r2, [r3, #16]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	2b03      	cmp	r3, #3
 8006e0e:	f040 8096 	bne.w	8006f3e <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e20:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006e22:	e08c      	b.n	8006f3e <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d07f      	beq.n	8006f2c <I2C_MasterReceive_RXNE+0x176>
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d002      	beq.n	8006e38 <I2C_MasterReceive_RXNE+0x82>
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d179      	bne.n	8006f2c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 ffc9 	bl	8007dd0 <I2C_WaitOnSTOPRequestThroughIT>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d14c      	bne.n	8006ede <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e52:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006e62:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691a      	ldr	r2, [r3, #16]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e76:	1c5a      	adds	r2, r3, #1
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	3b01      	subs	r3, #1
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b40      	cmp	r3, #64	@ 0x40
 8006e9c:	d10a      	bne.n	8006eb4 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7ff fdb8 	bl	8006a22 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006eb2:	e044      	b.n	8006f3e <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b08      	cmp	r3, #8
 8006ec0:	d002      	beq.n	8006ec8 <I2C_MasterReceive_RXNE+0x112>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2b20      	cmp	r3, #32
 8006ec6:	d103      	bne.n	8006ed0 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ece:	e002      	b.n	8006ed6 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2212      	movs	r2, #18
 8006ed4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7ff fd8f 	bl	80069fa <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006edc:	e02f      	b.n	8006f3e <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006eec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	691a      	ldr	r2, [r3, #16]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef8:	b2d2      	uxtb	r2, r2
 8006efa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2220      	movs	r2, #32
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7fa fda5 	bl	8001a74 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006f2a:	e008      	b.n	8006f3e <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f3a:	605a      	str	r2, [r3, #4]
}
 8006f3c:	e7ff      	b.n	8006f3e <I2C_MasterReceive_RXNE+0x188>
 8006f3e:	bf00      	nop
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f52:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d11b      	bne.n	8006f96 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f6c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f78:	b2d2      	uxtb	r2, r2
 8006f7a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006f94:	e0c4      	b.n	8007120 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d129      	bne.n	8006ff4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fae:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b04      	cmp	r3, #4
 8006fb4:	d00a      	beq.n	8006fcc <I2C_MasterReceive_BTF+0x86>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d007      	beq.n	8006fcc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	691a      	ldr	r2, [r3, #16]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	3b01      	subs	r3, #1
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006ff2:	e095      	b.n	8007120 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d17d      	bne.n	80070fa <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d002      	beq.n	800700a <I2C_MasterReceive_BTF+0xc4>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b10      	cmp	r3, #16
 8007008:	d108      	bne.n	800701c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	e016      	b.n	800704a <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b04      	cmp	r3, #4
 8007020:	d002      	beq.n	8007028 <I2C_MasterReceive_BTF+0xe2>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b02      	cmp	r3, #2
 8007026:	d108      	bne.n	800703a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	e007      	b.n	800704a <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007048:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	691a      	ldr	r2, [r3, #16]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007054:	b2d2      	uxtb	r2, r2
 8007056:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007066:	b29b      	uxth	r3, r3
 8007068:	3b01      	subs	r3, #1
 800706a:	b29a      	uxth	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	691a      	ldr	r2, [r3, #16]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800708c:	b29b      	uxth	r3, r3
 800708e:	3b01      	subs	r3, #1
 8007090:	b29a      	uxth	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80070a4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b40      	cmp	r3, #64	@ 0x40
 80070b8:	d10a      	bne.n	80070d0 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7ff fcaa 	bl	8006a22 <HAL_I2C_MemRxCpltCallback>
}
 80070ce:	e027      	b.n	8007120 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b08      	cmp	r3, #8
 80070dc:	d002      	beq.n	80070e4 <I2C_MasterReceive_BTF+0x19e>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	d103      	bne.n	80070ec <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80070ea:	e002      	b.n	80070f2 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2212      	movs	r2, #18
 80070f0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff fc81 	bl	80069fa <HAL_I2C_MasterRxCpltCallback>
}
 80070f8:	e012      	b.n	8007120 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	691a      	ldr	r2, [r3, #16]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007104:	b2d2      	uxtb	r2, r2
 8007106:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007116:	b29b      	uxth	r3, r3
 8007118:	3b01      	subs	r3, #1
 800711a:	b29a      	uxth	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007120:	bf00      	nop
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b40      	cmp	r3, #64	@ 0x40
 800713a:	d117      	bne.n	800716c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007140:	2b00      	cmp	r3, #0
 8007142:	d109      	bne.n	8007158 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007148:	b2db      	uxtb	r3, r3
 800714a:	461a      	mov	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007154:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007156:	e067      	b.n	8007228 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800715c:	b2db      	uxtb	r3, r3
 800715e:	f043 0301 	orr.w	r3, r3, #1
 8007162:	b2da      	uxtb	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	611a      	str	r2, [r3, #16]
}
 800716a:	e05d      	b.n	8007228 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007174:	d133      	bne.n	80071de <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b21      	cmp	r3, #33	@ 0x21
 8007180:	d109      	bne.n	8007196 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007186:	b2db      	uxtb	r3, r3
 8007188:	461a      	mov	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007192:	611a      	str	r2, [r3, #16]
 8007194:	e008      	b.n	80071a8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800719a:	b2db      	uxtb	r3, r3
 800719c:	f043 0301 	orr.w	r3, r3, #1
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d004      	beq.n	80071ba <I2C_Master_SB+0x92>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d108      	bne.n	80071cc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d032      	beq.n	8007228 <I2C_Master_SB+0x100>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d02d      	beq.n	8007228 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071da:	605a      	str	r2, [r3, #4]
}
 80071dc:	e024      	b.n	8007228 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10e      	bne.n	8007204 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	11db      	asrs	r3, r3, #7
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	f003 0306 	and.w	r3, r3, #6
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	f063 030f 	orn	r3, r3, #15
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	611a      	str	r2, [r3, #16]
}
 8007202:	e011      	b.n	8007228 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007208:	2b01      	cmp	r3, #1
 800720a:	d10d      	bne.n	8007228 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007210:	b29b      	uxth	r3, r3
 8007212:	11db      	asrs	r3, r3, #7
 8007214:	b2db      	uxtb	r3, r3
 8007216:	f003 0306 	and.w	r3, r3, #6
 800721a:	b2db      	uxtb	r3, r3
 800721c:	f063 030e 	orn	r3, r3, #14
 8007220:	b2da      	uxtb	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	611a      	str	r2, [r3, #16]
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007240:	b2da      	uxtb	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800724c:	2b00      	cmp	r3, #0
 800724e:	d004      	beq.n	800725a <I2C_Master_ADD10+0x26>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007256:	2b00      	cmp	r3, #0
 8007258:	d108      	bne.n	800726c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00c      	beq.n	800727c <I2C_Master_ADD10+0x48>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007268:	2b00      	cmp	r3, #0
 800726a:	d007      	beq.n	800727c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800727a:	605a      	str	r2, [r3, #4]
  }
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007288:	b480      	push	{r7}
 800728a:	b091      	sub	sp, #68	@ 0x44
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007296:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a4:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b22      	cmp	r3, #34	@ 0x22
 80072b0:	f040 8169 	bne.w	8007586 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10f      	bne.n	80072dc <I2C_Master_ADDR+0x54>
 80072bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80072c0:	2b40      	cmp	r3, #64	@ 0x40
 80072c2:	d10b      	bne.n	80072dc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072c4:	2300      	movs	r3, #0
 80072c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80072d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072da:	e160      	b.n	800759e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d11d      	bne.n	8007320 <I2C_Master_ADDR+0x98>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80072ec:	d118      	bne.n	8007320 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072ee:	2300      	movs	r3, #0
 80072f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007312:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007318:	1c5a      	adds	r2, r3, #1
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	651a      	str	r2, [r3, #80]	@ 0x50
 800731e:	e13e      	b.n	800759e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007324:	b29b      	uxth	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d113      	bne.n	8007352 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800732a:	2300      	movs	r3, #0
 800732c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800733e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	e115      	b.n	800757e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007356:	b29b      	uxth	r3, r3
 8007358:	2b01      	cmp	r3, #1
 800735a:	f040 808a 	bne.w	8007472 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800735e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007360:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007364:	d137      	bne.n	80073d6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007374:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007380:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007384:	d113      	bne.n	80073ae <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007394:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007396:	2300      	movs	r3, #0
 8007398:	627b      	str	r3, [r7, #36]	@ 0x24
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80073aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ac:	e0e7      	b.n	800757e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073ae:	2300      	movs	r3, #0
 80073b0:	623b      	str	r3, [r7, #32]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	623b      	str	r3, [r7, #32]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	623b      	str	r3, [r7, #32]
 80073c2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	e0d3      	b.n	800757e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80073d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d8:	2b08      	cmp	r3, #8
 80073da:	d02e      	beq.n	800743a <I2C_Master_ADDR+0x1b2>
 80073dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073de:	2b20      	cmp	r3, #32
 80073e0:	d02b      	beq.n	800743a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80073e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e4:	2b12      	cmp	r3, #18
 80073e6:	d102      	bne.n	80073ee <I2C_Master_ADDR+0x166>
 80073e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d125      	bne.n	800743a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80073ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f0:	2b04      	cmp	r3, #4
 80073f2:	d00e      	beq.n	8007412 <I2C_Master_ADDR+0x18a>
 80073f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d00b      	beq.n	8007412 <I2C_Master_ADDR+0x18a>
 80073fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073fc:	2b10      	cmp	r3, #16
 80073fe:	d008      	beq.n	8007412 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	e007      	b.n	8007422 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007420:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007422:	2300      	movs	r3, #0
 8007424:	61fb      	str	r3, [r7, #28]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	61fb      	str	r3, [r7, #28]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	61fb      	str	r3, [r7, #28]
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	e0a1      	b.n	800757e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007448:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800744a:	2300      	movs	r3, #0
 800744c:	61bb      	str	r3, [r7, #24]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	61bb      	str	r3, [r7, #24]
 800745e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800746e:	601a      	str	r2, [r3, #0]
 8007470:	e085      	b.n	800757e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007476:	b29b      	uxth	r3, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d14d      	bne.n	8007518 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800747c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747e:	2b04      	cmp	r3, #4
 8007480:	d016      	beq.n	80074b0 <I2C_Master_ADDR+0x228>
 8007482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007484:	2b02      	cmp	r3, #2
 8007486:	d013      	beq.n	80074b0 <I2C_Master_ADDR+0x228>
 8007488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748a:	2b10      	cmp	r3, #16
 800748c:	d010      	beq.n	80074b0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800749c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	e007      	b.n	80074c0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80074be:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074ce:	d117      	bne.n	8007500 <I2C_Master_ADDR+0x278>
 80074d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80074d6:	d00b      	beq.n	80074f0 <I2C_Master_ADDR+0x268>
 80074d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d008      	beq.n	80074f0 <I2C_Master_ADDR+0x268>
 80074de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d005      	beq.n	80074f0 <I2C_Master_ADDR+0x268>
 80074e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e6:	2b10      	cmp	r3, #16
 80074e8:	d002      	beq.n	80074f0 <I2C_Master_ADDR+0x268>
 80074ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ec:	2b20      	cmp	r3, #32
 80074ee:	d107      	bne.n	8007500 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80074fe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007500:	2300      	movs	r3, #0
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	617b      	str	r3, [r7, #20]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	617b      	str	r3, [r7, #20]
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	e032      	b.n	800757e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007526:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007532:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007536:	d117      	bne.n	8007568 <I2C_Master_ADDR+0x2e0>
 8007538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800753e:	d00b      	beq.n	8007558 <I2C_Master_ADDR+0x2d0>
 8007540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007542:	2b01      	cmp	r3, #1
 8007544:	d008      	beq.n	8007558 <I2C_Master_ADDR+0x2d0>
 8007546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007548:	2b08      	cmp	r3, #8
 800754a:	d005      	beq.n	8007558 <I2C_Master_ADDR+0x2d0>
 800754c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800754e:	2b10      	cmp	r3, #16
 8007550:	d002      	beq.n	8007558 <I2C_Master_ADDR+0x2d0>
 8007552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007554:	2b20      	cmp	r3, #32
 8007556:	d107      	bne.n	8007568 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007566:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007568:	2300      	movs	r3, #0
 800756a:	613b      	str	r3, [r7, #16]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	613b      	str	r3, [r7, #16]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	613b      	str	r3, [r7, #16]
 800757c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007584:	e00b      	b.n	800759e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	60fb      	str	r3, [r7, #12]
 800759a:	68fb      	ldr	r3, [r7, #12]
}
 800759c:	e7ff      	b.n	800759e <I2C_Master_ADDR+0x316>
 800759e:	bf00      	nop
 80075a0:	3744      	adds	r7, #68	@ 0x44
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075b8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075be:	b29b      	uxth	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d02b      	beq.n	800761c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c8:	781a      	ldrb	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d4:	1c5a      	adds	r2, r3, #1
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075de:	b29b      	uxth	r3, r3
 80075e0:	3b01      	subs	r3, #1
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d114      	bne.n	800761c <I2C_SlaveTransmit_TXE+0x72>
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
 80075f4:	2b29      	cmp	r3, #41	@ 0x29
 80075f6:	d111      	bne.n	800761c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007606:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2221      	movs	r2, #33	@ 0x21
 800760c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2228      	movs	r2, #40	@ 0x28
 8007612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7fa fa1c 	bl	8001a54 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800761c:	bf00      	nop
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007630:	b29b      	uxth	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d011      	beq.n	800765a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763a:	781a      	ldrb	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007650:	b29b      	uxth	r3, r3
 8007652:	3b01      	subs	r3, #1
 8007654:	b29a      	uxth	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800765a:	bf00      	nop
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007674:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d02c      	beq.n	80076da <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	691a      	ldr	r2, [r3, #16]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768a:	b2d2      	uxtb	r2, r2
 800768c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007692:	1c5a      	adds	r2, r3, #1
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800769c:	b29b      	uxth	r3, r3
 800769e:	3b01      	subs	r3, #1
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d114      	bne.n	80076da <I2C_SlaveReceive_RXNE+0x74>
 80076b0:	7bfb      	ldrb	r3, [r7, #15]
 80076b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80076b4:	d111      	bne.n	80076da <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076c4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2222      	movs	r2, #34	@ 0x22
 80076ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2228      	movs	r2, #40	@ 0x28
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7fa f95b 	bl	8001990 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80076da:	bf00      	nop
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d012      	beq.n	800771a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	691a      	ldr	r2, [r3, #16]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076fe:	b2d2      	uxtb	r2, r2
 8007700:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007710:	b29b      	uxth	r3, r3
 8007712:	3b01      	subs	r3, #1
 8007714:	b29a      	uxth	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800771a:	bf00      	nop
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b084      	sub	sp, #16
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007730:	2300      	movs	r3, #0
 8007732:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800773a:	b2db      	uxtb	r3, r3
 800773c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007740:	2b28      	cmp	r3, #40	@ 0x28
 8007742:	d127      	bne.n	8007794 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007752:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	089b      	lsrs	r3, r3, #2
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007760:	2301      	movs	r3, #1
 8007762:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	09db      	lsrs	r3, r3, #7
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b00      	cmp	r3, #0
 800776e:	d103      	bne.n	8007778 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	81bb      	strh	r3, [r7, #12]
 8007776:	e002      	b.n	800777e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007786:	89ba      	ldrh	r2, [r7, #12]
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7fa f887 	bl	80018a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007792:	e00e      	b.n	80077b2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007794:	2300      	movs	r3, #0
 8007796:	60bb      	str	r3, [r7, #8]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	60bb      	str	r3, [r7, #8]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	60bb      	str	r3, [r7, #8]
 80077a8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80077b2:	bf00      	nop
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80077da:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80077dc:	2300      	movs	r3, #0
 80077de:	60bb      	str	r3, [r7, #8]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	60bb      	str	r3, [r7, #8]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f042 0201 	orr.w	r2, r2, #1
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007808:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007818:	d172      	bne.n	8007900 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	2b22      	cmp	r3, #34	@ 0x22
 800781e:	d002      	beq.n	8007826 <I2C_Slave_STOPF+0x6a>
 8007820:	7bfb      	ldrb	r3, [r7, #15]
 8007822:	2b2a      	cmp	r3, #42	@ 0x2a
 8007824:	d135      	bne.n	8007892 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	b29a      	uxth	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d005      	beq.n	800784a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007842:	f043 0204 	orr.w	r2, r3, #4
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007858:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785e:	4618      	mov	r0, r3
 8007860:	f7fe f958 	bl	8005b14 <HAL_DMA_GetState>
 8007864:	4603      	mov	r3, r0
 8007866:	2b01      	cmp	r3, #1
 8007868:	d049      	beq.n	80078fe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786e:	4a69      	ldr	r2, [pc, #420]	@ (8007a14 <I2C_Slave_STOPF+0x258>)
 8007870:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007876:	4618      	mov	r0, r3
 8007878:	f7fd ffa0 	bl	80057bc <HAL_DMA_Abort_IT>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d03d      	beq.n	80078fe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800788c:	4610      	mov	r0, r2
 800788e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007890:	e035      	b.n	80078fe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	b29a      	uxth	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d005      	beq.n	80078b6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ae:	f043 0204 	orr.w	r2, r3, #4
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe f922 	bl	8005b14 <HAL_DMA_GetState>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d014      	beq.n	8007900 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078da:	4a4e      	ldr	r2, [pc, #312]	@ (8007a14 <I2C_Slave_STOPF+0x258>)
 80078dc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fd ff6a 	bl	80057bc <HAL_DMA_Abort_IT>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d008      	beq.n	8007900 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80078f8:	4610      	mov	r0, r2
 80078fa:	4798      	blx	r3
 80078fc:	e000      	b.n	8007900 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078fe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007904:	b29b      	uxth	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d03e      	beq.n	8007988 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b04      	cmp	r3, #4
 8007916:	d112      	bne.n	800793e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	691a      	ldr	r2, [r3, #16]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007934:	b29b      	uxth	r3, r3
 8007936:	3b01      	subs	r3, #1
 8007938:	b29a      	uxth	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007948:	2b40      	cmp	r3, #64	@ 0x40
 800794a:	d112      	bne.n	8007972 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691a      	ldr	r2, [r3, #16]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007968:	b29b      	uxth	r3, r3
 800796a:	3b01      	subs	r3, #1
 800796c:	b29a      	uxth	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007976:	b29b      	uxth	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007980:	f043 0204 	orr.w	r2, r3, #4
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f843 	bl	8007a1c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007996:	e039      	b.n	8007a0c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	2b2a      	cmp	r3, #42	@ 0x2a
 800799c:	d109      	bne.n	80079b2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2228      	movs	r2, #40	@ 0x28
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7f9 ffef 	bl	8001990 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b28      	cmp	r3, #40	@ 0x28
 80079bc:	d111      	bne.n	80079e2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a15      	ldr	r2, [pc, #84]	@ (8007a18 <I2C_Slave_STOPF+0x25c>)
 80079c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7fa f82e 	bl	8001a3c <HAL_I2C_ListenCpltCallback>
}
 80079e0:	e014      	b.n	8007a0c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e6:	2b22      	cmp	r3, #34	@ 0x22
 80079e8:	d002      	beq.n	80079f0 <I2C_Slave_STOPF+0x234>
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
 80079ec:	2b22      	cmp	r3, #34	@ 0x22
 80079ee:	d10d      	bne.n	8007a0c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2220      	movs	r2, #32
 80079fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7f9 ffc2 	bl	8001990 <HAL_I2C_SlaveRxCpltCallback>
}
 8007a0c:	bf00      	nop
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	08007c81 	.word	0x08007c81
 8007a18:	ffff0000 	.word	0xffff0000

08007a1c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a2a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a32:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	2b10      	cmp	r3, #16
 8007a38:	d002      	beq.n	8007a40 <I2C_ITError+0x24>
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	2b40      	cmp	r3, #64	@ 0x40
 8007a3e:	d10a      	bne.n	8007a56 <I2C_ITError+0x3a>
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
 8007a42:	2b22      	cmp	r3, #34	@ 0x22
 8007a44:	d107      	bne.n	8007a56 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a54:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
 8007a58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007a5c:	2b28      	cmp	r3, #40	@ 0x28
 8007a5e:	d107      	bne.n	8007a70 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2228      	movs	r2, #40	@ 0x28
 8007a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007a6e:	e015      	b.n	8007a9c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a7e:	d00a      	beq.n	8007a96 <I2C_ITError+0x7a>
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
 8007a82:	2b60      	cmp	r3, #96	@ 0x60
 8007a84:	d007      	beq.n	8007a96 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2220      	movs	r2, #32
 8007a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007aa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007aaa:	d162      	bne.n	8007b72 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007aba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d020      	beq.n	8007b0c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ace:	4a6a      	ldr	r2, [pc, #424]	@ (8007c78 <I2C_ITError+0x25c>)
 8007ad0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fd fe70 	bl	80057bc <HAL_DMA_Abort_IT>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 8089 	beq.w	8007bf6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 0201 	bic.w	r2, r2, #1
 8007af2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2220      	movs	r2, #32
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007b06:	4610      	mov	r0, r2
 8007b08:	4798      	blx	r3
 8007b0a:	e074      	b.n	8007bf6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b10:	4a59      	ldr	r2, [pc, #356]	@ (8007c78 <I2C_ITError+0x25c>)
 8007b12:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fd fe4f 	bl	80057bc <HAL_DMA_Abort_IT>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d068      	beq.n	8007bf6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b2e:	2b40      	cmp	r3, #64	@ 0x40
 8007b30:	d10b      	bne.n	8007b4a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	691a      	ldr	r2, [r3, #16]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3c:	b2d2      	uxtb	r2, r2
 8007b3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b44:	1c5a      	adds	r2, r3, #1
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0201 	bic.w	r2, r2, #1
 8007b58:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	4798      	blx	r3
 8007b70:	e041      	b.n	8007bf6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b60      	cmp	r3, #96	@ 0x60
 8007b7c:	d125      	bne.n	8007bca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b96:	2b40      	cmp	r3, #64	@ 0x40
 8007b98:	d10b      	bne.n	8007bb2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	691a      	ldr	r2, [r3, #16]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba4:	b2d2      	uxtb	r2, r2
 8007ba6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bac:	1c5a      	adds	r2, r3, #1
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f022 0201 	bic.w	r2, r2, #1
 8007bc0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7fe ff37 	bl	8006a36 <HAL_I2C_AbortCpltCallback>
 8007bc8:	e015      	b.n	8007bf6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd4:	2b40      	cmp	r3, #64	@ 0x40
 8007bd6:	d10b      	bne.n	8007bf0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	691a      	ldr	r2, [r3, #16]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be2:	b2d2      	uxtb	r2, r2
 8007be4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7f9 ff3f 	bl	8001a74 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bfa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10e      	bne.n	8007c24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d109      	bne.n	8007c24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d104      	bne.n	8007c24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d007      	beq.n	8007c34 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007c32:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c3a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c40:	f003 0304 	and.w	r3, r3, #4
 8007c44:	2b04      	cmp	r3, #4
 8007c46:	d113      	bne.n	8007c70 <I2C_ITError+0x254>
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	2b28      	cmp	r3, #40	@ 0x28
 8007c4c:	d110      	bne.n	8007c70 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a0a      	ldr	r2, [pc, #40]	@ (8007c7c <I2C_ITError+0x260>)
 8007c52:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7f9 fee6 	bl	8001a3c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007c70:	bf00      	nop
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	08007c81 	.word	0x08007c81
 8007c7c:	ffff0000 	.word	0xffff0000

08007c80 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c90:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c98:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007c9a:	4b4b      	ldr	r3, [pc, #300]	@ (8007dc8 <I2C_DMAAbort+0x148>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	08db      	lsrs	r3, r3, #3
 8007ca0:	4a4a      	ldr	r2, [pc, #296]	@ (8007dcc <I2C_DMAAbort+0x14c>)
 8007ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca6:	0a1a      	lsrs	r2, r3, #8
 8007ca8:	4613      	mov	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	00da      	lsls	r2, r3, #3
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d106      	bne.n	8007cc8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cbe:	f043 0220 	orr.w	r2, r3, #32
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8007cc6:	e00a      	b.n	8007cde <I2C_DMAAbort+0x5e>
    }
    count--;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cdc:	d0ea      	beq.n	8007cb4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d003      	beq.n	8007cee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cea:	2200      	movs	r2, #0
 8007cec:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d0c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2200      	movs	r2, #0
 8007d12:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d003      	beq.n	8007d24 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d20:	2200      	movs	r2, #0
 8007d22:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d30:	2200      	movs	r2, #0
 8007d32:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 0201 	bic.w	r2, r2, #1
 8007d42:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b60      	cmp	r3, #96	@ 0x60
 8007d4e:	d10e      	bne.n	8007d6e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	2220      	movs	r2, #32
 8007d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	2200      	movs	r2, #0
 8007d64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007d66:	6978      	ldr	r0, [r7, #20]
 8007d68:	f7fe fe65 	bl	8006a36 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007d6c:	e027      	b.n	8007dbe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d6e:	7cfb      	ldrb	r3, [r7, #19]
 8007d70:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007d74:	2b28      	cmp	r3, #40	@ 0x28
 8007d76:	d117      	bne.n	8007da8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f042 0201 	orr.w	r2, r2, #1
 8007d86:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007d96:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2228      	movs	r2, #40	@ 0x28
 8007da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007da6:	e007      	b.n	8007db8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	2220      	movs	r2, #32
 8007dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007db8:	6978      	ldr	r0, [r7, #20]
 8007dba:	f7f9 fe5b 	bl	8001a74 <HAL_I2C_ErrorCallback>
}
 8007dbe:	bf00      	nop
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20000054 	.word	0x20000054
 8007dcc:	14f8b589 	.word	0x14f8b589

08007dd0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ddc:	4b13      	ldr	r3, [pc, #76]	@ (8007e2c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	08db      	lsrs	r3, r3, #3
 8007de2:	4a13      	ldr	r2, [pc, #76]	@ (8007e30 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007de4:	fba2 2303 	umull	r2, r3, r2, r3
 8007de8:	0a1a      	lsrs	r2, r3, #8
 8007dea:	4613      	mov	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d107      	bne.n	8007e0e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e02:	f043 0220 	orr.w	r2, r3, #32
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e008      	b.n	8007e20 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e1c:	d0e9      	beq.n	8007df2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	20000054 	.word	0x20000054
 8007e30:	14f8b589 	.word	0x14f8b589

08007e34 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e40:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007e44:	d103      	bne.n	8007e4e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007e4c:	e007      	b.n	8007e5e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e52:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007e56:	d102      	bne.n	8007e5e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007e5e:	bf00      	nop
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
	...

08007e6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d101      	bne.n	8007e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e267      	b.n	800834e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d075      	beq.n	8007f76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007e8a:	4b88      	ldr	r3, [pc, #544]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f003 030c 	and.w	r3, r3, #12
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	d00c      	beq.n	8007eb0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e96:	4b85      	ldr	r3, [pc, #532]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007e9e:	2b08      	cmp	r3, #8
 8007ea0:	d112      	bne.n	8007ec8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ea2:	4b82      	ldr	r3, [pc, #520]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007eaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007eae:	d10b      	bne.n	8007ec8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007eb0:	4b7e      	ldr	r3, [pc, #504]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d05b      	beq.n	8007f74 <HAL_RCC_OscConfig+0x108>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d157      	bne.n	8007f74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e242      	b.n	800834e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ed0:	d106      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x74>
 8007ed2:	4b76      	ldr	r3, [pc, #472]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a75      	ldr	r2, [pc, #468]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	e01d      	b.n	8007f1c <HAL_RCC_OscConfig+0xb0>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ee8:	d10c      	bne.n	8007f04 <HAL_RCC_OscConfig+0x98>
 8007eea:	4b70      	ldr	r3, [pc, #448]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a6f      	ldr	r2, [pc, #444]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007ef0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ef4:	6013      	str	r3, [r2, #0]
 8007ef6:	4b6d      	ldr	r3, [pc, #436]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a6c      	ldr	r2, [pc, #432]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f00:	6013      	str	r3, [r2, #0]
 8007f02:	e00b      	b.n	8007f1c <HAL_RCC_OscConfig+0xb0>
 8007f04:	4b69      	ldr	r3, [pc, #420]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a68      	ldr	r2, [pc, #416]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007f0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f0e:	6013      	str	r3, [r2, #0]
 8007f10:	4b66      	ldr	r3, [pc, #408]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a65      	ldr	r2, [pc, #404]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007f16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d013      	beq.n	8007f4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f24:	f7fb fcce 	bl	80038c4 <HAL_GetTick>
 8007f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f2a:	e008      	b.n	8007f3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f2c:	f7fb fcca 	bl	80038c4 <HAL_GetTick>
 8007f30:	4602      	mov	r2, r0
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	2b64      	cmp	r3, #100	@ 0x64
 8007f38:	d901      	bls.n	8007f3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e207      	b.n	800834e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f3e:	4b5b      	ldr	r3, [pc, #364]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d0f0      	beq.n	8007f2c <HAL_RCC_OscConfig+0xc0>
 8007f4a:	e014      	b.n	8007f76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f4c:	f7fb fcba 	bl	80038c4 <HAL_GetTick>
 8007f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f52:	e008      	b.n	8007f66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f54:	f7fb fcb6 	bl	80038c4 <HAL_GetTick>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	2b64      	cmp	r3, #100	@ 0x64
 8007f60:	d901      	bls.n	8007f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e1f3      	b.n	800834e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f66:	4b51      	ldr	r3, [pc, #324]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1f0      	bne.n	8007f54 <HAL_RCC_OscConfig+0xe8>
 8007f72:	e000      	b.n	8007f76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d063      	beq.n	800804a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007f82:	4b4a      	ldr	r3, [pc, #296]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f003 030c 	and.w	r3, r3, #12
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00b      	beq.n	8007fa6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f8e:	4b47      	ldr	r3, [pc, #284]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007f96:	2b08      	cmp	r3, #8
 8007f98:	d11c      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f9a:	4b44      	ldr	r3, [pc, #272]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d116      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fa6:	4b41      	ldr	r3, [pc, #260]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0302 	and.w	r3, r3, #2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d005      	beq.n	8007fbe <HAL_RCC_OscConfig+0x152>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d001      	beq.n	8007fbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e1c7      	b.n	800834e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fbe:	4b3b      	ldr	r3, [pc, #236]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	4937      	ldr	r1, [pc, #220]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fd2:	e03a      	b.n	800804a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d020      	beq.n	800801e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fdc:	4b34      	ldr	r3, [pc, #208]	@ (80080b0 <HAL_RCC_OscConfig+0x244>)
 8007fde:	2201      	movs	r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe2:	f7fb fc6f 	bl	80038c4 <HAL_GetTick>
 8007fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fe8:	e008      	b.n	8007ffc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fea:	f7fb fc6b 	bl	80038c4 <HAL_GetTick>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d901      	bls.n	8007ffc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e1a8      	b.n	800834e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 0302 	and.w	r3, r3, #2
 8008004:	2b00      	cmp	r3, #0
 8008006:	d0f0      	beq.n	8007fea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008008:	4b28      	ldr	r3, [pc, #160]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	00db      	lsls	r3, r3, #3
 8008016:	4925      	ldr	r1, [pc, #148]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8008018:	4313      	orrs	r3, r2
 800801a:	600b      	str	r3, [r1, #0]
 800801c:	e015      	b.n	800804a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800801e:	4b24      	ldr	r3, [pc, #144]	@ (80080b0 <HAL_RCC_OscConfig+0x244>)
 8008020:	2200      	movs	r2, #0
 8008022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008024:	f7fb fc4e 	bl	80038c4 <HAL_GetTick>
 8008028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800802a:	e008      	b.n	800803e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800802c:	f7fb fc4a 	bl	80038c4 <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	2b02      	cmp	r3, #2
 8008038:	d901      	bls.n	800803e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e187      	b.n	800834e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800803e:	4b1b      	ldr	r3, [pc, #108]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1f0      	bne.n	800802c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0308 	and.w	r3, r3, #8
 8008052:	2b00      	cmp	r3, #0
 8008054:	d036      	beq.n	80080c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d016      	beq.n	800808c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800805e:	4b15      	ldr	r3, [pc, #84]	@ (80080b4 <HAL_RCC_OscConfig+0x248>)
 8008060:	2201      	movs	r2, #1
 8008062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008064:	f7fb fc2e 	bl	80038c4 <HAL_GetTick>
 8008068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800806a:	e008      	b.n	800807e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800806c:	f7fb fc2a 	bl	80038c4 <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	2b02      	cmp	r3, #2
 8008078:	d901      	bls.n	800807e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e167      	b.n	800834e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800807e:	4b0b      	ldr	r3, [pc, #44]	@ (80080ac <HAL_RCC_OscConfig+0x240>)
 8008080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	2b00      	cmp	r3, #0
 8008088:	d0f0      	beq.n	800806c <HAL_RCC_OscConfig+0x200>
 800808a:	e01b      	b.n	80080c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800808c:	4b09      	ldr	r3, [pc, #36]	@ (80080b4 <HAL_RCC_OscConfig+0x248>)
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008092:	f7fb fc17 	bl	80038c4 <HAL_GetTick>
 8008096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008098:	e00e      	b.n	80080b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800809a:	f7fb fc13 	bl	80038c4 <HAL_GetTick>
 800809e:	4602      	mov	r2, r0
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d907      	bls.n	80080b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e150      	b.n	800834e <HAL_RCC_OscConfig+0x4e2>
 80080ac:	40023800 	.word	0x40023800
 80080b0:	42470000 	.word	0x42470000
 80080b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080b8:	4b88      	ldr	r3, [pc, #544]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 80080ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080bc:	f003 0302 	and.w	r3, r3, #2
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1ea      	bne.n	800809a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 8097 	beq.w	8008200 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080d2:	2300      	movs	r3, #0
 80080d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080d6:	4b81      	ldr	r3, [pc, #516]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 80080d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10f      	bne.n	8008102 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080e2:	2300      	movs	r3, #0
 80080e4:	60bb      	str	r3, [r7, #8]
 80080e6:	4b7d      	ldr	r3, [pc, #500]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 80080e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ea:	4a7c      	ldr	r2, [pc, #496]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 80080ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80080f2:	4b7a      	ldr	r3, [pc, #488]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 80080f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080fa:	60bb      	str	r3, [r7, #8]
 80080fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080fe:	2301      	movs	r3, #1
 8008100:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008102:	4b77      	ldr	r3, [pc, #476]	@ (80082e0 <HAL_RCC_OscConfig+0x474>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800810a:	2b00      	cmp	r3, #0
 800810c:	d118      	bne.n	8008140 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800810e:	4b74      	ldr	r3, [pc, #464]	@ (80082e0 <HAL_RCC_OscConfig+0x474>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a73      	ldr	r2, [pc, #460]	@ (80082e0 <HAL_RCC_OscConfig+0x474>)
 8008114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800811a:	f7fb fbd3 	bl	80038c4 <HAL_GetTick>
 800811e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008120:	e008      	b.n	8008134 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008122:	f7fb fbcf 	bl	80038c4 <HAL_GetTick>
 8008126:	4602      	mov	r2, r0
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	2b02      	cmp	r3, #2
 800812e:	d901      	bls.n	8008134 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e10c      	b.n	800834e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008134:	4b6a      	ldr	r3, [pc, #424]	@ (80082e0 <HAL_RCC_OscConfig+0x474>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800813c:	2b00      	cmp	r3, #0
 800813e:	d0f0      	beq.n	8008122 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d106      	bne.n	8008156 <HAL_RCC_OscConfig+0x2ea>
 8008148:	4b64      	ldr	r3, [pc, #400]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 800814a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800814c:	4a63      	ldr	r2, [pc, #396]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 800814e:	f043 0301 	orr.w	r3, r3, #1
 8008152:	6713      	str	r3, [r2, #112]	@ 0x70
 8008154:	e01c      	b.n	8008190 <HAL_RCC_OscConfig+0x324>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	2b05      	cmp	r3, #5
 800815c:	d10c      	bne.n	8008178 <HAL_RCC_OscConfig+0x30c>
 800815e:	4b5f      	ldr	r3, [pc, #380]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 8008160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008162:	4a5e      	ldr	r2, [pc, #376]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 8008164:	f043 0304 	orr.w	r3, r3, #4
 8008168:	6713      	str	r3, [r2, #112]	@ 0x70
 800816a:	4b5c      	ldr	r3, [pc, #368]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 800816c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800816e:	4a5b      	ldr	r2, [pc, #364]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 8008170:	f043 0301 	orr.w	r3, r3, #1
 8008174:	6713      	str	r3, [r2, #112]	@ 0x70
 8008176:	e00b      	b.n	8008190 <HAL_RCC_OscConfig+0x324>
 8008178:	4b58      	ldr	r3, [pc, #352]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 800817a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800817c:	4a57      	ldr	r2, [pc, #348]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 800817e:	f023 0301 	bic.w	r3, r3, #1
 8008182:	6713      	str	r3, [r2, #112]	@ 0x70
 8008184:	4b55      	ldr	r3, [pc, #340]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 8008186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008188:	4a54      	ldr	r2, [pc, #336]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 800818a:	f023 0304 	bic.w	r3, r3, #4
 800818e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d015      	beq.n	80081c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008198:	f7fb fb94 	bl	80038c4 <HAL_GetTick>
 800819c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800819e:	e00a      	b.n	80081b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081a0:	f7fb fb90 	bl	80038c4 <HAL_GetTick>
 80081a4:	4602      	mov	r2, r0
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d901      	bls.n	80081b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e0cb      	b.n	800834e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081b6:	4b49      	ldr	r3, [pc, #292]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 80081b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d0ee      	beq.n	80081a0 <HAL_RCC_OscConfig+0x334>
 80081c2:	e014      	b.n	80081ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081c4:	f7fb fb7e 	bl	80038c4 <HAL_GetTick>
 80081c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081ca:	e00a      	b.n	80081e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081cc:	f7fb fb7a 	bl	80038c4 <HAL_GetTick>
 80081d0:	4602      	mov	r2, r0
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081da:	4293      	cmp	r3, r2
 80081dc:	d901      	bls.n	80081e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e0b5      	b.n	800834e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081e2:	4b3e      	ldr	r3, [pc, #248]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 80081e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081e6:	f003 0302 	and.w	r3, r3, #2
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1ee      	bne.n	80081cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80081ee:	7dfb      	ldrb	r3, [r7, #23]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d105      	bne.n	8008200 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081f4:	4b39      	ldr	r3, [pc, #228]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 80081f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f8:	4a38      	ldr	r2, [pc, #224]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 80081fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 80a1 	beq.w	800834c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800820a:	4b34      	ldr	r3, [pc, #208]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f003 030c 	and.w	r3, r3, #12
 8008212:	2b08      	cmp	r3, #8
 8008214:	d05c      	beq.n	80082d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	2b02      	cmp	r3, #2
 800821c:	d141      	bne.n	80082a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800821e:	4b31      	ldr	r3, [pc, #196]	@ (80082e4 <HAL_RCC_OscConfig+0x478>)
 8008220:	2200      	movs	r2, #0
 8008222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008224:	f7fb fb4e 	bl	80038c4 <HAL_GetTick>
 8008228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800822a:	e008      	b.n	800823e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800822c:	f7fb fb4a 	bl	80038c4 <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	2b02      	cmp	r3, #2
 8008238:	d901      	bls.n	800823e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e087      	b.n	800834e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800823e:	4b27      	ldr	r3, [pc, #156]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1f0      	bne.n	800822c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	69da      	ldr	r2, [r3, #28]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	431a      	orrs	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008258:	019b      	lsls	r3, r3, #6
 800825a:	431a      	orrs	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008260:	085b      	lsrs	r3, r3, #1
 8008262:	3b01      	subs	r3, #1
 8008264:	041b      	lsls	r3, r3, #16
 8008266:	431a      	orrs	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826c:	061b      	lsls	r3, r3, #24
 800826e:	491b      	ldr	r1, [pc, #108]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 8008270:	4313      	orrs	r3, r2
 8008272:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008274:	4b1b      	ldr	r3, [pc, #108]	@ (80082e4 <HAL_RCC_OscConfig+0x478>)
 8008276:	2201      	movs	r2, #1
 8008278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800827a:	f7fb fb23 	bl	80038c4 <HAL_GetTick>
 800827e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008280:	e008      	b.n	8008294 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008282:	f7fb fb1f 	bl	80038c4 <HAL_GetTick>
 8008286:	4602      	mov	r2, r0
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	2b02      	cmp	r3, #2
 800828e:	d901      	bls.n	8008294 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e05c      	b.n	800834e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008294:	4b11      	ldr	r3, [pc, #68]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d0f0      	beq.n	8008282 <HAL_RCC_OscConfig+0x416>
 80082a0:	e054      	b.n	800834c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082a2:	4b10      	ldr	r3, [pc, #64]	@ (80082e4 <HAL_RCC_OscConfig+0x478>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082a8:	f7fb fb0c 	bl	80038c4 <HAL_GetTick>
 80082ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082ae:	e008      	b.n	80082c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082b0:	f7fb fb08 	bl	80038c4 <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d901      	bls.n	80082c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e045      	b.n	800834e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082c2:	4b06      	ldr	r3, [pc, #24]	@ (80082dc <HAL_RCC_OscConfig+0x470>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1f0      	bne.n	80082b0 <HAL_RCC_OscConfig+0x444>
 80082ce:	e03d      	b.n	800834c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d107      	bne.n	80082e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e038      	b.n	800834e <HAL_RCC_OscConfig+0x4e2>
 80082dc:	40023800 	.word	0x40023800
 80082e0:	40007000 	.word	0x40007000
 80082e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80082e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008358 <HAL_RCC_OscConfig+0x4ec>)
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d028      	beq.n	8008348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008300:	429a      	cmp	r2, r3
 8008302:	d121      	bne.n	8008348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800830e:	429a      	cmp	r2, r3
 8008310:	d11a      	bne.n	8008348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008318:	4013      	ands	r3, r2
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800831e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008320:	4293      	cmp	r3, r2
 8008322:	d111      	bne.n	8008348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800832e:	085b      	lsrs	r3, r3, #1
 8008330:	3b01      	subs	r3, #1
 8008332:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008334:	429a      	cmp	r2, r3
 8008336:	d107      	bne.n	8008348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008342:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008344:	429a      	cmp	r2, r3
 8008346:	d001      	beq.n	800834c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e000      	b.n	800834e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	40023800 	.word	0x40023800

0800835c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e0cc      	b.n	800850a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008370:	4b68      	ldr	r3, [pc, #416]	@ (8008514 <HAL_RCC_ClockConfig+0x1b8>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0307 	and.w	r3, r3, #7
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	429a      	cmp	r2, r3
 800837c:	d90c      	bls.n	8008398 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800837e:	4b65      	ldr	r3, [pc, #404]	@ (8008514 <HAL_RCC_ClockConfig+0x1b8>)
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	b2d2      	uxtb	r2, r2
 8008384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008386:	4b63      	ldr	r3, [pc, #396]	@ (8008514 <HAL_RCC_ClockConfig+0x1b8>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0307 	and.w	r3, r3, #7
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	429a      	cmp	r2, r3
 8008392:	d001      	beq.n	8008398 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e0b8      	b.n	800850a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d020      	beq.n	80083e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0304 	and.w	r3, r3, #4
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d005      	beq.n	80083bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083b0:	4b59      	ldr	r3, [pc, #356]	@ (8008518 <HAL_RCC_ClockConfig+0x1bc>)
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	4a58      	ldr	r2, [pc, #352]	@ (8008518 <HAL_RCC_ClockConfig+0x1bc>)
 80083b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80083ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0308 	and.w	r3, r3, #8
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d005      	beq.n	80083d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80083c8:	4b53      	ldr	r3, [pc, #332]	@ (8008518 <HAL_RCC_ClockConfig+0x1bc>)
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	4a52      	ldr	r2, [pc, #328]	@ (8008518 <HAL_RCC_ClockConfig+0x1bc>)
 80083ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80083d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083d4:	4b50      	ldr	r3, [pc, #320]	@ (8008518 <HAL_RCC_ClockConfig+0x1bc>)
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	494d      	ldr	r1, [pc, #308]	@ (8008518 <HAL_RCC_ClockConfig+0x1bc>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d044      	beq.n	800847c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d107      	bne.n	800840a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083fa:	4b47      	ldr	r3, [pc, #284]	@ (8008518 <HAL_RCC_ClockConfig+0x1bc>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d119      	bne.n	800843a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e07f      	b.n	800850a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	2b02      	cmp	r3, #2
 8008410:	d003      	beq.n	800841a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008416:	2b03      	cmp	r3, #3
 8008418:	d107      	bne.n	800842a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800841a:	4b3f      	ldr	r3, [pc, #252]	@ (8008518 <HAL_RCC_ClockConfig+0x1bc>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d109      	bne.n	800843a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e06f      	b.n	800850a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800842a:	4b3b      	ldr	r3, [pc, #236]	@ (8008518 <HAL_RCC_ClockConfig+0x1bc>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0302 	and.w	r3, r3, #2
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e067      	b.n	800850a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800843a:	4b37      	ldr	r3, [pc, #220]	@ (8008518 <HAL_RCC_ClockConfig+0x1bc>)
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f023 0203 	bic.w	r2, r3, #3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	4934      	ldr	r1, [pc, #208]	@ (8008518 <HAL_RCC_ClockConfig+0x1bc>)
 8008448:	4313      	orrs	r3, r2
 800844a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800844c:	f7fb fa3a 	bl	80038c4 <HAL_GetTick>
 8008450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008452:	e00a      	b.n	800846a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008454:	f7fb fa36 	bl	80038c4 <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008462:	4293      	cmp	r3, r2
 8008464:	d901      	bls.n	800846a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e04f      	b.n	800850a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800846a:	4b2b      	ldr	r3, [pc, #172]	@ (8008518 <HAL_RCC_ClockConfig+0x1bc>)
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f003 020c 	and.w	r2, r3, #12
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	429a      	cmp	r2, r3
 800847a:	d1eb      	bne.n	8008454 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800847c:	4b25      	ldr	r3, [pc, #148]	@ (8008514 <HAL_RCC_ClockConfig+0x1b8>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0307 	and.w	r3, r3, #7
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d20c      	bcs.n	80084a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800848a:	4b22      	ldr	r3, [pc, #136]	@ (8008514 <HAL_RCC_ClockConfig+0x1b8>)
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	b2d2      	uxtb	r2, r2
 8008490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008492:	4b20      	ldr	r3, [pc, #128]	@ (8008514 <HAL_RCC_ClockConfig+0x1b8>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0307 	and.w	r3, r3, #7
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	429a      	cmp	r2, r3
 800849e:	d001      	beq.n	80084a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e032      	b.n	800850a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0304 	and.w	r3, r3, #4
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d008      	beq.n	80084c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084b0:	4b19      	ldr	r3, [pc, #100]	@ (8008518 <HAL_RCC_ClockConfig+0x1bc>)
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	4916      	ldr	r1, [pc, #88]	@ (8008518 <HAL_RCC_ClockConfig+0x1bc>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0308 	and.w	r3, r3, #8
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d009      	beq.n	80084e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084ce:	4b12      	ldr	r3, [pc, #72]	@ (8008518 <HAL_RCC_ClockConfig+0x1bc>)
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	00db      	lsls	r3, r3, #3
 80084dc:	490e      	ldr	r1, [pc, #56]	@ (8008518 <HAL_RCC_ClockConfig+0x1bc>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80084e2:	f000 f82d 	bl	8008540 <HAL_RCC_GetSysClockFreq>
 80084e6:	4602      	mov	r2, r0
 80084e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008518 <HAL_RCC_ClockConfig+0x1bc>)
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	091b      	lsrs	r3, r3, #4
 80084ee:	f003 030f 	and.w	r3, r3, #15
 80084f2:	490a      	ldr	r1, [pc, #40]	@ (800851c <HAL_RCC_ClockConfig+0x1c0>)
 80084f4:	5ccb      	ldrb	r3, [r1, r3]
 80084f6:	fa22 f303 	lsr.w	r3, r2, r3
 80084fa:	4a09      	ldr	r2, [pc, #36]	@ (8008520 <HAL_RCC_ClockConfig+0x1c4>)
 80084fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80084fe:	4b09      	ldr	r3, [pc, #36]	@ (8008524 <HAL_RCC_ClockConfig+0x1c8>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4618      	mov	r0, r3
 8008504:	f7fb f99a 	bl	800383c <HAL_InitTick>

  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	40023c00 	.word	0x40023c00
 8008518:	40023800 	.word	0x40023800
 800851c:	080111f4 	.word	0x080111f4
 8008520:	20000054 	.word	0x20000054
 8008524:	20000058 	.word	0x20000058

08008528 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008528:	b480      	push	{r7}
 800852a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800852c:	4b03      	ldr	r3, [pc, #12]	@ (800853c <HAL_RCC_EnableCSS+0x14>)
 800852e:	2201      	movs	r2, #1
 8008530:	601a      	str	r2, [r3, #0]
}
 8008532:	bf00      	nop
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	4247004c 	.word	0x4247004c

08008540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008544:	b094      	sub	sp, #80	@ 0x50
 8008546:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008548:	2300      	movs	r3, #0
 800854a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800854c:	2300      	movs	r3, #0
 800854e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008554:	2300      	movs	r3, #0
 8008556:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008558:	4b79      	ldr	r3, [pc, #484]	@ (8008740 <HAL_RCC_GetSysClockFreq+0x200>)
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f003 030c 	and.w	r3, r3, #12
 8008560:	2b08      	cmp	r3, #8
 8008562:	d00d      	beq.n	8008580 <HAL_RCC_GetSysClockFreq+0x40>
 8008564:	2b08      	cmp	r3, #8
 8008566:	f200 80e1 	bhi.w	800872c <HAL_RCC_GetSysClockFreq+0x1ec>
 800856a:	2b00      	cmp	r3, #0
 800856c:	d002      	beq.n	8008574 <HAL_RCC_GetSysClockFreq+0x34>
 800856e:	2b04      	cmp	r3, #4
 8008570:	d003      	beq.n	800857a <HAL_RCC_GetSysClockFreq+0x3a>
 8008572:	e0db      	b.n	800872c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008574:	4b73      	ldr	r3, [pc, #460]	@ (8008744 <HAL_RCC_GetSysClockFreq+0x204>)
 8008576:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008578:	e0db      	b.n	8008732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800857a:	4b73      	ldr	r3, [pc, #460]	@ (8008748 <HAL_RCC_GetSysClockFreq+0x208>)
 800857c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800857e:	e0d8      	b.n	8008732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008580:	4b6f      	ldr	r3, [pc, #444]	@ (8008740 <HAL_RCC_GetSysClockFreq+0x200>)
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008588:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800858a:	4b6d      	ldr	r3, [pc, #436]	@ (8008740 <HAL_RCC_GetSysClockFreq+0x200>)
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d063      	beq.n	800865e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008596:	4b6a      	ldr	r3, [pc, #424]	@ (8008740 <HAL_RCC_GetSysClockFreq+0x200>)
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	099b      	lsrs	r3, r3, #6
 800859c:	2200      	movs	r2, #0
 800859e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80085a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80085aa:	2300      	movs	r3, #0
 80085ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80085b2:	4622      	mov	r2, r4
 80085b4:	462b      	mov	r3, r5
 80085b6:	f04f 0000 	mov.w	r0, #0
 80085ba:	f04f 0100 	mov.w	r1, #0
 80085be:	0159      	lsls	r1, r3, #5
 80085c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80085c4:	0150      	lsls	r0, r2, #5
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	4621      	mov	r1, r4
 80085cc:	1a51      	subs	r1, r2, r1
 80085ce:	6139      	str	r1, [r7, #16]
 80085d0:	4629      	mov	r1, r5
 80085d2:	eb63 0301 	sbc.w	r3, r3, r1
 80085d6:	617b      	str	r3, [r7, #20]
 80085d8:	f04f 0200 	mov.w	r2, #0
 80085dc:	f04f 0300 	mov.w	r3, #0
 80085e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085e4:	4659      	mov	r1, fp
 80085e6:	018b      	lsls	r3, r1, #6
 80085e8:	4651      	mov	r1, sl
 80085ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80085ee:	4651      	mov	r1, sl
 80085f0:	018a      	lsls	r2, r1, #6
 80085f2:	4651      	mov	r1, sl
 80085f4:	ebb2 0801 	subs.w	r8, r2, r1
 80085f8:	4659      	mov	r1, fp
 80085fa:	eb63 0901 	sbc.w	r9, r3, r1
 80085fe:	f04f 0200 	mov.w	r2, #0
 8008602:	f04f 0300 	mov.w	r3, #0
 8008606:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800860a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800860e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008612:	4690      	mov	r8, r2
 8008614:	4699      	mov	r9, r3
 8008616:	4623      	mov	r3, r4
 8008618:	eb18 0303 	adds.w	r3, r8, r3
 800861c:	60bb      	str	r3, [r7, #8]
 800861e:	462b      	mov	r3, r5
 8008620:	eb49 0303 	adc.w	r3, r9, r3
 8008624:	60fb      	str	r3, [r7, #12]
 8008626:	f04f 0200 	mov.w	r2, #0
 800862a:	f04f 0300 	mov.w	r3, #0
 800862e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008632:	4629      	mov	r1, r5
 8008634:	024b      	lsls	r3, r1, #9
 8008636:	4621      	mov	r1, r4
 8008638:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800863c:	4621      	mov	r1, r4
 800863e:	024a      	lsls	r2, r1, #9
 8008640:	4610      	mov	r0, r2
 8008642:	4619      	mov	r1, r3
 8008644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008646:	2200      	movs	r2, #0
 8008648:	62bb      	str	r3, [r7, #40]	@ 0x28
 800864a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800864c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008650:	f7f8 f9fc 	bl	8000a4c <__aeabi_uldivmod>
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	4613      	mov	r3, r2
 800865a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800865c:	e058      	b.n	8008710 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800865e:	4b38      	ldr	r3, [pc, #224]	@ (8008740 <HAL_RCC_GetSysClockFreq+0x200>)
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	099b      	lsrs	r3, r3, #6
 8008664:	2200      	movs	r2, #0
 8008666:	4618      	mov	r0, r3
 8008668:	4611      	mov	r1, r2
 800866a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800866e:	623b      	str	r3, [r7, #32]
 8008670:	2300      	movs	r3, #0
 8008672:	627b      	str	r3, [r7, #36]	@ 0x24
 8008674:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008678:	4642      	mov	r2, r8
 800867a:	464b      	mov	r3, r9
 800867c:	f04f 0000 	mov.w	r0, #0
 8008680:	f04f 0100 	mov.w	r1, #0
 8008684:	0159      	lsls	r1, r3, #5
 8008686:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800868a:	0150      	lsls	r0, r2, #5
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4641      	mov	r1, r8
 8008692:	ebb2 0a01 	subs.w	sl, r2, r1
 8008696:	4649      	mov	r1, r9
 8008698:	eb63 0b01 	sbc.w	fp, r3, r1
 800869c:	f04f 0200 	mov.w	r2, #0
 80086a0:	f04f 0300 	mov.w	r3, #0
 80086a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80086a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80086ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80086b0:	ebb2 040a 	subs.w	r4, r2, sl
 80086b4:	eb63 050b 	sbc.w	r5, r3, fp
 80086b8:	f04f 0200 	mov.w	r2, #0
 80086bc:	f04f 0300 	mov.w	r3, #0
 80086c0:	00eb      	lsls	r3, r5, #3
 80086c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80086c6:	00e2      	lsls	r2, r4, #3
 80086c8:	4614      	mov	r4, r2
 80086ca:	461d      	mov	r5, r3
 80086cc:	4643      	mov	r3, r8
 80086ce:	18e3      	adds	r3, r4, r3
 80086d0:	603b      	str	r3, [r7, #0]
 80086d2:	464b      	mov	r3, r9
 80086d4:	eb45 0303 	adc.w	r3, r5, r3
 80086d8:	607b      	str	r3, [r7, #4]
 80086da:	f04f 0200 	mov.w	r2, #0
 80086de:	f04f 0300 	mov.w	r3, #0
 80086e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80086e6:	4629      	mov	r1, r5
 80086e8:	028b      	lsls	r3, r1, #10
 80086ea:	4621      	mov	r1, r4
 80086ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80086f0:	4621      	mov	r1, r4
 80086f2:	028a      	lsls	r2, r1, #10
 80086f4:	4610      	mov	r0, r2
 80086f6:	4619      	mov	r1, r3
 80086f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086fa:	2200      	movs	r2, #0
 80086fc:	61bb      	str	r3, [r7, #24]
 80086fe:	61fa      	str	r2, [r7, #28]
 8008700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008704:	f7f8 f9a2 	bl	8000a4c <__aeabi_uldivmod>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4613      	mov	r3, r2
 800870e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008710:	4b0b      	ldr	r3, [pc, #44]	@ (8008740 <HAL_RCC_GetSysClockFreq+0x200>)
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	0c1b      	lsrs	r3, r3, #16
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	3301      	adds	r3, #1
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008720:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008724:	fbb2 f3f3 	udiv	r3, r2, r3
 8008728:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800872a:	e002      	b.n	8008732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800872c:	4b05      	ldr	r3, [pc, #20]	@ (8008744 <HAL_RCC_GetSysClockFreq+0x204>)
 800872e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008734:	4618      	mov	r0, r3
 8008736:	3750      	adds	r7, #80	@ 0x50
 8008738:	46bd      	mov	sp, r7
 800873a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800873e:	bf00      	nop
 8008740:	40023800 	.word	0x40023800
 8008744:	00f42400 	.word	0x00f42400
 8008748:	007a1200 	.word	0x007a1200

0800874c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800874c:	b480      	push	{r7}
 800874e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008750:	4b03      	ldr	r3, [pc, #12]	@ (8008760 <HAL_RCC_GetHCLKFreq+0x14>)
 8008752:	681b      	ldr	r3, [r3, #0]
}
 8008754:	4618      	mov	r0, r3
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	20000054 	.word	0x20000054

08008764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008768:	f7ff fff0 	bl	800874c <HAL_RCC_GetHCLKFreq>
 800876c:	4602      	mov	r2, r0
 800876e:	4b05      	ldr	r3, [pc, #20]	@ (8008784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	0a9b      	lsrs	r3, r3, #10
 8008774:	f003 0307 	and.w	r3, r3, #7
 8008778:	4903      	ldr	r1, [pc, #12]	@ (8008788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800877a:	5ccb      	ldrb	r3, [r1, r3]
 800877c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008780:	4618      	mov	r0, r3
 8008782:	bd80      	pop	{r7, pc}
 8008784:	40023800 	.word	0x40023800
 8008788:	08011204 	.word	0x08011204

0800878c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008790:	f7ff ffdc 	bl	800874c <HAL_RCC_GetHCLKFreq>
 8008794:	4602      	mov	r2, r0
 8008796:	4b05      	ldr	r3, [pc, #20]	@ (80087ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	0b5b      	lsrs	r3, r3, #13
 800879c:	f003 0307 	and.w	r3, r3, #7
 80087a0:	4903      	ldr	r1, [pc, #12]	@ (80087b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80087a2:	5ccb      	ldrb	r3, [r1, r3]
 80087a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	40023800 	.word	0x40023800
 80087b0:	08011204 	.word	0x08011204

080087b4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80087b8:	4b06      	ldr	r3, [pc, #24]	@ (80087d4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087c0:	2b80      	cmp	r3, #128	@ 0x80
 80087c2:	d104      	bne.n	80087ce <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80087c4:	f000 f80a 	bl	80087dc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80087c8:	4b03      	ldr	r3, [pc, #12]	@ (80087d8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80087ca:	2280      	movs	r2, #128	@ 0x80
 80087cc:	701a      	strb	r2, [r3, #0]
  }
}
 80087ce:	bf00      	nop
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	40023800 	.word	0x40023800
 80087d8:	4002380e 	.word	0x4002380e

080087dc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80087e0:	bf00      	nop
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
	...

080087ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80087f4:	2300      	movs	r3, #0
 80087f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80087f8:	2300      	movs	r3, #0
 80087fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0301 	and.w	r3, r3, #1
 8008804:	2b00      	cmp	r3, #0
 8008806:	d105      	bne.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008810:	2b00      	cmp	r3, #0
 8008812:	d035      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008814:	4b62      	ldr	r3, [pc, #392]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008816:	2200      	movs	r2, #0
 8008818:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800881a:	f7fb f853 	bl	80038c4 <HAL_GetTick>
 800881e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008820:	e008      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008822:	f7fb f84f 	bl	80038c4 <HAL_GetTick>
 8008826:	4602      	mov	r2, r0
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	2b02      	cmp	r3, #2
 800882e:	d901      	bls.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	e0b0      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008834:	4b5b      	ldr	r3, [pc, #364]	@ (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1f0      	bne.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	019a      	lsls	r2, r3, #6
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	071b      	lsls	r3, r3, #28
 800884c:	4955      	ldr	r1, [pc, #340]	@ (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800884e:	4313      	orrs	r3, r2
 8008850:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008854:	4b52      	ldr	r3, [pc, #328]	@ (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008856:	2201      	movs	r2, #1
 8008858:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800885a:	f7fb f833 	bl	80038c4 <HAL_GetTick>
 800885e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008860:	e008      	b.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008862:	f7fb f82f 	bl	80038c4 <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	2b02      	cmp	r3, #2
 800886e:	d901      	bls.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e090      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008874:	4b4b      	ldr	r3, [pc, #300]	@ (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d0f0      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0302 	and.w	r3, r3, #2
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 8083 	beq.w	8008994 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800888e:	2300      	movs	r3, #0
 8008890:	60fb      	str	r3, [r7, #12]
 8008892:	4b44      	ldr	r3, [pc, #272]	@ (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008896:	4a43      	ldr	r2, [pc, #268]	@ (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800889c:	6413      	str	r3, [r2, #64]	@ 0x40
 800889e:	4b41      	ldr	r3, [pc, #260]	@ (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80088aa:	4b3f      	ldr	r3, [pc, #252]	@ (80089a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a3e      	ldr	r2, [pc, #248]	@ (80089a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80088b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088b6:	f7fb f805 	bl	80038c4 <HAL_GetTick>
 80088ba:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80088bc:	e008      	b.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088be:	f7fb f801 	bl	80038c4 <HAL_GetTick>
 80088c2:	4602      	mov	r2, r0
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d901      	bls.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e062      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80088d0:	4b35      	ldr	r3, [pc, #212]	@ (80089a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d0f0      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80088dc:	4b31      	ldr	r3, [pc, #196]	@ (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088e4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d02f      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d028      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80088fa:	4b2a      	ldr	r3, [pc, #168]	@ (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008902:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008904:	4b29      	ldr	r3, [pc, #164]	@ (80089ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008906:	2201      	movs	r2, #1
 8008908:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800890a:	4b28      	ldr	r3, [pc, #160]	@ (80089ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800890c:	2200      	movs	r2, #0
 800890e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008910:	4a24      	ldr	r2, [pc, #144]	@ (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008916:	4b23      	ldr	r3, [pc, #140]	@ (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800891a:	f003 0301 	and.w	r3, r3, #1
 800891e:	2b01      	cmp	r3, #1
 8008920:	d114      	bne.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008922:	f7fa ffcf 	bl	80038c4 <HAL_GetTick>
 8008926:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008928:	e00a      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800892a:	f7fa ffcb 	bl	80038c4 <HAL_GetTick>
 800892e:	4602      	mov	r2, r0
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008938:	4293      	cmp	r3, r2
 800893a:	d901      	bls.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e02a      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008940:	4b18      	ldr	r3, [pc, #96]	@ (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008944:	f003 0302 	and.w	r3, r3, #2
 8008948:	2b00      	cmp	r3, #0
 800894a:	d0ee      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008954:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008958:	d10d      	bne.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800895a:	4b12      	ldr	r3, [pc, #72]	@ (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800896a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800896e:	490d      	ldr	r1, [pc, #52]	@ (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008970:	4313      	orrs	r3, r2
 8008972:	608b      	str	r3, [r1, #8]
 8008974:	e005      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008976:	4b0b      	ldr	r3, [pc, #44]	@ (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	4a0a      	ldr	r2, [pc, #40]	@ (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800897c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008980:	6093      	str	r3, [r2, #8]
 8008982:	4b08      	ldr	r3, [pc, #32]	@ (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008984:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800898e:	4905      	ldr	r1, [pc, #20]	@ (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008990:	4313      	orrs	r3, r2
 8008992:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3718      	adds	r7, #24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	42470068 	.word	0x42470068
 80089a4:	40023800 	.word	0x40023800
 80089a8:	40007000 	.word	0x40007000
 80089ac:	42470e40 	.word	0x42470e40

080089b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e073      	b.n	8008aaa <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	7f5b      	ldrb	r3, [r3, #29]
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d105      	bne.n	80089d8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7f9 ff6c 	bl	80028b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2202      	movs	r2, #2
 80089dc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	f003 0310 	and.w	r3, r3, #16
 80089e8:	2b10      	cmp	r3, #16
 80089ea:	d055      	beq.n	8008a98 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	22ca      	movs	r2, #202	@ 0xca
 80089f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2253      	movs	r2, #83	@ 0x53
 80089fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fa49 	bl	8008e94 <RTC_EnterInitMode>
 8008a02:	4603      	mov	r3, r0
 8008a04:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d12c      	bne.n	8008a66 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	6812      	ldr	r2, [r2, #0]
 8008a16:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008a1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a1e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6899      	ldr	r1, [r3, #8]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	431a      	orrs	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	68d2      	ldr	r2, [r2, #12]
 8008a46:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6919      	ldr	r1, [r3, #16]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	041a      	lsls	r2, r3, #16
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	430a      	orrs	r2, r1
 8008a5a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fa50 	bl	8008f02 <RTC_ExitInitMode>
 8008a62:	4603      	mov	r3, r0
 8008a64:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d110      	bne.n	8008a8e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008a7a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	699a      	ldr	r2, [r3, #24]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	22ff      	movs	r2, #255	@ 0xff
 8008a94:	625a      	str	r2, [r3, #36]	@ 0x24
 8008a96:	e001      	b.n	8008a9c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d102      	bne.n	8008aa8 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008ab2:	b590      	push	{r4, r7, lr}
 8008ab4:	b087      	sub	sp, #28
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	60b9      	str	r1, [r7, #8]
 8008abc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	7f1b      	ldrb	r3, [r3, #28]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d101      	bne.n	8008ace <HAL_RTC_SetTime+0x1c>
 8008aca:	2302      	movs	r3, #2
 8008acc:	e087      	b.n	8008bde <HAL_RTC_SetTime+0x12c>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d126      	bne.n	8008b2e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d102      	bne.n	8008af4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2200      	movs	r2, #0
 8008af2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 fa27 	bl	8008f4c <RTC_ByteToBcd2>
 8008afe:	4603      	mov	r3, r0
 8008b00:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	785b      	ldrb	r3, [r3, #1]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 fa20 	bl	8008f4c <RTC_ByteToBcd2>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008b10:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	789b      	ldrb	r3, [r3, #2]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 fa18 	bl	8008f4c <RTC_ByteToBcd2>
 8008b1c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b1e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	78db      	ldrb	r3, [r3, #3]
 8008b26:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	617b      	str	r3, [r7, #20]
 8008b2c:	e018      	b.n	8008b60 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d102      	bne.n	8008b42 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	785b      	ldrb	r3, [r3, #1]
 8008b4c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008b4e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008b54:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	78db      	ldrb	r3, [r3, #3]
 8008b5a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	22ca      	movs	r2, #202	@ 0xca
 8008b66:	625a      	str	r2, [r3, #36]	@ 0x24
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2253      	movs	r2, #83	@ 0x53
 8008b6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f000 f98f 	bl	8008e94 <RTC_EnterInitMode>
 8008b76:	4603      	mov	r3, r0
 8008b78:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008b7a:	7cfb      	ldrb	r3, [r7, #19]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d120      	bne.n	8008bc2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8008b8a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008b8e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689a      	ldr	r2, [r3, #8]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008b9e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6899      	ldr	r1, [r3, #8]
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	68da      	ldr	r2, [r3, #12]
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	430a      	orrs	r2, r1
 8008bb6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f000 f9a2 	bl	8008f02 <RTC_ExitInitMode>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008bc2:	7cfb      	ldrb	r3, [r7, #19]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d102      	bne.n	8008bce <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	22ff      	movs	r2, #255	@ 0xff
 8008bd4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	771a      	strb	r2, [r3, #28]

  return status;
 8008bdc:	7cfb      	ldrb	r3, [r7, #19]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	371c      	adds	r7, #28
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd90      	pop	{r4, r7, pc}

08008be6 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b086      	sub	sp, #24
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	60f8      	str	r0, [r7, #12]
 8008bee:	60b9      	str	r1, [r7, #8]
 8008bf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8008c18:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008c1c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	0c1b      	lsrs	r3, r3, #16
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	0a1b      	lsrs	r3, r3, #8
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	0d9b      	lsrs	r3, r3, #22
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d11a      	bne.n	8008c98 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 f98e 	bl	8008f88 <RTC_Bcd2ToByte>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	461a      	mov	r2, r3
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	785b      	ldrb	r3, [r3, #1]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 f985 	bl	8008f88 <RTC_Bcd2ToByte>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	461a      	mov	r2, r3
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	789b      	ldrb	r3, [r3, #2]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f000 f97c 	bl	8008f88 <RTC_Bcd2ToByte>
 8008c90:	4603      	mov	r3, r0
 8008c92:	461a      	mov	r2, r3
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008ca2:	b590      	push	{r4, r7, lr}
 8008ca4:	b087      	sub	sp, #28
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	60f8      	str	r0, [r7, #12]
 8008caa:	60b9      	str	r1, [r7, #8]
 8008cac:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	7f1b      	ldrb	r3, [r3, #28]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d101      	bne.n	8008cbe <HAL_RTC_SetDate+0x1c>
 8008cba:	2302      	movs	r3, #2
 8008cbc:	e071      	b.n	8008da2 <HAL_RTC_SetDate+0x100>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10e      	bne.n	8008cee <HAL_RTC_SetDate+0x4c>
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	785b      	ldrb	r3, [r3, #1]
 8008cd4:	f003 0310 	and.w	r3, r3, #16
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d008      	beq.n	8008cee <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	785b      	ldrb	r3, [r3, #1]
 8008ce0:	f023 0310 	bic.w	r3, r3, #16
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	330a      	adds	r3, #10
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d11c      	bne.n	8008d2e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	78db      	ldrb	r3, [r3, #3]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f000 f927 	bl	8008f4c <RTC_ByteToBcd2>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	785b      	ldrb	r3, [r3, #1]
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 f920 	bl	8008f4c <RTC_ByteToBcd2>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d10:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	789b      	ldrb	r3, [r3, #2]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 f918 	bl	8008f4c <RTC_ByteToBcd2>
 8008d1c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008d1e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	617b      	str	r3, [r7, #20]
 8008d2c:	e00e      	b.n	8008d4c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	78db      	ldrb	r3, [r3, #3]
 8008d32:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	785b      	ldrb	r3, [r3, #1]
 8008d38:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d3a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008d40:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	22ca      	movs	r2, #202	@ 0xca
 8008d52:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2253      	movs	r2, #83	@ 0x53
 8008d5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f000 f899 	bl	8008e94 <RTC_EnterInitMode>
 8008d62:	4603      	mov	r3, r0
 8008d64:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008d66:	7cfb      	ldrb	r3, [r7, #19]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10c      	bne.n	8008d86 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008d76:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008d7a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f000 f8c0 	bl	8008f02 <RTC_ExitInitMode>
 8008d82:	4603      	mov	r3, r0
 8008d84:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008d86:	7cfb      	ldrb	r3, [r7, #19]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d102      	bne.n	8008d92 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	22ff      	movs	r2, #255	@ 0xff
 8008d98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	771a      	strb	r2, [r3, #28]

  return status;
 8008da0:	7cfb      	ldrb	r3, [r7, #19]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	371c      	adds	r7, #28
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd90      	pop	{r4, r7, pc}

08008daa <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b086      	sub	sp, #24
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	60f8      	str	r0, [r7, #12]
 8008db2:	60b9      	str	r1, [r7, #8]
 8008db4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008db6:	2300      	movs	r3, #0
 8008db8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008dc4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008dc8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	0c1b      	lsrs	r3, r3, #16
 8008dce:	b2da      	uxtb	r2, r3
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	0a1b      	lsrs	r3, r3, #8
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	f003 031f 	and.w	r3, r3, #31
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008dec:	b2da      	uxtb	r2, r3
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	0b5b      	lsrs	r3, r3, #13
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	f003 0307 	and.w	r3, r3, #7
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d11a      	bne.n	8008e3e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	78db      	ldrb	r3, [r3, #3]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f000 f8bb 	bl	8008f88 <RTC_Bcd2ToByte>
 8008e12:	4603      	mov	r3, r0
 8008e14:	461a      	mov	r2, r3
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	785b      	ldrb	r3, [r3, #1]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 f8b2 	bl	8008f88 <RTC_Bcd2ToByte>
 8008e24:	4603      	mov	r3, r0
 8008e26:	461a      	mov	r2, r3
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	789b      	ldrb	r3, [r3, #2]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 f8a9 	bl	8008f88 <RTC_Bcd2ToByte>
 8008e36:	4603      	mov	r3, r0
 8008e38:	461a      	mov	r2, r3
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e50:	2300      	movs	r3, #0
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a0d      	ldr	r2, [pc, #52]	@ (8008e90 <HAL_RTC_WaitForSynchro+0x48>)
 8008e5a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e5c:	f7fa fd32 	bl	80038c4 <HAL_GetTick>
 8008e60:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008e62:	e009      	b.n	8008e78 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e64:	f7fa fd2e 	bl	80038c4 <HAL_GetTick>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e72:	d901      	bls.n	8008e78 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e007      	b.n	8008e88 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	f003 0320 	and.w	r3, r3, #32
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d0ee      	beq.n	8008e64 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	00017f5f 	.word	0x00017f5f

08008e94 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d122      	bne.n	8008ef8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68da      	ldr	r2, [r3, #12]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008ec0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ec2:	f7fa fcff 	bl	80038c4 <HAL_GetTick>
 8008ec6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008ec8:	e00c      	b.n	8008ee4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008eca:	f7fa fcfb 	bl	80038c4 <HAL_GetTick>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ed8:	d904      	bls.n	8008ee4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2204      	movs	r2, #4
 8008ede:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d102      	bne.n	8008ef8 <RTC_EnterInitMode+0x64>
 8008ef2:	7bfb      	ldrb	r3, [r7, #15]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d1e8      	bne.n	8008eca <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b084      	sub	sp, #16
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68da      	ldr	r2, [r3, #12]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f1c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	f003 0320 	and.w	r3, r3, #32
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10a      	bne.n	8008f42 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7ff ff8b 	bl	8008e48 <HAL_RTC_WaitForSynchro>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d004      	beq.n	8008f42 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2204      	movs	r2, #4
 8008f3c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008f56:	2300      	movs	r3, #0
 8008f58:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8008f5a:	e005      	b.n	8008f68 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8008f62:	79fb      	ldrb	r3, [r7, #7]
 8008f64:	3b0a      	subs	r3, #10
 8008f66:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008f68:	79fb      	ldrb	r3, [r7, #7]
 8008f6a:	2b09      	cmp	r3, #9
 8008f6c:	d8f6      	bhi.n	8008f5c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	011b      	lsls	r3, r3, #4
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	79fb      	ldrb	r3, [r7, #7]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	b2db      	uxtb	r3, r3
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8008f96:	79fb      	ldrb	r3, [r7, #7]
 8008f98:	091b      	lsrs	r3, r3, #4
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	005b      	lsls	r3, r3, #1
 8008fa6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	f003 030f 	and.w	r3, r3, #15
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	4413      	add	r3, r2
 8008fb6:	b2db      	uxtb	r3, r3
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e022      	b.n	800901c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d105      	bne.n	8008fee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7f9 fde1 	bl	8002bb0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2203      	movs	r2, #3
 8008ff2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f814 	bl	8009024 <HAL_SD_InitCard>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d001      	beq.n	8009006 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e00a      	b.n	800901c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009024:	b5b0      	push	{r4, r5, r7, lr}
 8009026:	b08e      	sub	sp, #56	@ 0x38
 8009028:	af04      	add	r7, sp, #16
 800902a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800902c:	2300      	movs	r3, #0
 800902e:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009030:	2300      	movs	r3, #0
 8009032:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009034:	2300      	movs	r3, #0
 8009036:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009038:	2300      	movs	r3, #0
 800903a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800903c:	2300      	movs	r3, #0
 800903e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009040:	2376      	movs	r3, #118	@ 0x76
 8009042:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681d      	ldr	r5, [r3, #0]
 8009048:	466c      	mov	r4, sp
 800904a:	f107 0318 	add.w	r3, r7, #24
 800904e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009052:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009056:	f107 030c 	add.w	r3, r7, #12
 800905a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800905c:	4628      	mov	r0, r5
 800905e:	f003 f809 	bl	800c074 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009062:	4b2a      	ldr	r3, [pc, #168]	@ (800910c <HAL_SD_InitCard+0xe8>)
 8009064:	2200      	movs	r2, #0
 8009066:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4618      	mov	r0, r3
 800906e:	f003 f84a 	bl	800c106 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009072:	4b26      	ldr	r3, [pc, #152]	@ (800910c <HAL_SD_InitCard+0xe8>)
 8009074:	2201      	movs	r2, #1
 8009076:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009078:	2002      	movs	r0, #2
 800907a:	f7fa fc2f 	bl	80038dc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 ff6c 	bl	8009f5c <SD_PowerON>
 8009084:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00b      	beq.n	80090a4 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909a:	431a      	orrs	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e02e      	b.n	8009102 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 fe8b 	bl	8009dc0 <SD_InitCard>
 80090aa:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80090ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00b      	beq.n	80090ca <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c0:	431a      	orrs	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e01b      	b.n	8009102 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80090d2:	4618      	mov	r0, r3
 80090d4:	f003 f8a9 	bl	800c22a <SDMMC_CmdBlockLength>
 80090d8:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80090da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00f      	beq.n	8009100 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a0a      	ldr	r2, [pc, #40]	@ (8009110 <HAL_SD_InitCard+0xec>)
 80090e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ee:	431a      	orrs	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e000      	b.n	8009102 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3728      	adds	r7, #40	@ 0x28
 8009106:	46bd      	mov	sp, r7
 8009108:	bdb0      	pop	{r4, r5, r7, pc}
 800910a:	bf00      	nop
 800910c:	422580a0 	.word	0x422580a0
 8009110:	004005ff 	.word	0x004005ff

08009114 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08c      	sub	sp, #48	@ 0x30
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d107      	bne.n	800913c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009130:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e0c0      	b.n	80092be <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009142:	b2db      	uxtb	r3, r3
 8009144:	2b01      	cmp	r3, #1
 8009146:	f040 80b9 	bne.w	80092bc <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009150:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	441a      	add	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800915a:	429a      	cmp	r2, r3
 800915c:	d907      	bls.n	800916e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009162:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e0a7      	b.n	80092be <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2203      	movs	r2, #3
 8009172:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2200      	movs	r2, #0
 800917c:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	6812      	ldr	r2, [r2, #0]
 8009188:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 800918c:	f043 0302 	orr.w	r3, r3, #2
 8009190:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009196:	4a4c      	ldr	r2, [pc, #304]	@ (80092c8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8009198:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800919e:	4a4b      	ldr	r2, [pc, #300]	@ (80092cc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80091a0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a6:	2200      	movs	r2, #0
 80091a8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ae:	2200      	movs	r2, #0
 80091b0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c2:	689a      	ldr	r2, [r3, #8]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	430a      	orrs	r2, r1
 80091cc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3380      	adds	r3, #128	@ 0x80
 80091d8:	4619      	mov	r1, r3
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	025b      	lsls	r3, r3, #9
 80091e0:	089b      	lsrs	r3, r3, #2
 80091e2:	f7fc fa23 	bl	800562c <HAL_DMA_Start_IT>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d017      	beq.n	800921c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80091fa:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a33      	ldr	r2, [pc, #204]	@ (80092d0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009202:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009208:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	e050      	b.n	80092be <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800921c:	4b2d      	ldr	r3, [pc, #180]	@ (80092d4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800921e:	2201      	movs	r2, #1
 8009220:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009226:	2b01      	cmp	r3, #1
 8009228:	d002      	beq.n	8009230 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800922a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922c:	025b      	lsls	r3, r3, #9
 800922e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009230:	f04f 33ff 	mov.w	r3, #4294967295
 8009234:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	025b      	lsls	r3, r3, #9
 800923a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800923c:	2390      	movs	r3, #144	@ 0x90
 800923e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009240:	2302      	movs	r3, #2
 8009242:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009244:	2300      	movs	r3, #0
 8009246:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009248:	2301      	movs	r3, #1
 800924a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f107 0210 	add.w	r2, r7, #16
 8009254:	4611      	mov	r1, r2
 8009256:	4618      	mov	r0, r3
 8009258:	f002 ffbb 	bl	800c1d2 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	2b01      	cmp	r3, #1
 8009260:	d90a      	bls.n	8009278 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2282      	movs	r2, #130	@ 0x82
 8009266:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800926e:	4618      	mov	r0, r3
 8009270:	f003 f81f 	bl	800c2b2 <SDMMC_CmdReadMultiBlock>
 8009274:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009276:	e009      	b.n	800928c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2281      	movs	r2, #129	@ 0x81
 800927c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009284:	4618      	mov	r0, r3
 8009286:	f002 fff2 	bl	800c26e <SDMMC_CmdReadSingleBlock>
 800928a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800928c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800928e:	2b00      	cmp	r3, #0
 8009290:	d012      	beq.n	80092b8 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a0e      	ldr	r2, [pc, #56]	@ (80092d0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009298:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800929e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a0:	431a      	orrs	r2, r3
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e002      	b.n	80092be <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80092b8:	2300      	movs	r3, #0
 80092ba:	e000      	b.n	80092be <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80092bc:	2302      	movs	r3, #2
  }
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3730      	adds	r7, #48	@ 0x30
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	08009bcf 	.word	0x08009bcf
 80092cc:	08009c41 	.word	0x08009c41
 80092d0:	004005ff 	.word	0x004005ff
 80092d4:	4225858c 	.word	0x4225858c

080092d8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08c      	sub	sp, #48	@ 0x30
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
 80092e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d107      	bne.n	8009300 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e0c5      	b.n	800948c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b01      	cmp	r3, #1
 800930a:	f040 80be 	bne.w	800948a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009314:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	441a      	add	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800931e:	429a      	cmp	r2, r3
 8009320:	d907      	bls.n	8009332 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009326:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	e0ac      	b.n	800948c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2203      	movs	r2, #3
 8009336:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2200      	movs	r2, #0
 8009340:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	6812      	ldr	r2, [r2, #0]
 800934c:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8009350:	f043 0302 	orr.w	r3, r3, #2
 8009354:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800935a:	4a4e      	ldr	r2, [pc, #312]	@ (8009494 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800935c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009362:	4a4d      	ldr	r2, [pc, #308]	@ (8009498 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009364:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800936a:	2200      	movs	r2, #0
 800936c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009372:	2b01      	cmp	r3, #1
 8009374:	d002      	beq.n	800937c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8009376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009378:	025b      	lsls	r3, r3, #9
 800937a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d90a      	bls.n	8009398 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	22a0      	movs	r2, #160	@ 0xa0
 8009386:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800938e:	4618      	mov	r0, r3
 8009390:	f002 ffd3 	bl	800c33a <SDMMC_CmdWriteMultiBlock>
 8009394:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009396:	e009      	b.n	80093ac <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2290      	movs	r2, #144	@ 0x90
 800939c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093a4:	4618      	mov	r0, r3
 80093a6:	f002 ffa6 	bl	800c2f6 <SDMMC_CmdWriteSingleBlock>
 80093aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80093ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d012      	beq.n	80093d8 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a39      	ldr	r2, [pc, #228]	@ (800949c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80093b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c0:	431a      	orrs	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2201      	movs	r2, #1
 80093ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e059      	b.n	800948c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80093d8:	4b31      	ldr	r3, [pc, #196]	@ (80094a0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80093da:	2201      	movs	r2, #1
 80093dc:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093e2:	2240      	movs	r2, #64	@ 0x40
 80093e4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093f6:	689a      	ldr	r2, [r3, #8]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	430a      	orrs	r2, r1
 8009400:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009406:	68b9      	ldr	r1, [r7, #8]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	3380      	adds	r3, #128	@ 0x80
 800940e:	461a      	mov	r2, r3
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	025b      	lsls	r3, r3, #9
 8009414:	089b      	lsrs	r3, r3, #2
 8009416:	f7fc f909 	bl	800562c <HAL_DMA_Start_IT>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d01c      	beq.n	800945a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	6812      	ldr	r2, [r2, #0]
 800942a:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 800942e:	f023 0302 	bic.w	r3, r3, #2
 8009432:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a18      	ldr	r2, [pc, #96]	@ (800949c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800943a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009440:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e018      	b.n	800948c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800945a:	f04f 33ff 	mov.w	r3, #4294967295
 800945e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	025b      	lsls	r3, r3, #9
 8009464:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009466:	2390      	movs	r3, #144	@ 0x90
 8009468:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800946a:	2300      	movs	r3, #0
 800946c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800946e:	2300      	movs	r3, #0
 8009470:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009472:	2301      	movs	r3, #1
 8009474:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f107 0210 	add.w	r2, r7, #16
 800947e:	4611      	mov	r1, r2
 8009480:	4618      	mov	r0, r3
 8009482:	f002 fea6 	bl	800c1d2 <SDIO_ConfigData>

      return HAL_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	e000      	b.n	800948c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800948a:	2302      	movs	r3, #2
  }
}
 800948c:	4618      	mov	r0, r3
 800948e:	3730      	adds	r7, #48	@ 0x30
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	08009ba5 	.word	0x08009ba5
 8009498:	08009c41 	.word	0x08009c41
 800949c:	004005ff 	.word	0x004005ff
 80094a0:	4225858c 	.word	0x4225858c

080094a4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d008      	beq.n	80094d2 <HAL_SD_IRQHandler+0x2e>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f003 0308 	and.w	r3, r3, #8
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fdfc 	bl	800a0c8 <SD_Read_IT>
 80094d0:	e165      	b.n	800979e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 808f 	beq.w	8009600 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80094ea:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	6812      	ldr	r2, [r2, #0]
 80094f6:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 80094fa:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80094fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f022 0201 	bic.w	r2, r2, #1
 800950e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f003 0308 	and.w	r3, r3, #8
 8009516:	2b00      	cmp	r3, #0
 8009518:	d039      	beq.n	800958e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f003 0302 	and.w	r3, r3, #2
 8009520:	2b00      	cmp	r3, #0
 8009522:	d104      	bne.n	800952e <HAL_SD_IRQHandler+0x8a>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f003 0320 	and.w	r3, r3, #32
 800952a:	2b00      	cmp	r3, #0
 800952c:	d011      	beq.n	8009552 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4618      	mov	r0, r3
 8009534:	f002 ff24 	bl	800c380 <SDMMC_CmdStopTransfer>
 8009538:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d008      	beq.n	8009552 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	431a      	orrs	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f92f 	bl	80097b0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f240 523a 	movw	r2, #1338	@ 0x53a
 800955a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	2b00      	cmp	r3, #0
 8009572:	d104      	bne.n	800957e <HAL_SD_IRQHandler+0xda>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b00      	cmp	r3, #0
 800957c:	d003      	beq.n	8009586 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f003 fb42 	bl	800cc08 <HAL_SD_RxCpltCallback>
 8009584:	e10b      	b.n	800979e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f003 fb34 	bl	800cbf4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800958c:	e107      	b.n	800979e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009594:	2b00      	cmp	r3, #0
 8009596:	f000 8102 	beq.w	800979e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f003 0320 	and.w	r3, r3, #32
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d011      	beq.n	80095c8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4618      	mov	r0, r3
 80095aa:	f002 fee9 	bl	800c380 <SDMMC_CmdStopTransfer>
 80095ae:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d008      	beq.n	80095c8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	431a      	orrs	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f8f4 	bl	80097b0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f040 80e5 	bne.w	800979e <HAL_SD_IRQHandler+0x2fa>
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f003 0302 	and.w	r3, r3, #2
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f040 80df 	bne.w	800979e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f022 0208 	bic.w	r2, r2, #8
 80095ee:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f003 fafb 	bl	800cbf4 <HAL_SD_TxCpltCallback>
}
 80095fe:	e0ce      	b.n	800979e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800960a:	2b00      	cmp	r3, #0
 800960c:	d008      	beq.n	8009620 <HAL_SD_IRQHandler+0x17c>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f003 0308 	and.w	r3, r3, #8
 8009614:	2b00      	cmp	r3, #0
 8009616:	d003      	beq.n	8009620 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fda6 	bl	800a16a <SD_Write_IT>
 800961e:	e0be      	b.n	800979e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009626:	f240 233a 	movw	r3, #570	@ 0x23a
 800962a:	4013      	ands	r3, r2
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 80b6 	beq.w	800979e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009638:	f003 0302 	and.w	r3, r3, #2
 800963c:	2b00      	cmp	r3, #0
 800963e:	d005      	beq.n	800964c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009644:	f043 0202 	orr.w	r2, r3, #2
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009652:	f003 0308 	and.w	r3, r3, #8
 8009656:	2b00      	cmp	r3, #0
 8009658:	d005      	beq.n	8009666 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800965e:	f043 0208 	orr.w	r2, r3, #8
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800966c:	f003 0320 	and.w	r3, r3, #32
 8009670:	2b00      	cmp	r3, #0
 8009672:	d005      	beq.n	8009680 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009678:	f043 0220 	orr.w	r2, r3, #32
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009686:	f003 0310 	and.w	r3, r3, #16
 800968a:	2b00      	cmp	r3, #0
 800968c:	d005      	beq.n	800969a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009692:	f043 0210 	orr.w	r2, r3, #16
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d005      	beq.n	80096b4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ac:	f043 0208 	orr.w	r2, r3, #8
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f240 723a 	movw	r2, #1850	@ 0x73a
 80096bc:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	6812      	ldr	r2, [r2, #0]
 80096c8:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 80096cc:	f023 0302 	bic.w	r3, r3, #2
 80096d0:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f002 fe52 	bl	800c380 <SDMMC_CmdStopTransfer>
 80096dc:	4602      	mov	r2, r0
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e2:	431a      	orrs	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f003 0308 	and.w	r3, r3, #8
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00a      	beq.n	8009708 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f855 	bl	80097b0 <HAL_SD_ErrorCallback>
}
 8009706:	e04a      	b.n	800979e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800970e:	2b00      	cmp	r3, #0
 8009710:	d045      	beq.n	800979e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f003 0310 	and.w	r3, r3, #16
 8009718:	2b00      	cmp	r3, #0
 800971a:	d104      	bne.n	8009726 <HAL_SD_IRQHandler+0x282>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f003 0320 	and.w	r3, r3, #32
 8009722:	2b00      	cmp	r3, #0
 8009724:	d011      	beq.n	800974a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800972a:	4a1f      	ldr	r2, [pc, #124]	@ (80097a8 <HAL_SD_IRQHandler+0x304>)
 800972c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009732:	4618      	mov	r0, r3
 8009734:	f7fc f842 	bl	80057bc <HAL_DMA_Abort_IT>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d02f      	beq.n	800979e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009742:	4618      	mov	r0, r3
 8009744:	f000 face 	bl	8009ce4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009748:	e029      	b.n	800979e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f003 0301 	and.w	r3, r3, #1
 8009750:	2b00      	cmp	r3, #0
 8009752:	d104      	bne.n	800975e <HAL_SD_IRQHandler+0x2ba>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f003 0302 	and.w	r3, r3, #2
 800975a:	2b00      	cmp	r3, #0
 800975c:	d011      	beq.n	8009782 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009762:	4a12      	ldr	r2, [pc, #72]	@ (80097ac <HAL_SD_IRQHandler+0x308>)
 8009764:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800976a:	4618      	mov	r0, r3
 800976c:	f7fc f826 	bl	80057bc <HAL_DMA_Abort_IT>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d013      	beq.n	800979e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fae9 	bl	8009d52 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009780:	e00d      	b.n	800979e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f003 fa22 	bl	800cbe0 <HAL_SD_AbortCallback>
}
 800979c:	e7ff      	b.n	800979e <HAL_SD_IRQHandler+0x2fa>
 800979e:	bf00      	nop
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	08009ce5 	.word	0x08009ce5
 80097ac:	08009d53 	.word	0x08009d53

080097b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097d2:	0f9b      	lsrs	r3, r3, #30
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097de:	0e9b      	lsrs	r3, r3, #26
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	f003 030f 	and.w	r3, r3, #15
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097f0:	0e1b      	lsrs	r3, r3, #24
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	f003 0303 	and.w	r3, r3, #3
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009802:	0c1b      	lsrs	r3, r3, #16
 8009804:	b2da      	uxtb	r2, r3
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800980e:	0a1b      	lsrs	r3, r3, #8
 8009810:	b2da      	uxtb	r2, r3
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800981a:	b2da      	uxtb	r2, r3
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009824:	0d1b      	lsrs	r3, r3, #20
 8009826:	b29a      	uxth	r2, r3
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009830:	0c1b      	lsrs	r3, r3, #16
 8009832:	b2db      	uxtb	r3, r3
 8009834:	f003 030f 	and.w	r3, r3, #15
 8009838:	b2da      	uxtb	r2, r3
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009842:	0bdb      	lsrs	r3, r3, #15
 8009844:	b2db      	uxtb	r3, r3
 8009846:	f003 0301 	and.w	r3, r3, #1
 800984a:	b2da      	uxtb	r2, r3
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009854:	0b9b      	lsrs	r3, r3, #14
 8009856:	b2db      	uxtb	r3, r3
 8009858:	f003 0301 	and.w	r3, r3, #1
 800985c:	b2da      	uxtb	r2, r3
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009866:	0b5b      	lsrs	r3, r3, #13
 8009868:	b2db      	uxtb	r3, r3
 800986a:	f003 0301 	and.w	r3, r3, #1
 800986e:	b2da      	uxtb	r2, r3
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009878:	0b1b      	lsrs	r3, r3, #12
 800987a:	b2db      	uxtb	r3, r3
 800987c:	f003 0301 	and.w	r3, r3, #1
 8009880:	b2da      	uxtb	r2, r3
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2200      	movs	r2, #0
 800988a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009890:	2b00      	cmp	r3, #0
 8009892:	d163      	bne.n	800995c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009898:	009a      	lsls	r2, r3, #2
 800989a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800989e:	4013      	ands	r3, r2
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80098a4:	0f92      	lsrs	r2, r2, #30
 80098a6:	431a      	orrs	r2, r3
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098b0:	0edb      	lsrs	r3, r3, #27
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	f003 0307 	and.w	r3, r3, #7
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098c2:	0e1b      	lsrs	r3, r3, #24
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	f003 0307 	and.w	r3, r3, #7
 80098ca:	b2da      	uxtb	r2, r3
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098d4:	0d5b      	lsrs	r3, r3, #21
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	f003 0307 	and.w	r3, r3, #7
 80098dc:	b2da      	uxtb	r2, r3
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098e6:	0c9b      	lsrs	r3, r3, #18
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	f003 0307 	and.w	r3, r3, #7
 80098ee:	b2da      	uxtb	r2, r3
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098f8:	0bdb      	lsrs	r3, r3, #15
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	f003 0307 	and.w	r3, r3, #7
 8009900:	b2da      	uxtb	r2, r3
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	1c5a      	adds	r2, r3, #1
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	7e1b      	ldrb	r3, [r3, #24]
 8009914:	b2db      	uxtb	r3, r3
 8009916:	f003 0307 	and.w	r3, r3, #7
 800991a:	3302      	adds	r3, #2
 800991c:	2201      	movs	r2, #1
 800991e:	fa02 f303 	lsl.w	r3, r2, r3
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009926:	fb03 f202 	mul.w	r2, r3, r2
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	7a1b      	ldrb	r3, [r3, #8]
 8009932:	b2db      	uxtb	r3, r3
 8009934:	f003 030f 	and.w	r3, r3, #15
 8009938:	2201      	movs	r2, #1
 800993a:	409a      	lsls	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009948:	0a52      	lsrs	r2, r2, #9
 800994a:	fb03 f202 	mul.w	r2, r3, r2
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009958:	661a      	str	r2, [r3, #96]	@ 0x60
 800995a:	e031      	b.n	80099c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009960:	2b01      	cmp	r3, #1
 8009962:	d11d      	bne.n	80099a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009968:	041b      	lsls	r3, r3, #16
 800996a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009972:	0c1b      	lsrs	r3, r3, #16
 8009974:	431a      	orrs	r2, r3
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	3301      	adds	r3, #1
 8009980:	029a      	lsls	r2, r3, #10
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009994:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	661a      	str	r2, [r3, #96]	@ 0x60
 800999e:	e00f      	b.n	80099c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a58      	ldr	r2, [pc, #352]	@ (8009b08 <HAL_SD_GetCardCSD+0x344>)
 80099a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e09d      	b.n	8009afc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099c4:	0b9b      	lsrs	r3, r3, #14
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	f003 0301 	and.w	r3, r3, #1
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099d6:	09db      	lsrs	r3, r3, #7
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099de:	b2da      	uxtb	r2, r3
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099f8:	0fdb      	lsrs	r3, r3, #31
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a04:	0f5b      	lsrs	r3, r3, #29
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	f003 0303 	and.w	r3, r3, #3
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a16:	0e9b      	lsrs	r3, r3, #26
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	f003 0307 	and.w	r3, r3, #7
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a28:	0d9b      	lsrs	r3, r3, #22
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	f003 030f 	and.w	r3, r3, #15
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a3a:	0d5b      	lsrs	r3, r3, #21
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	f003 0301 	and.w	r3, r3, #1
 8009a42:	b2da      	uxtb	r2, r3
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a56:	0c1b      	lsrs	r3, r3, #16
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a6a:	0bdb      	lsrs	r3, r3, #15
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	f003 0301 	and.w	r3, r3, #1
 8009a72:	b2da      	uxtb	r2, r3
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a7e:	0b9b      	lsrs	r3, r3, #14
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	f003 0301 	and.w	r3, r3, #1
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a92:	0b5b      	lsrs	r3, r3, #13
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	f003 0301 	and.w	r3, r3, #1
 8009a9a:	b2da      	uxtb	r2, r3
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aa6:	0b1b      	lsrs	r3, r3, #12
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	b2da      	uxtb	r2, r3
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aba:	0a9b      	lsrs	r3, r3, #10
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	f003 0303 	and.w	r3, r3, #3
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ace:	0a1b      	lsrs	r3, r3, #8
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	f003 0303 	and.w	r3, r3, #3
 8009ad6:	b2da      	uxtb	r2, r3
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ae2:	085b      	lsrs	r3, r3, #1
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009aea:	b2da      	uxtb	r2, r3
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	2201      	movs	r2, #1
 8009af6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr
 8009b08:	004005ff 	.word	0x004005ff

08009b0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009b70:	f107 030c 	add.w	r3, r7, #12
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fa7e 	bl	800a078 <SD_SendStatus>
 8009b7c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d005      	beq.n	8009b90 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	431a      	orrs	r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	0a5b      	lsrs	r3, r3, #9
 8009b94:	f003 030f 	and.w	r3, r3, #15
 8009b98:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009b9a:	693b      	ldr	r3, [r7, #16]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3718      	adds	r7, #24
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bb0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009bc0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8009bc2:	bf00      	nop
 8009bc4:	3714      	adds	r7, #20
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b084      	sub	sp, #16
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bda:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009be0:	2b82      	cmp	r3, #130	@ 0x82
 8009be2:	d111      	bne.n	8009c08 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f002 fbc9 	bl	800c380 <SDMMC_CmdStopTransfer>
 8009bee:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d008      	beq.n	8009c08 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	431a      	orrs	r2, r3
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f7ff fdd4 	bl	80097b0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f022 0208 	bic.w	r2, r2, #8
 8009c16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009c20:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f002 ffe9 	bl	800cc08 <HAL_SD_RxCpltCallback>
#endif
}
 8009c36:	bf00      	nop
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
	...

08009c40 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c4c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7fb ff6e 	bl	8005b30 <HAL_DMA_GetError>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d03e      	beq.n	8009cd8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c60:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c68:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d002      	beq.n	8009c76 <SD_DMAError+0x36>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d12d      	bne.n	8009cd2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a19      	ldr	r2, [pc, #100]	@ (8009ce0 <SD_DMAError+0xa0>)
 8009c7c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009c8c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c92:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009c9a:	6978      	ldr	r0, [r7, #20]
 8009c9c:	f7ff ff62 	bl	8009b64 <HAL_SD_GetCardState>
 8009ca0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	2b06      	cmp	r3, #6
 8009ca6:	d002      	beq.n	8009cae <SD_DMAError+0x6e>
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	2b05      	cmp	r3, #5
 8009cac:	d10a      	bne.n	8009cc4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f002 fb64 	bl	800c380 <SDMMC_CmdStopTransfer>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cbe:	431a      	orrs	r2, r3
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009cd2:	6978      	ldr	r0, [r7, #20]
 8009cd4:	f7ff fd6c 	bl	80097b0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009cd8:	bf00      	nop
 8009cda:	3718      	adds	r7, #24
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	004005ff 	.word	0x004005ff

08009ce4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009cfa:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	f7ff ff31 	bl	8009b64 <HAL_SD_GetCardState>
 8009d02:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	2b06      	cmp	r3, #6
 8009d16:	d002      	beq.n	8009d1e <SD_DMATxAbort+0x3a>
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	2b05      	cmp	r3, #5
 8009d1c:	d10a      	bne.n	8009d34 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f002 fb2c 	bl	800c380 <SDMMC_CmdStopTransfer>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d2e:	431a      	orrs	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d103      	bne.n	8009d44 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f002 ff4f 	bl	800cbe0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009d42:	e002      	b.n	8009d4a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f7ff fd33 	bl	80097b0 <HAL_SD_ErrorCallback>
}
 8009d4a:	bf00      	nop
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b084      	sub	sp, #16
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d5e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009d68:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f7ff fefa 	bl	8009b64 <HAL_SD_GetCardState>
 8009d70:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2b06      	cmp	r3, #6
 8009d84:	d002      	beq.n	8009d8c <SD_DMARxAbort+0x3a>
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	2b05      	cmp	r3, #5
 8009d8a:	d10a      	bne.n	8009da2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f002 faf5 	bl	800c380 <SDMMC_CmdStopTransfer>
 8009d96:	4602      	mov	r2, r0
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d9c:	431a      	orrs	r2, r3
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d103      	bne.n	8009db2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	f002 ff18 	bl	800cbe0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009db0:	e002      	b.n	8009db8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f7ff fcfc 	bl	80097b0 <HAL_SD_ErrorCallback>
}
 8009db8:	bf00      	nop
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009dc0:	b5b0      	push	{r4, r5, r7, lr}
 8009dc2:	b094      	sub	sp, #80	@ 0x50
 8009dc4:	af04      	add	r7, sp, #16
 8009dc6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f002 f9a6 	bl	800c122 <SDIO_GetPowerState>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d102      	bne.n	8009de2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ddc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009de0:	e0b8      	b.n	8009f54 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d02f      	beq.n	8009e4a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f002 fb8d 	bl	800c50e <SDMMC_CmdSendCID>
 8009df4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <SD_InitCard+0x40>
    {
      return errorstate;
 8009dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dfe:	e0a9      	b.n	8009f54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2100      	movs	r1, #0
 8009e06:	4618      	mov	r0, r3
 8009e08:	f002 f9d0 	bl	800c1ac <SDIO_GetResponse>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2104      	movs	r1, #4
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f002 f9c7 	bl	800c1ac <SDIO_GetResponse>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2108      	movs	r1, #8
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f002 f9be 	bl	800c1ac <SDIO_GetResponse>
 8009e30:	4602      	mov	r2, r0
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	210c      	movs	r1, #12
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f002 f9b5 	bl	800c1ac <SDIO_GetResponse>
 8009e42:	4602      	mov	r2, r0
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e4e:	2b03      	cmp	r3, #3
 8009e50:	d00d      	beq.n	8009e6e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f107 020e 	add.w	r2, r7, #14
 8009e5a:	4611      	mov	r1, r2
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f002 fb93 	bl	800c588 <SDMMC_CmdSetRelAdd>
 8009e62:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <SD_InitCard+0xae>
    {
      return errorstate;
 8009e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e6c:	e072      	b.n	8009f54 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e72:	2b03      	cmp	r3, #3
 8009e74:	d036      	beq.n	8009ee4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009e76:	89fb      	ldrh	r3, [r7, #14]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e86:	041b      	lsls	r3, r3, #16
 8009e88:	4619      	mov	r1, r3
 8009e8a:	4610      	mov	r0, r2
 8009e8c:	f002 fb5d 	bl	800c54a <SDMMC_CmdSendCSD>
 8009e90:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d001      	beq.n	8009e9c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e9a:	e05b      	b.n	8009f54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f002 f982 	bl	800c1ac <SDIO_GetResponse>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2104      	movs	r1, #4
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f002 f979 	bl	800c1ac <SDIO_GetResponse>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2108      	movs	r1, #8
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f002 f970 	bl	800c1ac <SDIO_GetResponse>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	210c      	movs	r1, #12
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f002 f967 	bl	800c1ac <SDIO_GetResponse>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2104      	movs	r1, #4
 8009eea:	4618      	mov	r0, r3
 8009eec:	f002 f95e 	bl	800c1ac <SDIO_GetResponse>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	0d1a      	lsrs	r2, r3, #20
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009ef8:	f107 0310 	add.w	r3, r7, #16
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7ff fc60 	bl	80097c4 <HAL_SD_GetCardCSD>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d002      	beq.n	8009f10 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f0a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009f0e:	e021      	b.n	8009f54 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6819      	ldr	r1, [r3, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f18:	041b      	lsls	r3, r3, #16
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	461c      	mov	r4, r3
 8009f1e:	4615      	mov	r5, r2
 8009f20:	4622      	mov	r2, r4
 8009f22:	462b      	mov	r3, r5
 8009f24:	4608      	mov	r0, r1
 8009f26:	f002 fa4d 	bl	800c3c4 <SDMMC_CmdSelDesel>
 8009f2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d001      	beq.n	8009f36 <SD_InitCard+0x176>
  {
    return errorstate;
 8009f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f34:	e00e      	b.n	8009f54 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681d      	ldr	r5, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	466c      	mov	r4, sp
 8009f3e:	f103 0210 	add.w	r2, r3, #16
 8009f42:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009f48:	3304      	adds	r3, #4
 8009f4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	f002 f891 	bl	800c074 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3740      	adds	r7, #64	@ 0x40
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bdb0      	pop	{r4, r5, r7, pc}

08009f5c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f64:	2300      	movs	r3, #0
 8009f66:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	617b      	str	r3, [r7, #20]
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f002 fa48 	bl	800c40a <SDMMC_CmdGoIdleState>
 8009f7a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d001      	beq.n	8009f86 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	e072      	b.n	800a06c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f002 fa5b 	bl	800c446 <SDMMC_CmdOperCond>
 8009f90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00d      	beq.n	8009fb4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f002 fa31 	bl	800c40a <SDMMC_CmdGoIdleState>
 8009fa8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d004      	beq.n	8009fba <SD_PowerON+0x5e>
    {
      return errorstate;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	e05b      	b.n	800a06c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d137      	bne.n	800a032 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f002 fa5b 	bl	800c484 <SDMMC_CmdAppCommand>
 8009fce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d02d      	beq.n	800a032 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fd6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009fda:	e047      	b.n	800a06c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f002 fa4e 	bl	800c484 <SDMMC_CmdAppCommand>
 8009fe8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <SD_PowerON+0x98>
    {
      return errorstate;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	e03b      	b.n	800a06c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	491e      	ldr	r1, [pc, #120]	@ (800a074 <SD_PowerON+0x118>)
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f002 fa64 	bl	800c4c8 <SDMMC_CmdAppOperCommand>
 800a000:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d002      	beq.n	800a00e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a008:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a00c:	e02e      	b.n	800a06c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2100      	movs	r1, #0
 800a014:	4618      	mov	r0, r3
 800a016:	f002 f8c9 	bl	800c1ac <SDIO_GetResponse>
 800a01a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	0fdb      	lsrs	r3, r3, #31
 800a020:	2b01      	cmp	r3, #1
 800a022:	d101      	bne.n	800a028 <SD_PowerON+0xcc>
 800a024:	2301      	movs	r3, #1
 800a026:	e000      	b.n	800a02a <SD_PowerON+0xce>
 800a028:	2300      	movs	r3, #0
 800a02a:	613b      	str	r3, [r7, #16]

    count++;
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	3301      	adds	r3, #1
 800a030:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a038:	4293      	cmp	r3, r2
 800a03a:	d802      	bhi.n	800a042 <SD_PowerON+0xe6>
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d0cc      	beq.n	8009fdc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a048:	4293      	cmp	r3, r2
 800a04a:	d902      	bls.n	800a052 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a04c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a050:	e00c      	b.n	800a06c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d003      	beq.n	800a064 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	645a      	str	r2, [r3, #68]	@ 0x44
 800a062:	e002      	b.n	800a06a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	c1100000 	.word	0xc1100000

0800a078 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d102      	bne.n	800a08e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a088:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a08c:	e018      	b.n	800a0c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a096:	041b      	lsls	r3, r3, #16
 800a098:	4619      	mov	r1, r3
 800a09a:	4610      	mov	r0, r2
 800a09c:	f002 fa95 	bl	800c5ca <SDMMC_CmdSendStatus>
 800a0a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <SD_SendStatus+0x34>
  {
    return errorstate;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	e009      	b.n	800a0c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f002 f87a 	bl	800c1ac <SDIO_GetResponse>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a0be:	2300      	movs	r3, #0
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3710      	adds	r7, #16
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b086      	sub	sp, #24
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0da:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d03f      	beq.n	800a162 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	617b      	str	r3, [r7, #20]
 800a0e6:	e033      	b.n	800a150 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f001 ffec 	bl	800c0ca <SDIO_ReadFIFO>
 800a0f2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	b2da      	uxtb	r2, r3
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	3301      	adds	r3, #1
 800a100:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	3b01      	subs	r3, #1
 800a106:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	0a1b      	lsrs	r3, r3, #8
 800a10c:	b2da      	uxtb	r2, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	3301      	adds	r3, #1
 800a116:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	3b01      	subs	r3, #1
 800a11c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	0c1b      	lsrs	r3, r3, #16
 800a122:	b2da      	uxtb	r2, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	3301      	adds	r3, #1
 800a12c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	3b01      	subs	r3, #1
 800a132:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	0e1b      	lsrs	r3, r3, #24
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	3301      	adds	r3, #1
 800a142:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	3b01      	subs	r3, #1
 800a148:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	3301      	adds	r3, #1
 800a14e:	617b      	str	r3, [r7, #20]
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	2b07      	cmp	r3, #7
 800a154:	d9c8      	bls.n	800a0e8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	693a      	ldr	r2, [r7, #16]
 800a160:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800a162:	bf00      	nop
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b086      	sub	sp, #24
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a17c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d043      	beq.n	800a20c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a184:	2300      	movs	r3, #0
 800a186:	617b      	str	r3, [r7, #20]
 800a188:	e037      	b.n	800a1fa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	3301      	adds	r3, #1
 800a194:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	3b01      	subs	r3, #1
 800a19a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	021a      	lsls	r2, r3, #8
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	041a      	lsls	r2, r3, #16
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	061a      	lsls	r2, r3, #24
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f107 0208 	add.w	r2, r7, #8
 800a1ec:	4611      	mov	r1, r2
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f001 ff78 	bl	800c0e4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	617b      	str	r3, [r7, #20]
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	2b07      	cmp	r3, #7
 800a1fe:	d9c4      	bls.n	800a18a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800a20c:	bf00      	nop
 800a20e:	3718      	adds	r7, #24
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d101      	bne.n	800a226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e041      	b.n	800a2aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d106      	bne.n	800a240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f7f9 f884 	bl	8003348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2202      	movs	r2, #2
 800a244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	3304      	adds	r3, #4
 800a250:	4619      	mov	r1, r3
 800a252:	4610      	mov	r0, r2
 800a254:	f000 fb72 	bl	800a93c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
	...

0800a2b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d001      	beq.n	800a2cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e04e      	b.n	800a36a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2202      	movs	r2, #2
 800a2d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68da      	ldr	r2, [r3, #12]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f042 0201 	orr.w	r2, r2, #1
 800a2e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a23      	ldr	r2, [pc, #140]	@ (800a378 <HAL_TIM_Base_Start_IT+0xc4>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d022      	beq.n	800a334 <HAL_TIM_Base_Start_IT+0x80>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2f6:	d01d      	beq.n	800a334 <HAL_TIM_Base_Start_IT+0x80>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a1f      	ldr	r2, [pc, #124]	@ (800a37c <HAL_TIM_Base_Start_IT+0xc8>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d018      	beq.n	800a334 <HAL_TIM_Base_Start_IT+0x80>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a1e      	ldr	r2, [pc, #120]	@ (800a380 <HAL_TIM_Base_Start_IT+0xcc>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d013      	beq.n	800a334 <HAL_TIM_Base_Start_IT+0x80>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a1c      	ldr	r2, [pc, #112]	@ (800a384 <HAL_TIM_Base_Start_IT+0xd0>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d00e      	beq.n	800a334 <HAL_TIM_Base_Start_IT+0x80>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a1b      	ldr	r2, [pc, #108]	@ (800a388 <HAL_TIM_Base_Start_IT+0xd4>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d009      	beq.n	800a334 <HAL_TIM_Base_Start_IT+0x80>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a19      	ldr	r2, [pc, #100]	@ (800a38c <HAL_TIM_Base_Start_IT+0xd8>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d004      	beq.n	800a334 <HAL_TIM_Base_Start_IT+0x80>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a18      	ldr	r2, [pc, #96]	@ (800a390 <HAL_TIM_Base_Start_IT+0xdc>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d111      	bne.n	800a358 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	f003 0307 	and.w	r3, r3, #7
 800a33e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2b06      	cmp	r3, #6
 800a344:	d010      	beq.n	800a368 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f042 0201 	orr.w	r2, r2, #1
 800a354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a356:	e007      	b.n	800a368 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f042 0201 	orr.w	r2, r2, #1
 800a366:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3714      	adds	r7, #20
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	40010000 	.word	0x40010000
 800a37c:	40000400 	.word	0x40000400
 800a380:	40000800 	.word	0x40000800
 800a384:	40000c00 	.word	0x40000c00
 800a388:	40010400 	.word	0x40010400
 800a38c:	40014000 	.word	0x40014000
 800a390:	40001800 	.word	0x40001800

0800a394 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d101      	bne.n	800a3a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e041      	b.n	800a42a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d106      	bne.n	800a3c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 f839 	bl	800a432 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	3304      	adds	r3, #4
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	f000 fab2 	bl	800a93c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2201      	movs	r2, #1
 800a414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a432:	b480      	push	{r7}
 800a434:	b083      	sub	sp, #12
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a43a:	bf00      	nop
 800a43c:	370c      	adds	r7, #12
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr

0800a446 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b084      	sub	sp, #16
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	f003 0302 	and.w	r3, r3, #2
 800a464:	2b00      	cmp	r3, #0
 800a466:	d020      	beq.n	800a4aa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f003 0302 	and.w	r3, r3, #2
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d01b      	beq.n	800a4aa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f06f 0202 	mvn.w	r2, #2
 800a47a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	f003 0303 	and.w	r3, r3, #3
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d003      	beq.n	800a498 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fa35 	bl	800a900 <HAL_TIM_IC_CaptureCallback>
 800a496:	e005      	b.n	800a4a4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 fa27 	bl	800a8ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 fa38 	bl	800a914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	f003 0304 	and.w	r3, r3, #4
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d020      	beq.n	800a4f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f003 0304 	and.w	r3, r3, #4
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d01b      	beq.n	800a4f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f06f 0204 	mvn.w	r2, #4
 800a4c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2202      	movs	r2, #2
 800a4cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	699b      	ldr	r3, [r3, #24]
 800a4d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d003      	beq.n	800a4e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 fa0f 	bl	800a900 <HAL_TIM_IC_CaptureCallback>
 800a4e2:	e005      	b.n	800a4f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fa01 	bl	800a8ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 fa12 	bl	800a914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	f003 0308 	and.w	r3, r3, #8
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d020      	beq.n	800a542 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f003 0308 	and.w	r3, r3, #8
 800a506:	2b00      	cmp	r3, #0
 800a508:	d01b      	beq.n	800a542 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f06f 0208 	mvn.w	r2, #8
 800a512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2204      	movs	r2, #4
 800a518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	69db      	ldr	r3, [r3, #28]
 800a520:	f003 0303 	and.w	r3, r3, #3
 800a524:	2b00      	cmp	r3, #0
 800a526:	d003      	beq.n	800a530 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f9e9 	bl	800a900 <HAL_TIM_IC_CaptureCallback>
 800a52e:	e005      	b.n	800a53c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f9db 	bl	800a8ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f9ec 	bl	800a914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	f003 0310 	and.w	r3, r3, #16
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d020      	beq.n	800a58e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f003 0310 	and.w	r3, r3, #16
 800a552:	2b00      	cmp	r3, #0
 800a554:	d01b      	beq.n	800a58e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f06f 0210 	mvn.w	r2, #16
 800a55e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2208      	movs	r2, #8
 800a564:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	69db      	ldr	r3, [r3, #28]
 800a56c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a570:	2b00      	cmp	r3, #0
 800a572:	d003      	beq.n	800a57c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f9c3 	bl	800a900 <HAL_TIM_IC_CaptureCallback>
 800a57a:	e005      	b.n	800a588 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 f9b5 	bl	800a8ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 f9c6 	bl	800a914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	f003 0301 	and.w	r3, r3, #1
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00c      	beq.n	800a5b2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d007      	beq.n	800a5b2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f06f 0201 	mvn.w	r2, #1
 800a5aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f7f8 fdcf 	bl	8003150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00c      	beq.n	800a5d6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d007      	beq.n	800a5d6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a5ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 fca3 	bl	800af1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00c      	beq.n	800a5fa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d007      	beq.n	800a5fa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a5f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f997 	bl	800a928 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	f003 0320 	and.w	r3, r3, #32
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00c      	beq.n	800a61e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f003 0320 	and.w	r3, r3, #32
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d007      	beq.n	800a61e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f06f 0220 	mvn.w	r2, #32
 800a616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 fc75 	bl	800af08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a61e:	bf00      	nop
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b086      	sub	sp, #24
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	60f8      	str	r0, [r7, #12]
 800a62e:	60b9      	str	r1, [r7, #8]
 800a630:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a632:	2300      	movs	r3, #0
 800a634:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d101      	bne.n	800a644 <HAL_TIM_IC_ConfigChannel+0x1e>
 800a640:	2302      	movs	r3, #2
 800a642:	e088      	b.n	800a756 <HAL_TIM_IC_ConfigChannel+0x130>
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d11b      	bne.n	800a68a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800a662:	f000 fa11 	bl	800aa88 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	699a      	ldr	r2, [r3, #24]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f022 020c 	bic.w	r2, r2, #12
 800a674:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	6999      	ldr	r1, [r3, #24]
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	689a      	ldr	r2, [r3, #8]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	430a      	orrs	r2, r1
 800a686:	619a      	str	r2, [r3, #24]
 800a688:	e060      	b.n	800a74c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2b04      	cmp	r3, #4
 800a68e:	d11c      	bne.n	800a6ca <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800a6a0:	f000 fa95 	bl	800abce <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	699a      	ldr	r2, [r3, #24]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800a6b2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6999      	ldr	r1, [r3, #24]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	021a      	lsls	r2, r3, #8
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	430a      	orrs	r2, r1
 800a6c6:	619a      	str	r2, [r3, #24]
 800a6c8:	e040      	b.n	800a74c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2b08      	cmp	r3, #8
 800a6ce:	d11b      	bne.n	800a708 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800a6e0:	f000 fae2 	bl	800aca8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	69da      	ldr	r2, [r3, #28]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f022 020c 	bic.w	r2, r2, #12
 800a6f2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	69d9      	ldr	r1, [r3, #28]
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	689a      	ldr	r2, [r3, #8]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	430a      	orrs	r2, r1
 800a704:	61da      	str	r2, [r3, #28]
 800a706:	e021      	b.n	800a74c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b0c      	cmp	r3, #12
 800a70c:	d11c      	bne.n	800a748 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800a71e:	f000 faff 	bl	800ad20 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	69da      	ldr	r2, [r3, #28]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800a730:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	69d9      	ldr	r1, [r3, #28]
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	021a      	lsls	r2, r3, #8
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	430a      	orrs	r2, r1
 800a744:	61da      	str	r2, [r3, #28]
 800a746:	e001      	b.n	800a74c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2200      	movs	r2, #0
 800a750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a754:	7dfb      	ldrb	r3, [r7, #23]
}
 800a756:	4618      	mov	r0, r3
 800a758:	3718      	adds	r7, #24
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b084      	sub	sp, #16
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
 800a766:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a768:	2300      	movs	r3, #0
 800a76a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a772:	2b01      	cmp	r3, #1
 800a774:	d101      	bne.n	800a77a <HAL_TIM_ConfigClockSource+0x1c>
 800a776:	2302      	movs	r3, #2
 800a778:	e0b4      	b.n	800a8e4 <HAL_TIM_ConfigClockSource+0x186>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2201      	movs	r2, #1
 800a77e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2202      	movs	r2, #2
 800a786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a798:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7a0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7b2:	d03e      	beq.n	800a832 <HAL_TIM_ConfigClockSource+0xd4>
 800a7b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7b8:	f200 8087 	bhi.w	800a8ca <HAL_TIM_ConfigClockSource+0x16c>
 800a7bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7c0:	f000 8086 	beq.w	800a8d0 <HAL_TIM_ConfigClockSource+0x172>
 800a7c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7c8:	d87f      	bhi.n	800a8ca <HAL_TIM_ConfigClockSource+0x16c>
 800a7ca:	2b70      	cmp	r3, #112	@ 0x70
 800a7cc:	d01a      	beq.n	800a804 <HAL_TIM_ConfigClockSource+0xa6>
 800a7ce:	2b70      	cmp	r3, #112	@ 0x70
 800a7d0:	d87b      	bhi.n	800a8ca <HAL_TIM_ConfigClockSource+0x16c>
 800a7d2:	2b60      	cmp	r3, #96	@ 0x60
 800a7d4:	d050      	beq.n	800a878 <HAL_TIM_ConfigClockSource+0x11a>
 800a7d6:	2b60      	cmp	r3, #96	@ 0x60
 800a7d8:	d877      	bhi.n	800a8ca <HAL_TIM_ConfigClockSource+0x16c>
 800a7da:	2b50      	cmp	r3, #80	@ 0x50
 800a7dc:	d03c      	beq.n	800a858 <HAL_TIM_ConfigClockSource+0xfa>
 800a7de:	2b50      	cmp	r3, #80	@ 0x50
 800a7e0:	d873      	bhi.n	800a8ca <HAL_TIM_ConfigClockSource+0x16c>
 800a7e2:	2b40      	cmp	r3, #64	@ 0x40
 800a7e4:	d058      	beq.n	800a898 <HAL_TIM_ConfigClockSource+0x13a>
 800a7e6:	2b40      	cmp	r3, #64	@ 0x40
 800a7e8:	d86f      	bhi.n	800a8ca <HAL_TIM_ConfigClockSource+0x16c>
 800a7ea:	2b30      	cmp	r3, #48	@ 0x30
 800a7ec:	d064      	beq.n	800a8b8 <HAL_TIM_ConfigClockSource+0x15a>
 800a7ee:	2b30      	cmp	r3, #48	@ 0x30
 800a7f0:	d86b      	bhi.n	800a8ca <HAL_TIM_ConfigClockSource+0x16c>
 800a7f2:	2b20      	cmp	r3, #32
 800a7f4:	d060      	beq.n	800a8b8 <HAL_TIM_ConfigClockSource+0x15a>
 800a7f6:	2b20      	cmp	r3, #32
 800a7f8:	d867      	bhi.n	800a8ca <HAL_TIM_ConfigClockSource+0x16c>
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d05c      	beq.n	800a8b8 <HAL_TIM_ConfigClockSource+0x15a>
 800a7fe:	2b10      	cmp	r3, #16
 800a800:	d05a      	beq.n	800a8b8 <HAL_TIM_ConfigClockSource+0x15a>
 800a802:	e062      	b.n	800a8ca <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a814:	f000 fadc 	bl	800add0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a826:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	609a      	str	r2, [r3, #8]
      break;
 800a830:	e04f      	b.n	800a8d2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a842:	f000 fac5 	bl	800add0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	689a      	ldr	r2, [r3, #8]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a854:	609a      	str	r2, [r3, #8]
      break;
 800a856:	e03c      	b.n	800a8d2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a864:	461a      	mov	r2, r3
 800a866:	f000 f983 	bl	800ab70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2150      	movs	r1, #80	@ 0x50
 800a870:	4618      	mov	r0, r3
 800a872:	f000 fa92 	bl	800ad9a <TIM_ITRx_SetConfig>
      break;
 800a876:	e02c      	b.n	800a8d2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a884:	461a      	mov	r2, r3
 800a886:	f000 f9df 	bl	800ac48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2160      	movs	r1, #96	@ 0x60
 800a890:	4618      	mov	r0, r3
 800a892:	f000 fa82 	bl	800ad9a <TIM_ITRx_SetConfig>
      break;
 800a896:	e01c      	b.n	800a8d2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	f000 f963 	bl	800ab70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2140      	movs	r1, #64	@ 0x40
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f000 fa72 	bl	800ad9a <TIM_ITRx_SetConfig>
      break;
 800a8b6:	e00c      	b.n	800a8d2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	4610      	mov	r0, r2
 800a8c4:	f000 fa69 	bl	800ad9a <TIM_ITRx_SetConfig>
      break;
 800a8c8:	e003      	b.n	800a8d2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a8ce:	e000      	b.n	800a8d2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a8d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8f4:	bf00      	nop
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a91c:	bf00      	nop
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4a43      	ldr	r2, [pc, #268]	@ (800aa5c <TIM_Base_SetConfig+0x120>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d013      	beq.n	800a97c <TIM_Base_SetConfig+0x40>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a95a:	d00f      	beq.n	800a97c <TIM_Base_SetConfig+0x40>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a40      	ldr	r2, [pc, #256]	@ (800aa60 <TIM_Base_SetConfig+0x124>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d00b      	beq.n	800a97c <TIM_Base_SetConfig+0x40>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a3f      	ldr	r2, [pc, #252]	@ (800aa64 <TIM_Base_SetConfig+0x128>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d007      	beq.n	800a97c <TIM_Base_SetConfig+0x40>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a3e      	ldr	r2, [pc, #248]	@ (800aa68 <TIM_Base_SetConfig+0x12c>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d003      	beq.n	800a97c <TIM_Base_SetConfig+0x40>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a3d      	ldr	r2, [pc, #244]	@ (800aa6c <TIM_Base_SetConfig+0x130>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d108      	bne.n	800a98e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4a32      	ldr	r2, [pc, #200]	@ (800aa5c <TIM_Base_SetConfig+0x120>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d02b      	beq.n	800a9ee <TIM_Base_SetConfig+0xb2>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a99c:	d027      	beq.n	800a9ee <TIM_Base_SetConfig+0xb2>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	4a2f      	ldr	r2, [pc, #188]	@ (800aa60 <TIM_Base_SetConfig+0x124>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d023      	beq.n	800a9ee <TIM_Base_SetConfig+0xb2>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4a2e      	ldr	r2, [pc, #184]	@ (800aa64 <TIM_Base_SetConfig+0x128>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d01f      	beq.n	800a9ee <TIM_Base_SetConfig+0xb2>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4a2d      	ldr	r2, [pc, #180]	@ (800aa68 <TIM_Base_SetConfig+0x12c>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d01b      	beq.n	800a9ee <TIM_Base_SetConfig+0xb2>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4a2c      	ldr	r2, [pc, #176]	@ (800aa6c <TIM_Base_SetConfig+0x130>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d017      	beq.n	800a9ee <TIM_Base_SetConfig+0xb2>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4a2b      	ldr	r2, [pc, #172]	@ (800aa70 <TIM_Base_SetConfig+0x134>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d013      	beq.n	800a9ee <TIM_Base_SetConfig+0xb2>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	4a2a      	ldr	r2, [pc, #168]	@ (800aa74 <TIM_Base_SetConfig+0x138>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d00f      	beq.n	800a9ee <TIM_Base_SetConfig+0xb2>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4a29      	ldr	r2, [pc, #164]	@ (800aa78 <TIM_Base_SetConfig+0x13c>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d00b      	beq.n	800a9ee <TIM_Base_SetConfig+0xb2>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a28      	ldr	r2, [pc, #160]	@ (800aa7c <TIM_Base_SetConfig+0x140>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d007      	beq.n	800a9ee <TIM_Base_SetConfig+0xb2>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a27      	ldr	r2, [pc, #156]	@ (800aa80 <TIM_Base_SetConfig+0x144>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d003      	beq.n	800a9ee <TIM_Base_SetConfig+0xb2>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a26      	ldr	r2, [pc, #152]	@ (800aa84 <TIM_Base_SetConfig+0x148>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d108      	bne.n	800aa00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	68fa      	ldr	r2, [r7, #12]
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	695b      	ldr	r3, [r3, #20]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	689a      	ldr	r2, [r3, #8]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a0e      	ldr	r2, [pc, #56]	@ (800aa5c <TIM_Base_SetConfig+0x120>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d003      	beq.n	800aa2e <TIM_Base_SetConfig+0xf2>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a10      	ldr	r2, [pc, #64]	@ (800aa6c <TIM_Base_SetConfig+0x130>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d103      	bne.n	800aa36 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	691a      	ldr	r2, [r3, #16]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f043 0204 	orr.w	r2, r3, #4
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2201      	movs	r2, #1
 800aa46:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	601a      	str	r2, [r3, #0]
}
 800aa4e:	bf00      	nop
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	40010000 	.word	0x40010000
 800aa60:	40000400 	.word	0x40000400
 800aa64:	40000800 	.word	0x40000800
 800aa68:	40000c00 	.word	0x40000c00
 800aa6c:	40010400 	.word	0x40010400
 800aa70:	40014000 	.word	0x40014000
 800aa74:	40014400 	.word	0x40014400
 800aa78:	40014800 	.word	0x40014800
 800aa7c:	40001800 	.word	0x40001800
 800aa80:	40001c00 	.word	0x40001c00
 800aa84:	40002000 	.word	0x40002000

0800aa88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b087      	sub	sp, #28
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6a1b      	ldr	r3, [r3, #32]
 800aa9a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6a1b      	ldr	r3, [r3, #32]
 800aaa0:	f023 0201 	bic.w	r2, r3, #1
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	4a28      	ldr	r2, [pc, #160]	@ (800ab54 <TIM_TI1_SetConfig+0xcc>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d01b      	beq.n	800aaee <TIM_TI1_SetConfig+0x66>
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aabc:	d017      	beq.n	800aaee <TIM_TI1_SetConfig+0x66>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	4a25      	ldr	r2, [pc, #148]	@ (800ab58 <TIM_TI1_SetConfig+0xd0>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d013      	beq.n	800aaee <TIM_TI1_SetConfig+0x66>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	4a24      	ldr	r2, [pc, #144]	@ (800ab5c <TIM_TI1_SetConfig+0xd4>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d00f      	beq.n	800aaee <TIM_TI1_SetConfig+0x66>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	4a23      	ldr	r2, [pc, #140]	@ (800ab60 <TIM_TI1_SetConfig+0xd8>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d00b      	beq.n	800aaee <TIM_TI1_SetConfig+0x66>
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	4a22      	ldr	r2, [pc, #136]	@ (800ab64 <TIM_TI1_SetConfig+0xdc>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d007      	beq.n	800aaee <TIM_TI1_SetConfig+0x66>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	4a21      	ldr	r2, [pc, #132]	@ (800ab68 <TIM_TI1_SetConfig+0xe0>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d003      	beq.n	800aaee <TIM_TI1_SetConfig+0x66>
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	4a20      	ldr	r2, [pc, #128]	@ (800ab6c <TIM_TI1_SetConfig+0xe4>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d101      	bne.n	800aaf2 <TIM_TI1_SetConfig+0x6a>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e000      	b.n	800aaf4 <TIM_TI1_SetConfig+0x6c>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d008      	beq.n	800ab0a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	f023 0303 	bic.w	r3, r3, #3
 800aafe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	617b      	str	r3, [r7, #20]
 800ab08:	e003      	b.n	800ab12 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	f043 0301 	orr.w	r3, r3, #1
 800ab10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ab18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	011b      	lsls	r3, r3, #4
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	697a      	ldr	r2, [r7, #20]
 800ab22:	4313      	orrs	r3, r2
 800ab24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	f023 030a 	bic.w	r3, r3, #10
 800ab2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	f003 030a 	and.w	r3, r3, #10
 800ab34:	693a      	ldr	r2, [r7, #16]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	693a      	ldr	r2, [r7, #16]
 800ab44:	621a      	str	r2, [r3, #32]
}
 800ab46:	bf00      	nop
 800ab48:	371c      	adds	r7, #28
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop
 800ab54:	40010000 	.word	0x40010000
 800ab58:	40000400 	.word	0x40000400
 800ab5c:	40000800 	.word	0x40000800
 800ab60:	40000c00 	.word	0x40000c00
 800ab64:	40010400 	.word	0x40010400
 800ab68:	40014000 	.word	0x40014000
 800ab6c:	40001800 	.word	0x40001800

0800ab70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b087      	sub	sp, #28
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6a1b      	ldr	r3, [r3, #32]
 800ab80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6a1b      	ldr	r3, [r3, #32]
 800ab86:	f023 0201 	bic.w	r2, r3, #1
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	699b      	ldr	r3, [r3, #24]
 800ab92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ab9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	011b      	lsls	r3, r3, #4
 800aba0:	693a      	ldr	r2, [r7, #16]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	f023 030a 	bic.w	r3, r3, #10
 800abac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abae:	697a      	ldr	r2, [r7, #20]
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	693a      	ldr	r2, [r7, #16]
 800abba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	621a      	str	r2, [r3, #32]
}
 800abc2:	bf00      	nop
 800abc4:	371c      	adds	r7, #28
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800abce:	b480      	push	{r7}
 800abd0:	b087      	sub	sp, #28
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	60f8      	str	r0, [r7, #12]
 800abd6:	60b9      	str	r1, [r7, #8]
 800abd8:	607a      	str	r2, [r7, #4]
 800abda:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6a1b      	ldr	r3, [r3, #32]
 800abe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6a1b      	ldr	r3, [r3, #32]
 800abe6:	f023 0210 	bic.w	r2, r3, #16
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	699b      	ldr	r3, [r3, #24]
 800abf2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800abfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	021b      	lsls	r3, r3, #8
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ac0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	031b      	lsls	r3, r3, #12
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	693a      	ldr	r2, [r7, #16]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ac20:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	011b      	lsls	r3, r3, #4
 800ac26:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800ac2a:	697a      	ldr	r2, [r7, #20]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	693a      	ldr	r2, [r7, #16]
 800ac34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	697a      	ldr	r2, [r7, #20]
 800ac3a:	621a      	str	r2, [r3, #32]
}
 800ac3c:	bf00      	nop
 800ac3e:	371c      	adds	r7, #28
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b087      	sub	sp, #28
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6a1b      	ldr	r3, [r3, #32]
 800ac58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	f023 0210 	bic.w	r2, r3, #16
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ac72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	031b      	lsls	r3, r3, #12
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ac84:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	011b      	lsls	r3, r3, #4
 800ac8a:	697a      	ldr	r2, [r7, #20]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	693a      	ldr	r2, [r7, #16]
 800ac94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	697a      	ldr	r2, [r7, #20]
 800ac9a:	621a      	str	r2, [r3, #32]
}
 800ac9c:	bf00      	nop
 800ac9e:	371c      	adds	r7, #28
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b087      	sub	sp, #28
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	607a      	str	r2, [r7, #4]
 800acb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6a1b      	ldr	r3, [r3, #32]
 800acc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	69db      	ldr	r3, [r3, #28]
 800accc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	f023 0303 	bic.w	r3, r3, #3
 800acd4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800acd6:	693a      	ldr	r2, [r7, #16]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	4313      	orrs	r3, r2
 800acdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ace4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	011b      	lsls	r3, r3, #4
 800acea:	b2db      	uxtb	r3, r3
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	4313      	orrs	r3, r2
 800acf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800acf8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	021b      	lsls	r3, r3, #8
 800acfe:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800ad02:	697a      	ldr	r2, [r7, #20]
 800ad04:	4313      	orrs	r3, r2
 800ad06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	621a      	str	r2, [r3, #32]
}
 800ad14:	bf00      	nop
 800ad16:	371c      	adds	r7, #28
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b087      	sub	sp, #28
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
 800ad2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6a1b      	ldr	r3, [r3, #32]
 800ad38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	69db      	ldr	r3, [r3, #28]
 800ad44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad4c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	021b      	lsls	r3, r3, #8
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ad5e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	031b      	lsls	r3, r3, #12
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800ad72:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	031b      	lsls	r3, r3, #12
 800ad78:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800ad7c:	697a      	ldr	r2, [r7, #20]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	693a      	ldr	r2, [r7, #16]
 800ad86:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	621a      	str	r2, [r3, #32]
}
 800ad8e:	bf00      	nop
 800ad90:	371c      	adds	r7, #28
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr

0800ad9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad9a:	b480      	push	{r7}
 800ad9c:	b085      	sub	sp, #20
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	f043 0307 	orr.w	r3, r3, #7
 800adbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	609a      	str	r2, [r3, #8]
}
 800adc4:	bf00      	nop
 800adc6:	3714      	adds	r7, #20
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800add0:	b480      	push	{r7}
 800add2:	b087      	sub	sp, #28
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
 800addc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800adea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	021a      	lsls	r2, r3, #8
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	431a      	orrs	r2, r3
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	697a      	ldr	r2, [r7, #20]
 800ae02:	609a      	str	r2, [r3, #8]
}
 800ae04:	bf00      	nop
 800ae06:	371c      	adds	r7, #28
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d101      	bne.n	800ae28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae24:	2302      	movs	r3, #2
 800ae26:	e05a      	b.n	800aede <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2202      	movs	r2, #2
 800ae34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a21      	ldr	r2, [pc, #132]	@ (800aeec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d022      	beq.n	800aeb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae74:	d01d      	beq.n	800aeb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a1d      	ldr	r2, [pc, #116]	@ (800aef0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d018      	beq.n	800aeb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a1b      	ldr	r2, [pc, #108]	@ (800aef4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d013      	beq.n	800aeb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a1a      	ldr	r2, [pc, #104]	@ (800aef8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d00e      	beq.n	800aeb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a18      	ldr	r2, [pc, #96]	@ (800aefc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d009      	beq.n	800aeb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a17      	ldr	r2, [pc, #92]	@ (800af00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d004      	beq.n	800aeb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a15      	ldr	r2, [pc, #84]	@ (800af04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d10c      	bne.n	800aecc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aeb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	40010000 	.word	0x40010000
 800aef0:	40000400 	.word	0x40000400
 800aef4:	40000800 	.word	0x40000800
 800aef8:	40000c00 	.word	0x40000c00
 800aefc:	40010400 	.word	0x40010400
 800af00:	40014000 	.word	0x40014000
 800af04:	40001800 	.word	0x40001800

0800af08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af10:	bf00      	nop
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr

0800af1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af24:	bf00      	nop
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d101      	bne.n	800af42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	e042      	b.n	800afc8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d106      	bne.n	800af5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2200      	movs	r2, #0
 800af52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7f8 fb64 	bl	8003624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2224      	movs	r2, #36	@ 0x24
 800af60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68da      	ldr	r2, [r3, #12]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800af72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fe09 	bl	800bb8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	691a      	ldr	r2, [r3, #16]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800af88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	695a      	ldr	r2, [r3, #20]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800af98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	68da      	ldr	r2, [r3, #12]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800afa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2220      	movs	r2, #32
 800afb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2220      	movs	r2, #32
 800afbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3708      	adds	r7, #8
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b08a      	sub	sp, #40	@ 0x28
 800afd4:	af02      	add	r7, sp, #8
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	603b      	str	r3, [r7, #0]
 800afdc:	4613      	mov	r3, r2
 800afde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800afe0:	2300      	movs	r3, #0
 800afe2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b20      	cmp	r3, #32
 800afee:	d175      	bne.n	800b0dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d002      	beq.n	800affc <HAL_UART_Transmit+0x2c>
 800aff6:	88fb      	ldrh	r3, [r7, #6]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	e06e      	b.n	800b0de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2221      	movs	r2, #33	@ 0x21
 800b00a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b00e:	f7f8 fc59 	bl	80038c4 <HAL_GetTick>
 800b012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	88fa      	ldrh	r2, [r7, #6]
 800b018:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	88fa      	ldrh	r2, [r7, #6]
 800b01e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b028:	d108      	bne.n	800b03c <HAL_UART_Transmit+0x6c>
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d104      	bne.n	800b03c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b032:	2300      	movs	r3, #0
 800b034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	61bb      	str	r3, [r7, #24]
 800b03a:	e003      	b.n	800b044 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b040:	2300      	movs	r3, #0
 800b042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b044:	e02e      	b.n	800b0a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	9300      	str	r3, [sp, #0]
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	2200      	movs	r2, #0
 800b04e:	2180      	movs	r1, #128	@ 0x80
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	f000 fb6d 	bl	800b730 <UART_WaitOnFlagUntilTimeout>
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d005      	beq.n	800b068 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2220      	movs	r2, #32
 800b060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800b064:	2303      	movs	r3, #3
 800b066:	e03a      	b.n	800b0de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10b      	bne.n	800b086 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	881b      	ldrh	r3, [r3, #0]
 800b072:	461a      	mov	r2, r3
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b07c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	3302      	adds	r3, #2
 800b082:	61bb      	str	r3, [r7, #24]
 800b084:	e007      	b.n	800b096 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	781a      	ldrb	r2, [r3, #0]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	3301      	adds	r3, #1
 800b094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	3b01      	subs	r3, #1
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1cb      	bne.n	800b046 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	9300      	str	r3, [sp, #0]
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	2140      	movs	r1, #64	@ 0x40
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f000 fb39 	bl	800b730 <UART_WaitOnFlagUntilTimeout>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d005      	beq.n	800b0d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2220      	movs	r2, #32
 800b0c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	e006      	b.n	800b0de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2220      	movs	r2, #32
 800b0d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	e000      	b.n	800b0de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b0dc:	2302      	movs	r3, #2
  }
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3720      	adds	r7, #32
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b085      	sub	sp, #20
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	60f8      	str	r0, [r7, #12]
 800b0ee:	60b9      	str	r1, [r7, #8]
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	2b20      	cmp	r3, #32
 800b0fe:	d121      	bne.n	800b144 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d002      	beq.n	800b10c <HAL_UART_Transmit_IT+0x26>
 800b106:	88fb      	ldrh	r3, [r7, #6]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d101      	bne.n	800b110 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e01a      	b.n	800b146 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	88fa      	ldrh	r2, [r7, #6]
 800b11a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	88fa      	ldrh	r2, [r7, #6]
 800b120:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2221      	movs	r2, #33	@ 0x21
 800b12c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68da      	ldr	r2, [r3, #12]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b13e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b140:	2300      	movs	r3, #0
 800b142:	e000      	b.n	800b146 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b144:	2302      	movs	r3, #2
  }
}
 800b146:	4618      	mov	r0, r3
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b084      	sub	sp, #16
 800b156:	af00      	add	r7, sp, #0
 800b158:	60f8      	str	r0, [r7, #12]
 800b15a:	60b9      	str	r1, [r7, #8]
 800b15c:	4613      	mov	r3, r2
 800b15e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b166:	b2db      	uxtb	r3, r3
 800b168:	2b20      	cmp	r3, #32
 800b16a:	d112      	bne.n	800b192 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d002      	beq.n	800b178 <HAL_UART_Receive_IT+0x26>
 800b172:	88fb      	ldrh	r3, [r7, #6]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d101      	bne.n	800b17c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	e00b      	b.n	800b194 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2200      	movs	r2, #0
 800b180:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b182:	88fb      	ldrh	r3, [r7, #6]
 800b184:	461a      	mov	r2, r3
 800b186:	68b9      	ldr	r1, [r7, #8]
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	f000 fb2a 	bl	800b7e2 <UART_Start_Receive_IT>
 800b18e:	4603      	mov	r3, r0
 800b190:	e000      	b.n	800b194 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b192:	2302      	movs	r3, #2
  }
}
 800b194:	4618      	mov	r0, r3
 800b196:	3710      	adds	r7, #16
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b0ba      	sub	sp, #232	@ 0xe8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	695b      	ldr	r3, [r3, #20]
 800b1be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b1ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1d2:	f003 030f 	and.w	r3, r3, #15
 800b1d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b1da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d10f      	bne.n	800b202 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b1e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1e6:	f003 0320 	and.w	r3, r3, #32
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d009      	beq.n	800b202 <HAL_UART_IRQHandler+0x66>
 800b1ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1f2:	f003 0320 	and.w	r3, r3, #32
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d003      	beq.n	800b202 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fc07 	bl	800ba0e <UART_Receive_IT>
      return;
 800b200:	e273      	b.n	800b6ea <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b206:	2b00      	cmp	r3, #0
 800b208:	f000 80de 	beq.w	800b3c8 <HAL_UART_IRQHandler+0x22c>
 800b20c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b210:	f003 0301 	and.w	r3, r3, #1
 800b214:	2b00      	cmp	r3, #0
 800b216:	d106      	bne.n	800b226 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b21c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b220:	2b00      	cmp	r3, #0
 800b222:	f000 80d1 	beq.w	800b3c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b22a:	f003 0301 	and.w	r3, r3, #1
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00b      	beq.n	800b24a <HAL_UART_IRQHandler+0xae>
 800b232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d005      	beq.n	800b24a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b242:	f043 0201 	orr.w	r2, r3, #1
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b24a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b24e:	f003 0304 	and.w	r3, r3, #4
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00b      	beq.n	800b26e <HAL_UART_IRQHandler+0xd2>
 800b256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b25a:	f003 0301 	and.w	r3, r3, #1
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d005      	beq.n	800b26e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b266:	f043 0202 	orr.w	r2, r3, #2
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b26e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b272:	f003 0302 	and.w	r3, r3, #2
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00b      	beq.n	800b292 <HAL_UART_IRQHandler+0xf6>
 800b27a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b27e:	f003 0301 	and.w	r3, r3, #1
 800b282:	2b00      	cmp	r3, #0
 800b284:	d005      	beq.n	800b292 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b28a:	f043 0204 	orr.w	r2, r3, #4
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b296:	f003 0308 	and.w	r3, r3, #8
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d011      	beq.n	800b2c2 <HAL_UART_IRQHandler+0x126>
 800b29e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2a2:	f003 0320 	and.w	r3, r3, #32
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d105      	bne.n	800b2b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b2aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d005      	beq.n	800b2c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2ba:	f043 0208 	orr.w	r2, r3, #8
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	f000 820a 	beq.w	800b6e0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b2cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2d0:	f003 0320 	and.w	r3, r3, #32
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d008      	beq.n	800b2ea <HAL_UART_IRQHandler+0x14e>
 800b2d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2dc:	f003 0320 	and.w	r3, r3, #32
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 fb92 	bl	800ba0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	695b      	ldr	r3, [r3, #20]
 800b2f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2f4:	2b40      	cmp	r3, #64	@ 0x40
 800b2f6:	bf0c      	ite	eq
 800b2f8:	2301      	moveq	r3, #1
 800b2fa:	2300      	movne	r3, #0
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b306:	f003 0308 	and.w	r3, r3, #8
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d103      	bne.n	800b316 <HAL_UART_IRQHandler+0x17a>
 800b30e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b312:	2b00      	cmp	r3, #0
 800b314:	d04f      	beq.n	800b3b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fa9d 	bl	800b856 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	695b      	ldr	r3, [r3, #20]
 800b322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b326:	2b40      	cmp	r3, #64	@ 0x40
 800b328:	d141      	bne.n	800b3ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	3314      	adds	r3, #20
 800b330:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b334:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b338:	e853 3f00 	ldrex	r3, [r3]
 800b33c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	3314      	adds	r3, #20
 800b352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b356:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b35a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b366:	e841 2300 	strex	r3, r2, [r1]
 800b36a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b36e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1d9      	bne.n	800b32a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d013      	beq.n	800b3a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b382:	4a8a      	ldr	r2, [pc, #552]	@ (800b5ac <HAL_UART_IRQHandler+0x410>)
 800b384:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7fa fa16 	bl	80057bc <HAL_DMA_Abort_IT>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d016      	beq.n	800b3c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b39a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3a4:	e00e      	b.n	800b3c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 f9ac 	bl	800b704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3ac:	e00a      	b.n	800b3c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 f9a8 	bl	800b704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3b4:	e006      	b.n	800b3c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 f9a4 	bl	800b704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b3c2:	e18d      	b.n	800b6e0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3c4:	bf00      	nop
    return;
 800b3c6:	e18b      	b.n	800b6e0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	f040 8167 	bne.w	800b6a0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b3d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3d6:	f003 0310 	and.w	r3, r3, #16
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f000 8160 	beq.w	800b6a0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b3e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3e4:	f003 0310 	and.w	r3, r3, #16
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f000 8159 	beq.w	800b6a0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	60bb      	str	r3, [r7, #8]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	60bb      	str	r3, [r7, #8]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	60bb      	str	r3, [r7, #8]
 800b402:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	695b      	ldr	r3, [r3, #20]
 800b40a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b40e:	2b40      	cmp	r3, #64	@ 0x40
 800b410:	f040 80ce 	bne.w	800b5b0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b424:	2b00      	cmp	r3, #0
 800b426:	f000 80a9 	beq.w	800b57c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b42e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b432:	429a      	cmp	r2, r3
 800b434:	f080 80a2 	bcs.w	800b57c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b43e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b444:	69db      	ldr	r3, [r3, #28]
 800b446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b44a:	f000 8088 	beq.w	800b55e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	330c      	adds	r3, #12
 800b454:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b458:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b45c:	e853 3f00 	ldrex	r3, [r3]
 800b460:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b464:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b468:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b46c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	330c      	adds	r3, #12
 800b476:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b47a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b47e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b482:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b486:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b48a:	e841 2300 	strex	r3, r2, [r1]
 800b48e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b492:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b496:	2b00      	cmp	r3, #0
 800b498:	d1d9      	bne.n	800b44e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	3314      	adds	r3, #20
 800b4a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b4a4:	e853 3f00 	ldrex	r3, [r3]
 800b4a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b4aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b4ac:	f023 0301 	bic.w	r3, r3, #1
 800b4b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3314      	adds	r3, #20
 800b4ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b4be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b4c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b4c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b4ca:	e841 2300 	strex	r3, r2, [r1]
 800b4ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b4d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1e1      	bne.n	800b49a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	3314      	adds	r3, #20
 800b4dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b4e0:	e853 3f00 	ldrex	r3, [r3]
 800b4e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b4e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	3314      	adds	r3, #20
 800b4f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b4fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b4fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b500:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b502:	e841 2300 	strex	r3, r2, [r1]
 800b506:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b508:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1e3      	bne.n	800b4d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2220      	movs	r2, #32
 800b512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	330c      	adds	r3, #12
 800b522:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b526:	e853 3f00 	ldrex	r3, [r3]
 800b52a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b52c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b52e:	f023 0310 	bic.w	r3, r3, #16
 800b532:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	330c      	adds	r3, #12
 800b53c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b540:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b542:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b544:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b546:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b548:	e841 2300 	strex	r3, r2, [r1]
 800b54c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b54e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1e3      	bne.n	800b51c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fa f8bf 	bl	80056dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2202      	movs	r2, #2
 800b562:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	b29b      	uxth	r3, r3
 800b572:	4619      	mov	r1, r3
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 f8cf 	bl	800b718 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b57a:	e0b3      	b.n	800b6e4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b580:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b584:	429a      	cmp	r2, r3
 800b586:	f040 80ad 	bne.w	800b6e4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b58e:	69db      	ldr	r3, [r3, #28]
 800b590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b594:	f040 80a6 	bne.w	800b6e4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2202      	movs	r2, #2
 800b59c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 f8b7 	bl	800b718 <HAL_UARTEx_RxEventCallback>
      return;
 800b5aa:	e09b      	b.n	800b6e4 <HAL_UART_IRQHandler+0x548>
 800b5ac:	0800b91d 	.word	0x0800b91d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	f000 808e 	beq.w	800b6e8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b5cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f000 8089 	beq.w	800b6e8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	330c      	adds	r3, #12
 800b5dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e0:	e853 3f00 	ldrex	r3, [r3]
 800b5e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b5e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	330c      	adds	r3, #12
 800b5f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b5fa:	647a      	str	r2, [r7, #68]	@ 0x44
 800b5fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b600:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b602:	e841 2300 	strex	r3, r2, [r1]
 800b606:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1e3      	bne.n	800b5d6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	3314      	adds	r3, #20
 800b614:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b618:	e853 3f00 	ldrex	r3, [r3]
 800b61c:	623b      	str	r3, [r7, #32]
   return(result);
 800b61e:	6a3b      	ldr	r3, [r7, #32]
 800b620:	f023 0301 	bic.w	r3, r3, #1
 800b624:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	3314      	adds	r3, #20
 800b62e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b632:	633a      	str	r2, [r7, #48]	@ 0x30
 800b634:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b636:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b63a:	e841 2300 	strex	r3, r2, [r1]
 800b63e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1e3      	bne.n	800b60e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2220      	movs	r2, #32
 800b64a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	330c      	adds	r3, #12
 800b65a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	e853 3f00 	ldrex	r3, [r3]
 800b662:	60fb      	str	r3, [r7, #12]
   return(result);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f023 0310 	bic.w	r3, r3, #16
 800b66a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	330c      	adds	r3, #12
 800b674:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b678:	61fa      	str	r2, [r7, #28]
 800b67a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67c:	69b9      	ldr	r1, [r7, #24]
 800b67e:	69fa      	ldr	r2, [r7, #28]
 800b680:	e841 2300 	strex	r3, r2, [r1]
 800b684:	617b      	str	r3, [r7, #20]
   return(result);
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1e3      	bne.n	800b654 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2202      	movs	r2, #2
 800b690:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b692:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b696:	4619      	mov	r1, r3
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 f83d 	bl	800b718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b69e:	e023      	b.n	800b6e8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b6a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d009      	beq.n	800b6c0 <HAL_UART_IRQHandler+0x524>
 800b6ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d003      	beq.n	800b6c0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 f940 	bl	800b93e <UART_Transmit_IT>
    return;
 800b6be:	e014      	b.n	800b6ea <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b6c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00e      	beq.n	800b6ea <HAL_UART_IRQHandler+0x54e>
 800b6cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d008      	beq.n	800b6ea <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 f980 	bl	800b9de <UART_EndTransmit_IT>
    return;
 800b6de:	e004      	b.n	800b6ea <HAL_UART_IRQHandler+0x54e>
    return;
 800b6e0:	bf00      	nop
 800b6e2:	e002      	b.n	800b6ea <HAL_UART_IRQHandler+0x54e>
      return;
 800b6e4:	bf00      	nop
 800b6e6:	e000      	b.n	800b6ea <HAL_UART_IRQHandler+0x54e>
      return;
 800b6e8:	bf00      	nop
  }
}
 800b6ea:	37e8      	adds	r7, #232	@ 0xe8
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b6f8:	bf00      	nop
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b70c:	bf00      	nop
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	460b      	mov	r3, r1
 800b722:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b724:	bf00      	nop
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b086      	sub	sp, #24
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	603b      	str	r3, [r7, #0]
 800b73c:	4613      	mov	r3, r2
 800b73e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b740:	e03b      	b.n	800b7ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b742:	6a3b      	ldr	r3, [r7, #32]
 800b744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b748:	d037      	beq.n	800b7ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b74a:	f7f8 f8bb 	bl	80038c4 <HAL_GetTick>
 800b74e:	4602      	mov	r2, r0
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	1ad3      	subs	r3, r2, r3
 800b754:	6a3a      	ldr	r2, [r7, #32]
 800b756:	429a      	cmp	r2, r3
 800b758:	d302      	bcc.n	800b760 <UART_WaitOnFlagUntilTimeout+0x30>
 800b75a:	6a3b      	ldr	r3, [r7, #32]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d101      	bne.n	800b764 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b760:	2303      	movs	r3, #3
 800b762:	e03a      	b.n	800b7da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	f003 0304 	and.w	r3, r3, #4
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d023      	beq.n	800b7ba <UART_WaitOnFlagUntilTimeout+0x8a>
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	2b80      	cmp	r3, #128	@ 0x80
 800b776:	d020      	beq.n	800b7ba <UART_WaitOnFlagUntilTimeout+0x8a>
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	2b40      	cmp	r3, #64	@ 0x40
 800b77c:	d01d      	beq.n	800b7ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f003 0308 	and.w	r3, r3, #8
 800b788:	2b08      	cmp	r3, #8
 800b78a:	d116      	bne.n	800b7ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b78c:	2300      	movs	r3, #0
 800b78e:	617b      	str	r3, [r7, #20]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	617b      	str	r3, [r7, #20]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	617b      	str	r3, [r7, #20]
 800b7a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	f000 f857 	bl	800b856 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2208      	movs	r2, #8
 800b7ac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e00f      	b.n	800b7da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	4013      	ands	r3, r2
 800b7c4:	68ba      	ldr	r2, [r7, #8]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	bf0c      	ite	eq
 800b7ca:	2301      	moveq	r3, #1
 800b7cc:	2300      	movne	r3, #0
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	79fb      	ldrb	r3, [r7, #7]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d0b4      	beq.n	800b742 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7d8:	2300      	movs	r3, #0
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3718      	adds	r7, #24
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7e2:	b480      	push	{r7}
 800b7e4:	b085      	sub	sp, #20
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	60f8      	str	r0, [r7, #12]
 800b7ea:	60b9      	str	r1, [r7, #8]
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	88fa      	ldrh	r2, [r7, #6]
 800b7fa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	88fa      	ldrh	r2, [r7, #6]
 800b800:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2200      	movs	r2, #0
 800b806:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2222      	movs	r2, #34	@ 0x22
 800b80c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	691b      	ldr	r3, [r3, #16]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d007      	beq.n	800b828 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	68da      	ldr	r2, [r3, #12]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b826:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	695a      	ldr	r2, [r3, #20]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f042 0201 	orr.w	r2, r2, #1
 800b836:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	68da      	ldr	r2, [r3, #12]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f042 0220 	orr.w	r2, r2, #32
 800b846:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3714      	adds	r7, #20
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b856:	b480      	push	{r7}
 800b858:	b095      	sub	sp, #84	@ 0x54
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	330c      	adds	r3, #12
 800b864:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b868:	e853 3f00 	ldrex	r3, [r3]
 800b86c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b870:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b874:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	330c      	adds	r3, #12
 800b87c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b87e:	643a      	str	r2, [r7, #64]	@ 0x40
 800b880:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b882:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b884:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b886:	e841 2300 	strex	r3, r2, [r1]
 800b88a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b88c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d1e5      	bne.n	800b85e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	3314      	adds	r3, #20
 800b898:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89a:	6a3b      	ldr	r3, [r7, #32]
 800b89c:	e853 3f00 	ldrex	r3, [r3]
 800b8a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	f023 0301 	bic.w	r3, r3, #1
 800b8a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3314      	adds	r3, #20
 800b8b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b8b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8ba:	e841 2300 	strex	r3, r2, [r1]
 800b8be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d1e5      	bne.n	800b892 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d119      	bne.n	800b902 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	330c      	adds	r3, #12
 800b8d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	e853 3f00 	ldrex	r3, [r3]
 800b8dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	f023 0310 	bic.w	r3, r3, #16
 800b8e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	330c      	adds	r3, #12
 800b8ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8ee:	61ba      	str	r2, [r7, #24]
 800b8f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f2:	6979      	ldr	r1, [r7, #20]
 800b8f4:	69ba      	ldr	r2, [r7, #24]
 800b8f6:	e841 2300 	strex	r3, r2, [r1]
 800b8fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1e5      	bne.n	800b8ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2220      	movs	r2, #32
 800b906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2200      	movs	r2, #0
 800b90e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b910:	bf00      	nop
 800b912:	3754      	adds	r7, #84	@ 0x54
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b928:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2200      	movs	r2, #0
 800b92e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b930:	68f8      	ldr	r0, [r7, #12]
 800b932:	f7ff fee7 	bl	800b704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b936:	bf00      	nop
 800b938:	3710      	adds	r7, #16
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b93e:	b480      	push	{r7}
 800b940:	b085      	sub	sp, #20
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	2b21      	cmp	r3, #33	@ 0x21
 800b950:	d13e      	bne.n	800b9d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b95a:	d114      	bne.n	800b986 <UART_Transmit_IT+0x48>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	691b      	ldr	r3, [r3, #16]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d110      	bne.n	800b986 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a1b      	ldr	r3, [r3, #32]
 800b968:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	881b      	ldrh	r3, [r3, #0]
 800b96e:	461a      	mov	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b978:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a1b      	ldr	r3, [r3, #32]
 800b97e:	1c9a      	adds	r2, r3, #2
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	621a      	str	r2, [r3, #32]
 800b984:	e008      	b.n	800b998 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6a1b      	ldr	r3, [r3, #32]
 800b98a:	1c59      	adds	r1, r3, #1
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	6211      	str	r1, [r2, #32]
 800b990:	781a      	ldrb	r2, [r3, #0]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	3b01      	subs	r3, #1
 800b9a0:	b29b      	uxth	r3, r3
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d10f      	bne.n	800b9cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	68da      	ldr	r2, [r3, #12]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b9ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	68da      	ldr	r2, [r3, #12]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b9ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	e000      	b.n	800b9d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b9d0:	2302      	movs	r3, #2
  }
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3714      	adds	r7, #20
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b082      	sub	sp, #8
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	68da      	ldr	r2, [r3, #12]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b9f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2220      	movs	r2, #32
 800b9fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f7ff fe76 	bl	800b6f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3708      	adds	r7, #8
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b08c      	sub	sp, #48	@ 0x30
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800ba16:	2300      	movs	r3, #0
 800ba18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	2b22      	cmp	r3, #34	@ 0x22
 800ba28:	f040 80aa 	bne.w	800bb80 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba34:	d115      	bne.n	800ba62 <UART_Receive_IT+0x54>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	691b      	ldr	r3, [r3, #16]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d111      	bne.n	800ba62 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba42:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba5a:	1c9a      	adds	r2, r3, #2
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	629a      	str	r2, [r3, #40]	@ 0x28
 800ba60:	e024      	b.n	800baac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba70:	d007      	beq.n	800ba82 <UART_Receive_IT+0x74>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d10a      	bne.n	800ba90 <UART_Receive_IT+0x82>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	691b      	ldr	r3, [r3, #16]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d106      	bne.n	800ba90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	b2da      	uxtb	r2, r3
 800ba8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba8c:	701a      	strb	r2, [r3, #0]
 800ba8e:	e008      	b.n	800baa2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba9c:	b2da      	uxtb	r2, r3
 800ba9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baa6:	1c5a      	adds	r2, r3, #1
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	3b01      	subs	r3, #1
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	4619      	mov	r1, r3
 800baba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800babc:	2b00      	cmp	r3, #0
 800babe:	d15d      	bne.n	800bb7c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68da      	ldr	r2, [r3, #12]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f022 0220 	bic.w	r2, r2, #32
 800bace:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	68da      	ldr	r2, [r3, #12]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bade:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	695a      	ldr	r2, [r3, #20]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f022 0201 	bic.w	r2, r2, #1
 800baee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2220      	movs	r2, #32
 800baf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d135      	bne.n	800bb72 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	330c      	adds	r3, #12
 800bb12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	e853 3f00 	ldrex	r3, [r3]
 800bb1a:	613b      	str	r3, [r7, #16]
   return(result);
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	f023 0310 	bic.w	r3, r3, #16
 800bb22:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	330c      	adds	r3, #12
 800bb2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb2c:	623a      	str	r2, [r7, #32]
 800bb2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb30:	69f9      	ldr	r1, [r7, #28]
 800bb32:	6a3a      	ldr	r2, [r7, #32]
 800bb34:	e841 2300 	strex	r3, r2, [r1]
 800bb38:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb3a:	69bb      	ldr	r3, [r7, #24]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1e5      	bne.n	800bb0c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f003 0310 	and.w	r3, r3, #16
 800bb4a:	2b10      	cmp	r3, #16
 800bb4c:	d10a      	bne.n	800bb64 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bb4e:	2300      	movs	r3, #0
 800bb50:	60fb      	str	r3, [r7, #12]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	60fb      	str	r3, [r7, #12]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	60fb      	str	r3, [r7, #12]
 800bb62:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7ff fdd4 	bl	800b718 <HAL_UARTEx_RxEventCallback>
 800bb70:	e002      	b.n	800bb78 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7f7 fcc4 	bl	8003500 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	e002      	b.n	800bb82 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	e000      	b.n	800bb82 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bb80:	2302      	movs	r3, #2
  }
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3730      	adds	r7, #48	@ 0x30
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
	...

0800bb8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb90:	b0c0      	sub	sp, #256	@ 0x100
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bba8:	68d9      	ldr	r1, [r3, #12]
 800bbaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	ea40 0301 	orr.w	r3, r0, r1
 800bbb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bbb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbba:	689a      	ldr	r2, [r3, #8]
 800bbbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	431a      	orrs	r2, r3
 800bbc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbc8:	695b      	ldr	r3, [r3, #20]
 800bbca:	431a      	orrs	r2, r3
 800bbcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbd0:	69db      	ldr	r3, [r3, #28]
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bbd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800bbe4:	f021 010c 	bic.w	r1, r1, #12
 800bbe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bbf2:	430b      	orrs	r3, r1
 800bbf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bbf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	695b      	ldr	r3, [r3, #20]
 800bbfe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800bc02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc06:	6999      	ldr	r1, [r3, #24]
 800bc08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	ea40 0301 	orr.w	r3, r0, r1
 800bc12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bc14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	4b8f      	ldr	r3, [pc, #572]	@ (800be58 <UART_SetConfig+0x2cc>)
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d005      	beq.n	800bc2c <UART_SetConfig+0xa0>
 800bc20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	4b8d      	ldr	r3, [pc, #564]	@ (800be5c <UART_SetConfig+0x2d0>)
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d104      	bne.n	800bc36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bc2c:	f7fc fdae 	bl	800878c <HAL_RCC_GetPCLK2Freq>
 800bc30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800bc34:	e003      	b.n	800bc3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc36:	f7fc fd95 	bl	8008764 <HAL_RCC_GetPCLK1Freq>
 800bc3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc42:	69db      	ldr	r3, [r3, #28]
 800bc44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc48:	f040 810c 	bne.w	800be64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bc4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bc50:	2200      	movs	r2, #0
 800bc52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bc56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800bc5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800bc5e:	4622      	mov	r2, r4
 800bc60:	462b      	mov	r3, r5
 800bc62:	1891      	adds	r1, r2, r2
 800bc64:	65b9      	str	r1, [r7, #88]	@ 0x58
 800bc66:	415b      	adcs	r3, r3
 800bc68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bc6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800bc6e:	4621      	mov	r1, r4
 800bc70:	eb12 0801 	adds.w	r8, r2, r1
 800bc74:	4629      	mov	r1, r5
 800bc76:	eb43 0901 	adc.w	r9, r3, r1
 800bc7a:	f04f 0200 	mov.w	r2, #0
 800bc7e:	f04f 0300 	mov.w	r3, #0
 800bc82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bc86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bc8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bc8e:	4690      	mov	r8, r2
 800bc90:	4699      	mov	r9, r3
 800bc92:	4623      	mov	r3, r4
 800bc94:	eb18 0303 	adds.w	r3, r8, r3
 800bc98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bc9c:	462b      	mov	r3, r5
 800bc9e:	eb49 0303 	adc.w	r3, r9, r3
 800bca2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bcb2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800bcb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bcba:	460b      	mov	r3, r1
 800bcbc:	18db      	adds	r3, r3, r3
 800bcbe:	653b      	str	r3, [r7, #80]	@ 0x50
 800bcc0:	4613      	mov	r3, r2
 800bcc2:	eb42 0303 	adc.w	r3, r2, r3
 800bcc6:	657b      	str	r3, [r7, #84]	@ 0x54
 800bcc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800bccc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800bcd0:	f7f4 febc 	bl	8000a4c <__aeabi_uldivmod>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	4b61      	ldr	r3, [pc, #388]	@ (800be60 <UART_SetConfig+0x2d4>)
 800bcda:	fba3 2302 	umull	r2, r3, r3, r2
 800bcde:	095b      	lsrs	r3, r3, #5
 800bce0:	011c      	lsls	r4, r3, #4
 800bce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bce6:	2200      	movs	r2, #0
 800bce8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bcec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800bcf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800bcf4:	4642      	mov	r2, r8
 800bcf6:	464b      	mov	r3, r9
 800bcf8:	1891      	adds	r1, r2, r2
 800bcfa:	64b9      	str	r1, [r7, #72]	@ 0x48
 800bcfc:	415b      	adcs	r3, r3
 800bcfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800bd04:	4641      	mov	r1, r8
 800bd06:	eb12 0a01 	adds.w	sl, r2, r1
 800bd0a:	4649      	mov	r1, r9
 800bd0c:	eb43 0b01 	adc.w	fp, r3, r1
 800bd10:	f04f 0200 	mov.w	r2, #0
 800bd14:	f04f 0300 	mov.w	r3, #0
 800bd18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bd1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bd20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bd24:	4692      	mov	sl, r2
 800bd26:	469b      	mov	fp, r3
 800bd28:	4643      	mov	r3, r8
 800bd2a:	eb1a 0303 	adds.w	r3, sl, r3
 800bd2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bd32:	464b      	mov	r3, r9
 800bd34:	eb4b 0303 	adc.w	r3, fp, r3
 800bd38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bd3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bd48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800bd4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bd50:	460b      	mov	r3, r1
 800bd52:	18db      	adds	r3, r3, r3
 800bd54:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd56:	4613      	mov	r3, r2
 800bd58:	eb42 0303 	adc.w	r3, r2, r3
 800bd5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800bd62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800bd66:	f7f4 fe71 	bl	8000a4c <__aeabi_uldivmod>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	4611      	mov	r1, r2
 800bd70:	4b3b      	ldr	r3, [pc, #236]	@ (800be60 <UART_SetConfig+0x2d4>)
 800bd72:	fba3 2301 	umull	r2, r3, r3, r1
 800bd76:	095b      	lsrs	r3, r3, #5
 800bd78:	2264      	movs	r2, #100	@ 0x64
 800bd7a:	fb02 f303 	mul.w	r3, r2, r3
 800bd7e:	1acb      	subs	r3, r1, r3
 800bd80:	00db      	lsls	r3, r3, #3
 800bd82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800bd86:	4b36      	ldr	r3, [pc, #216]	@ (800be60 <UART_SetConfig+0x2d4>)
 800bd88:	fba3 2302 	umull	r2, r3, r3, r2
 800bd8c:	095b      	lsrs	r3, r3, #5
 800bd8e:	005b      	lsls	r3, r3, #1
 800bd90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800bd94:	441c      	add	r4, r3
 800bd96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bda0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800bda4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800bda8:	4642      	mov	r2, r8
 800bdaa:	464b      	mov	r3, r9
 800bdac:	1891      	adds	r1, r2, r2
 800bdae:	63b9      	str	r1, [r7, #56]	@ 0x38
 800bdb0:	415b      	adcs	r3, r3
 800bdb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bdb8:	4641      	mov	r1, r8
 800bdba:	1851      	adds	r1, r2, r1
 800bdbc:	6339      	str	r1, [r7, #48]	@ 0x30
 800bdbe:	4649      	mov	r1, r9
 800bdc0:	414b      	adcs	r3, r1
 800bdc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdc4:	f04f 0200 	mov.w	r2, #0
 800bdc8:	f04f 0300 	mov.w	r3, #0
 800bdcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800bdd0:	4659      	mov	r1, fp
 800bdd2:	00cb      	lsls	r3, r1, #3
 800bdd4:	4651      	mov	r1, sl
 800bdd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bdda:	4651      	mov	r1, sl
 800bddc:	00ca      	lsls	r2, r1, #3
 800bdde:	4610      	mov	r0, r2
 800bde0:	4619      	mov	r1, r3
 800bde2:	4603      	mov	r3, r0
 800bde4:	4642      	mov	r2, r8
 800bde6:	189b      	adds	r3, r3, r2
 800bde8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bdec:	464b      	mov	r3, r9
 800bdee:	460a      	mov	r2, r1
 800bdf0:	eb42 0303 	adc.w	r3, r2, r3
 800bdf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bdf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800be04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800be08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800be0c:	460b      	mov	r3, r1
 800be0e:	18db      	adds	r3, r3, r3
 800be10:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be12:	4613      	mov	r3, r2
 800be14:	eb42 0303 	adc.w	r3, r2, r3
 800be18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800be1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800be22:	f7f4 fe13 	bl	8000a4c <__aeabi_uldivmod>
 800be26:	4602      	mov	r2, r0
 800be28:	460b      	mov	r3, r1
 800be2a:	4b0d      	ldr	r3, [pc, #52]	@ (800be60 <UART_SetConfig+0x2d4>)
 800be2c:	fba3 1302 	umull	r1, r3, r3, r2
 800be30:	095b      	lsrs	r3, r3, #5
 800be32:	2164      	movs	r1, #100	@ 0x64
 800be34:	fb01 f303 	mul.w	r3, r1, r3
 800be38:	1ad3      	subs	r3, r2, r3
 800be3a:	00db      	lsls	r3, r3, #3
 800be3c:	3332      	adds	r3, #50	@ 0x32
 800be3e:	4a08      	ldr	r2, [pc, #32]	@ (800be60 <UART_SetConfig+0x2d4>)
 800be40:	fba2 2303 	umull	r2, r3, r2, r3
 800be44:	095b      	lsrs	r3, r3, #5
 800be46:	f003 0207 	and.w	r2, r3, #7
 800be4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4422      	add	r2, r4
 800be52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800be54:	e106      	b.n	800c064 <UART_SetConfig+0x4d8>
 800be56:	bf00      	nop
 800be58:	40011000 	.word	0x40011000
 800be5c:	40011400 	.word	0x40011400
 800be60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800be64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800be68:	2200      	movs	r2, #0
 800be6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800be6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800be72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800be76:	4642      	mov	r2, r8
 800be78:	464b      	mov	r3, r9
 800be7a:	1891      	adds	r1, r2, r2
 800be7c:	6239      	str	r1, [r7, #32]
 800be7e:	415b      	adcs	r3, r3
 800be80:	627b      	str	r3, [r7, #36]	@ 0x24
 800be82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800be86:	4641      	mov	r1, r8
 800be88:	1854      	adds	r4, r2, r1
 800be8a:	4649      	mov	r1, r9
 800be8c:	eb43 0501 	adc.w	r5, r3, r1
 800be90:	f04f 0200 	mov.w	r2, #0
 800be94:	f04f 0300 	mov.w	r3, #0
 800be98:	00eb      	lsls	r3, r5, #3
 800be9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800be9e:	00e2      	lsls	r2, r4, #3
 800bea0:	4614      	mov	r4, r2
 800bea2:	461d      	mov	r5, r3
 800bea4:	4643      	mov	r3, r8
 800bea6:	18e3      	adds	r3, r4, r3
 800bea8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800beac:	464b      	mov	r3, r9
 800beae:	eb45 0303 	adc.w	r3, r5, r3
 800beb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800beb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bec2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bec6:	f04f 0200 	mov.w	r2, #0
 800beca:	f04f 0300 	mov.w	r3, #0
 800bece:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bed2:	4629      	mov	r1, r5
 800bed4:	008b      	lsls	r3, r1, #2
 800bed6:	4621      	mov	r1, r4
 800bed8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bedc:	4621      	mov	r1, r4
 800bede:	008a      	lsls	r2, r1, #2
 800bee0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bee4:	f7f4 fdb2 	bl	8000a4c <__aeabi_uldivmod>
 800bee8:	4602      	mov	r2, r0
 800beea:	460b      	mov	r3, r1
 800beec:	4b60      	ldr	r3, [pc, #384]	@ (800c070 <UART_SetConfig+0x4e4>)
 800beee:	fba3 2302 	umull	r2, r3, r3, r2
 800bef2:	095b      	lsrs	r3, r3, #5
 800bef4:	011c      	lsls	r4, r3, #4
 800bef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800befa:	2200      	movs	r2, #0
 800befc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bf00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bf04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bf08:	4642      	mov	r2, r8
 800bf0a:	464b      	mov	r3, r9
 800bf0c:	1891      	adds	r1, r2, r2
 800bf0e:	61b9      	str	r1, [r7, #24]
 800bf10:	415b      	adcs	r3, r3
 800bf12:	61fb      	str	r3, [r7, #28]
 800bf14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bf18:	4641      	mov	r1, r8
 800bf1a:	1851      	adds	r1, r2, r1
 800bf1c:	6139      	str	r1, [r7, #16]
 800bf1e:	4649      	mov	r1, r9
 800bf20:	414b      	adcs	r3, r1
 800bf22:	617b      	str	r3, [r7, #20]
 800bf24:	f04f 0200 	mov.w	r2, #0
 800bf28:	f04f 0300 	mov.w	r3, #0
 800bf2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bf30:	4659      	mov	r1, fp
 800bf32:	00cb      	lsls	r3, r1, #3
 800bf34:	4651      	mov	r1, sl
 800bf36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf3a:	4651      	mov	r1, sl
 800bf3c:	00ca      	lsls	r2, r1, #3
 800bf3e:	4610      	mov	r0, r2
 800bf40:	4619      	mov	r1, r3
 800bf42:	4603      	mov	r3, r0
 800bf44:	4642      	mov	r2, r8
 800bf46:	189b      	adds	r3, r3, r2
 800bf48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bf4c:	464b      	mov	r3, r9
 800bf4e:	460a      	mov	r2, r1
 800bf50:	eb42 0303 	adc.w	r3, r2, r3
 800bf54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bf58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bf62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bf64:	f04f 0200 	mov.w	r2, #0
 800bf68:	f04f 0300 	mov.w	r3, #0
 800bf6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bf70:	4649      	mov	r1, r9
 800bf72:	008b      	lsls	r3, r1, #2
 800bf74:	4641      	mov	r1, r8
 800bf76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf7a:	4641      	mov	r1, r8
 800bf7c:	008a      	lsls	r2, r1, #2
 800bf7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bf82:	f7f4 fd63 	bl	8000a4c <__aeabi_uldivmod>
 800bf86:	4602      	mov	r2, r0
 800bf88:	460b      	mov	r3, r1
 800bf8a:	4611      	mov	r1, r2
 800bf8c:	4b38      	ldr	r3, [pc, #224]	@ (800c070 <UART_SetConfig+0x4e4>)
 800bf8e:	fba3 2301 	umull	r2, r3, r3, r1
 800bf92:	095b      	lsrs	r3, r3, #5
 800bf94:	2264      	movs	r2, #100	@ 0x64
 800bf96:	fb02 f303 	mul.w	r3, r2, r3
 800bf9a:	1acb      	subs	r3, r1, r3
 800bf9c:	011b      	lsls	r3, r3, #4
 800bf9e:	3332      	adds	r3, #50	@ 0x32
 800bfa0:	4a33      	ldr	r2, [pc, #204]	@ (800c070 <UART_SetConfig+0x4e4>)
 800bfa2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfa6:	095b      	lsrs	r3, r3, #5
 800bfa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bfac:	441c      	add	r4, r3
 800bfae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	673b      	str	r3, [r7, #112]	@ 0x70
 800bfb6:	677a      	str	r2, [r7, #116]	@ 0x74
 800bfb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bfbc:	4642      	mov	r2, r8
 800bfbe:	464b      	mov	r3, r9
 800bfc0:	1891      	adds	r1, r2, r2
 800bfc2:	60b9      	str	r1, [r7, #8]
 800bfc4:	415b      	adcs	r3, r3
 800bfc6:	60fb      	str	r3, [r7, #12]
 800bfc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bfcc:	4641      	mov	r1, r8
 800bfce:	1851      	adds	r1, r2, r1
 800bfd0:	6039      	str	r1, [r7, #0]
 800bfd2:	4649      	mov	r1, r9
 800bfd4:	414b      	adcs	r3, r1
 800bfd6:	607b      	str	r3, [r7, #4]
 800bfd8:	f04f 0200 	mov.w	r2, #0
 800bfdc:	f04f 0300 	mov.w	r3, #0
 800bfe0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bfe4:	4659      	mov	r1, fp
 800bfe6:	00cb      	lsls	r3, r1, #3
 800bfe8:	4651      	mov	r1, sl
 800bfea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bfee:	4651      	mov	r1, sl
 800bff0:	00ca      	lsls	r2, r1, #3
 800bff2:	4610      	mov	r0, r2
 800bff4:	4619      	mov	r1, r3
 800bff6:	4603      	mov	r3, r0
 800bff8:	4642      	mov	r2, r8
 800bffa:	189b      	adds	r3, r3, r2
 800bffc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bffe:	464b      	mov	r3, r9
 800c000:	460a      	mov	r2, r1
 800c002:	eb42 0303 	adc.w	r3, r2, r3
 800c006:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	663b      	str	r3, [r7, #96]	@ 0x60
 800c012:	667a      	str	r2, [r7, #100]	@ 0x64
 800c014:	f04f 0200 	mov.w	r2, #0
 800c018:	f04f 0300 	mov.w	r3, #0
 800c01c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c020:	4649      	mov	r1, r9
 800c022:	008b      	lsls	r3, r1, #2
 800c024:	4641      	mov	r1, r8
 800c026:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c02a:	4641      	mov	r1, r8
 800c02c:	008a      	lsls	r2, r1, #2
 800c02e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c032:	f7f4 fd0b 	bl	8000a4c <__aeabi_uldivmod>
 800c036:	4602      	mov	r2, r0
 800c038:	460b      	mov	r3, r1
 800c03a:	4b0d      	ldr	r3, [pc, #52]	@ (800c070 <UART_SetConfig+0x4e4>)
 800c03c:	fba3 1302 	umull	r1, r3, r3, r2
 800c040:	095b      	lsrs	r3, r3, #5
 800c042:	2164      	movs	r1, #100	@ 0x64
 800c044:	fb01 f303 	mul.w	r3, r1, r3
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	011b      	lsls	r3, r3, #4
 800c04c:	3332      	adds	r3, #50	@ 0x32
 800c04e:	4a08      	ldr	r2, [pc, #32]	@ (800c070 <UART_SetConfig+0x4e4>)
 800c050:	fba2 2303 	umull	r2, r3, r2, r3
 800c054:	095b      	lsrs	r3, r3, #5
 800c056:	f003 020f 	and.w	r2, r3, #15
 800c05a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4422      	add	r2, r4
 800c062:	609a      	str	r2, [r3, #8]
}
 800c064:	bf00      	nop
 800c066:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c06a:	46bd      	mov	sp, r7
 800c06c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c070:	51eb851f 	.word	0x51eb851f

0800c074 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c074:	b084      	sub	sp, #16
 800c076:	b480      	push	{r7}
 800c078:	b085      	sub	sp, #20
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
 800c07e:	f107 001c 	add.w	r0, r7, #28
 800c082:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c086:	2300      	movs	r3, #0
 800c088:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c08a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c08c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c08e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800c092:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800c096:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800c09a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800c09e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800c0ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c0b2:	68fa      	ldr	r2, [r7, #12]
 800c0b4:	431a      	orrs	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3714      	adds	r7, #20
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	b004      	add	sp, #16
 800c0c8:	4770      	bx	lr

0800c0ca <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c0ca:	b480      	push	{r7}
 800c0cc:	b083      	sub	sp, #12
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr

0800c0e4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800c0f8:	2300      	movs	r3, #0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	370c      	adds	r7, #12
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c106:	b480      	push	{r7}
 800c108:	b083      	sub	sp, #12
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2203      	movs	r2, #3
 800c112:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	370c      	adds	r7, #12
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr

0800c122 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c122:	b480      	push	{r7}
 800c124:	b083      	sub	sp, #12
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f003 0303 	and.w	r3, r3, #3
}
 800c132:	4618      	mov	r0, r3
 800c134:	370c      	adds	r7, #12
 800c136:	46bd      	mov	sp, r7
 800c138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13c:	4770      	bx	lr

0800c13e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c13e:	b480      	push	{r7}
 800c140:	b085      	sub	sp, #20
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
 800c146:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c148:	2300      	movs	r3, #0
 800c14a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c15c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c162:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c168:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c16a:	68fa      	ldr	r2, [r7, #12]
 800c16c:	4313      	orrs	r3, r2
 800c16e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c178:	f023 030f 	bic.w	r3, r3, #15
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	431a      	orrs	r2, r3
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	3714      	adds	r7, #20
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr

0800c192 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c192:	b480      	push	{r7}
 800c194:	b083      	sub	sp, #12
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	691b      	ldr	r3, [r3, #16]
 800c19e:	b2db      	uxtb	r3, r3
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b085      	sub	sp, #20
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	3314      	adds	r3, #20
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	4413      	add	r3, r2
 800c1c0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
}  
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3714      	adds	r7, #20
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr

0800c1d2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c1d2:	b480      	push	{r7}
 800c1d4:	b085      	sub	sp, #20
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
 800c1da:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	685a      	ldr	r2, [r3, #4]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1f8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c1fe:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c204:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	4313      	orrs	r3, r2
 800c20a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c210:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	431a      	orrs	r2, r3
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c21c:	2300      	movs	r3, #0

}
 800c21e:	4618      	mov	r0, r3
 800c220:	3714      	adds	r7, #20
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr

0800c22a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b088      	sub	sp, #32
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
 800c232:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c238:	2310      	movs	r3, #16
 800c23a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c23c:	2340      	movs	r3, #64	@ 0x40
 800c23e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c240:	2300      	movs	r3, #0
 800c242:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c244:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c248:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c24a:	f107 0308 	add.w	r3, r7, #8
 800c24e:	4619      	mov	r1, r3
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f7ff ff74 	bl	800c13e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c25a:	2110      	movs	r1, #16
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 f9d7 	bl	800c610 <SDMMC_GetCmdResp1>
 800c262:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c264:	69fb      	ldr	r3, [r7, #28]
}
 800c266:	4618      	mov	r0, r3
 800c268:	3720      	adds	r7, #32
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b088      	sub	sp, #32
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
 800c276:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c27c:	2311      	movs	r3, #17
 800c27e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c280:	2340      	movs	r3, #64	@ 0x40
 800c282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c284:	2300      	movs	r3, #0
 800c286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c28c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c28e:	f107 0308 	add.w	r3, r7, #8
 800c292:	4619      	mov	r1, r3
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7ff ff52 	bl	800c13e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c29a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c29e:	2111      	movs	r1, #17
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 f9b5 	bl	800c610 <SDMMC_GetCmdResp1>
 800c2a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2a8:	69fb      	ldr	r3, [r7, #28]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3720      	adds	r7, #32
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b088      	sub	sp, #32
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
 800c2ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c2c0:	2312      	movs	r3, #18
 800c2c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c2c4:	2340      	movs	r3, #64	@ 0x40
 800c2c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c2cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c2d2:	f107 0308 	add.w	r3, r7, #8
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f7ff ff30 	bl	800c13e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c2de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2e2:	2112      	movs	r1, #18
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 f993 	bl	800c610 <SDMMC_GetCmdResp1>
 800c2ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2ec:	69fb      	ldr	r3, [r7, #28]
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3720      	adds	r7, #32
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b088      	sub	sp, #32
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
 800c2fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c304:	2318      	movs	r3, #24
 800c306:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c308:	2340      	movs	r3, #64	@ 0x40
 800c30a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c30c:	2300      	movs	r3, #0
 800c30e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c310:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c314:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c316:	f107 0308 	add.w	r3, r7, #8
 800c31a:	4619      	mov	r1, r3
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f7ff ff0e 	bl	800c13e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c322:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c326:	2118      	movs	r1, #24
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 f971 	bl	800c610 <SDMMC_GetCmdResp1>
 800c32e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c330:	69fb      	ldr	r3, [r7, #28]
}
 800c332:	4618      	mov	r0, r3
 800c334:	3720      	adds	r7, #32
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c33a:	b580      	push	{r7, lr}
 800c33c:	b088      	sub	sp, #32
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
 800c342:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c348:	2319      	movs	r3, #25
 800c34a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c34c:	2340      	movs	r3, #64	@ 0x40
 800c34e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c350:	2300      	movs	r3, #0
 800c352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c354:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c358:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c35a:	f107 0308 	add.w	r3, r7, #8
 800c35e:	4619      	mov	r1, r3
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f7ff feec 	bl	800c13e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c36a:	2119      	movs	r1, #25
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 f94f 	bl	800c610 <SDMMC_GetCmdResp1>
 800c372:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c374:	69fb      	ldr	r3, [r7, #28]
}
 800c376:	4618      	mov	r0, r3
 800c378:	3720      	adds	r7, #32
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
	...

0800c380 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b088      	sub	sp, #32
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c388:	2300      	movs	r3, #0
 800c38a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c38c:	230c      	movs	r3, #12
 800c38e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c390:	2340      	movs	r3, #64	@ 0x40
 800c392:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c394:	2300      	movs	r3, #0
 800c396:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c398:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c39c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c39e:	f107 0308 	add.w	r3, r7, #8
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f7ff feca 	bl	800c13e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c3aa:	4a05      	ldr	r2, [pc, #20]	@ (800c3c0 <SDMMC_CmdStopTransfer+0x40>)
 800c3ac:	210c      	movs	r1, #12
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 f92e 	bl	800c610 <SDMMC_GetCmdResp1>
 800c3b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3b6:	69fb      	ldr	r3, [r7, #28]
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3720      	adds	r7, #32
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	05f5e100 	.word	0x05f5e100

0800c3c4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b08a      	sub	sp, #40	@ 0x28
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c3d4:	2307      	movs	r3, #7
 800c3d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c3d8:	2340      	movs	r3, #64	@ 0x40
 800c3da:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c3e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3e4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c3e6:	f107 0310 	add.w	r3, r7, #16
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	68f8      	ldr	r0, [r7, #12]
 800c3ee:	f7ff fea6 	bl	800c13e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c3f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c3f6:	2107      	movs	r1, #7
 800c3f8:	68f8      	ldr	r0, [r7, #12]
 800c3fa:	f000 f909 	bl	800c610 <SDMMC_GetCmdResp1>
 800c3fe:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800c400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c402:	4618      	mov	r0, r3
 800c404:	3728      	adds	r7, #40	@ 0x28
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b088      	sub	sp, #32
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c412:	2300      	movs	r3, #0
 800c414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c416:	2300      	movs	r3, #0
 800c418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c41a:	2300      	movs	r3, #0
 800c41c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c41e:	2300      	movs	r3, #0
 800c420:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c422:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c426:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c428:	f107 0308 	add.w	r3, r7, #8
 800c42c:	4619      	mov	r1, r3
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f7ff fe85 	bl	800c13e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 fb23 	bl	800ca80 <SDMMC_GetCmdError>
 800c43a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c43c:	69fb      	ldr	r3, [r7, #28]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3720      	adds	r7, #32
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b088      	sub	sp, #32
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c44e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c452:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c454:	2308      	movs	r3, #8
 800c456:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c458:	2340      	movs	r3, #64	@ 0x40
 800c45a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c45c:	2300      	movs	r3, #0
 800c45e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c460:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c464:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c466:	f107 0308 	add.w	r3, r7, #8
 800c46a:	4619      	mov	r1, r3
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f7ff fe66 	bl	800c13e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 fab6 	bl	800c9e4 <SDMMC_GetCmdResp7>
 800c478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c47a:	69fb      	ldr	r3, [r7, #28]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3720      	adds	r7, #32
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b088      	sub	sp, #32
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c492:	2337      	movs	r3, #55	@ 0x37
 800c494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c496:	2340      	movs	r3, #64	@ 0x40
 800c498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c49a:	2300      	movs	r3, #0
 800c49c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c49e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c4a4:	f107 0308 	add.w	r3, r7, #8
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7ff fe47 	bl	800c13e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c4b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4b4:	2137      	movs	r1, #55	@ 0x37
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 f8aa 	bl	800c610 <SDMMC_GetCmdResp1>
 800c4bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4be:	69fb      	ldr	r3, [r7, #28]
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3720      	adds	r7, #32
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b088      	sub	sp, #32
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c4d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c4dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c4de:	2329      	movs	r3, #41	@ 0x29
 800c4e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c4e2:	2340      	movs	r3, #64	@ 0x40
 800c4e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c4ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c4f0:	f107 0308 	add.w	r3, r7, #8
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f7ff fe21 	bl	800c13e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 f9bd 	bl	800c87c <SDMMC_GetCmdResp3>
 800c502:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c504:	69fb      	ldr	r3, [r7, #28]
}
 800c506:	4618      	mov	r0, r3
 800c508:	3720      	adds	r7, #32
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b088      	sub	sp, #32
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c516:	2300      	movs	r3, #0
 800c518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c51a:	2302      	movs	r3, #2
 800c51c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c51e:	23c0      	movs	r3, #192	@ 0xc0
 800c520:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c522:	2300      	movs	r3, #0
 800c524:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c526:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c52a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c52c:	f107 0308 	add.w	r3, r7, #8
 800c530:	4619      	mov	r1, r3
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f7ff fe03 	bl	800c13e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 f957 	bl	800c7ec <SDMMC_GetCmdResp2>
 800c53e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c540:	69fb      	ldr	r3, [r7, #28]
}
 800c542:	4618      	mov	r0, r3
 800c544:	3720      	adds	r7, #32
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b088      	sub	sp, #32
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
 800c552:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c558:	2309      	movs	r3, #9
 800c55a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c55c:	23c0      	movs	r3, #192	@ 0xc0
 800c55e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c560:	2300      	movs	r3, #0
 800c562:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c564:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c568:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c56a:	f107 0308 	add.w	r3, r7, #8
 800c56e:	4619      	mov	r1, r3
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f7ff fde4 	bl	800c13e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 f938 	bl	800c7ec <SDMMC_GetCmdResp2>
 800c57c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c57e:	69fb      	ldr	r3, [r7, #28]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3720      	adds	r7, #32
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b088      	sub	sp, #32
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c592:	2300      	movs	r3, #0
 800c594:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c596:	2303      	movs	r3, #3
 800c598:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c59a:	2340      	movs	r3, #64	@ 0x40
 800c59c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c5a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c5a8:	f107 0308 	add.w	r3, r7, #8
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f7ff fdc5 	bl	800c13e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c5b4:	683a      	ldr	r2, [r7, #0]
 800c5b6:	2103      	movs	r1, #3
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 f99d 	bl	800c8f8 <SDMMC_GetCmdResp6>
 800c5be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5c0:	69fb      	ldr	r3, [r7, #28]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3720      	adds	r7, #32
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b088      	sub	sp, #32
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
 800c5d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c5d8:	230d      	movs	r3, #13
 800c5da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c5dc:	2340      	movs	r3, #64	@ 0x40
 800c5de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c5e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c5ea:	f107 0308 	add.w	r3, r7, #8
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f7ff fda4 	bl	800c13e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c5f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c5fa:	210d      	movs	r1, #13
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 f807 	bl	800c610 <SDMMC_GetCmdResp1>
 800c602:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c604:	69fb      	ldr	r3, [r7, #28]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3720      	adds	r7, #32
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
	...

0800c610 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b088      	sub	sp, #32
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	460b      	mov	r3, r1
 800c61a:	607a      	str	r2, [r7, #4]
 800c61c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c61e:	4b70      	ldr	r3, [pc, #448]	@ (800c7e0 <SDMMC_GetCmdResp1+0x1d0>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4a70      	ldr	r2, [pc, #448]	@ (800c7e4 <SDMMC_GetCmdResp1+0x1d4>)
 800c624:	fba2 2303 	umull	r2, r3, r2, r3
 800c628:	0a5a      	lsrs	r2, r3, #9
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	fb02 f303 	mul.w	r3, r2, r3
 800c630:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	1e5a      	subs	r2, r3, #1
 800c636:	61fa      	str	r2, [r7, #28]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d102      	bne.n	800c642 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c63c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c640:	e0c9      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c646:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c648:	69bb      	ldr	r3, [r7, #24]
 800c64a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d0ef      	beq.n	800c632 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c652:	69bb      	ldr	r3, [r7, #24]
 800c654:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d1ea      	bne.n	800c632 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c660:	f003 0304 	and.w	r3, r3, #4
 800c664:	2b00      	cmp	r3, #0
 800c666:	d004      	beq.n	800c672 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2204      	movs	r2, #4
 800c66c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c66e:	2304      	movs	r3, #4
 800c670:	e0b1      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c676:	f003 0301 	and.w	r3, r3, #1
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d004      	beq.n	800c688 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2201      	movs	r2, #1
 800c682:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c684:	2301      	movs	r3, #1
 800c686:	e0a6      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	22c5      	movs	r2, #197	@ 0xc5
 800c68c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c68e:	68f8      	ldr	r0, [r7, #12]
 800c690:	f7ff fd7f 	bl	800c192 <SDIO_GetCommandResponse>
 800c694:	4603      	mov	r3, r0
 800c696:	461a      	mov	r2, r3
 800c698:	7afb      	ldrb	r3, [r7, #11]
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d001      	beq.n	800c6a2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	e099      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c6a2:	2100      	movs	r1, #0
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f7ff fd81 	bl	800c1ac <SDIO_GetResponse>
 800c6aa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c6ac:	697a      	ldr	r2, [r7, #20]
 800c6ae:	4b4e      	ldr	r3, [pc, #312]	@ (800c7e8 <SDMMC_GetCmdResp1+0x1d8>)
 800c6b0:	4013      	ands	r3, r2
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d101      	bne.n	800c6ba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	e08d      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	da02      	bge.n	800c6c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c6c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c6c4:	e087      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d001      	beq.n	800c6d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c6d0:	2340      	movs	r3, #64	@ 0x40
 800c6d2:	e080      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d001      	beq.n	800c6e2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c6de:	2380      	movs	r3, #128	@ 0x80
 800c6e0:	e079      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d002      	beq.n	800c6f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c6ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c6f0:	e071      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d002      	beq.n	800c702 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c6fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c700:	e069      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d002      	beq.n	800c712 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c70c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c710:	e061      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d002      	beq.n	800c722 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c71c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c720:	e059      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d002      	beq.n	800c732 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c72c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c730:	e051      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d002      	beq.n	800c742 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c73c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c740:	e049      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d002      	beq.n	800c752 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c74c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c750:	e041      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d002      	beq.n	800c762 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c75c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c760:	e039      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d002      	beq.n	800c772 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c76c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c770:	e031      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d002      	beq.n	800c782 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c77c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c780:	e029      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d002      	beq.n	800c792 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c78c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c790:	e021      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d002      	beq.n	800c7a2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c79c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c7a0:	e019      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d002      	beq.n	800c7b2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c7ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c7b0:	e011      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d002      	beq.n	800c7c2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c7bc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c7c0:	e009      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	f003 0308 	and.w	r3, r3, #8
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d002      	beq.n	800c7d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c7cc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c7d0:	e001      	b.n	800c7d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c7d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3720      	adds	r7, #32
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	20000054 	.word	0x20000054
 800c7e4:	10624dd3 	.word	0x10624dd3
 800c7e8:	fdffe008 	.word	0xfdffe008

0800c7ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b085      	sub	sp, #20
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c7f4:	4b1f      	ldr	r3, [pc, #124]	@ (800c874 <SDMMC_GetCmdResp2+0x88>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a1f      	ldr	r2, [pc, #124]	@ (800c878 <SDMMC_GetCmdResp2+0x8c>)
 800c7fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c7fe:	0a5b      	lsrs	r3, r3, #9
 800c800:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c804:	fb02 f303 	mul.w	r3, r2, r3
 800c808:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	1e5a      	subs	r2, r3, #1
 800c80e:	60fa      	str	r2, [r7, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d102      	bne.n	800c81a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c814:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c818:	e026      	b.n	800c868 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c81e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c826:	2b00      	cmp	r3, #0
 800c828:	d0ef      	beq.n	800c80a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c830:	2b00      	cmp	r3, #0
 800c832:	d1ea      	bne.n	800c80a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c838:	f003 0304 	and.w	r3, r3, #4
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d004      	beq.n	800c84a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2204      	movs	r2, #4
 800c844:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c846:	2304      	movs	r3, #4
 800c848:	e00e      	b.n	800c868 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c84e:	f003 0301 	and.w	r3, r3, #1
 800c852:	2b00      	cmp	r3, #0
 800c854:	d004      	beq.n	800c860 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2201      	movs	r2, #1
 800c85a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c85c:	2301      	movs	r3, #1
 800c85e:	e003      	b.n	800c868 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	22c5      	movs	r2, #197	@ 0xc5
 800c864:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3714      	adds	r7, #20
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr
 800c874:	20000054 	.word	0x20000054
 800c878:	10624dd3 	.word	0x10624dd3

0800c87c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b085      	sub	sp, #20
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c884:	4b1a      	ldr	r3, [pc, #104]	@ (800c8f0 <SDMMC_GetCmdResp3+0x74>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4a1a      	ldr	r2, [pc, #104]	@ (800c8f4 <SDMMC_GetCmdResp3+0x78>)
 800c88a:	fba2 2303 	umull	r2, r3, r2, r3
 800c88e:	0a5b      	lsrs	r3, r3, #9
 800c890:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c894:	fb02 f303 	mul.w	r3, r2, r3
 800c898:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	1e5a      	subs	r2, r3, #1
 800c89e:	60fa      	str	r2, [r7, #12]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d102      	bne.n	800c8aa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c8a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c8a8:	e01b      	b.n	800c8e2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d0ef      	beq.n	800c89a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d1ea      	bne.n	800c89a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8c8:	f003 0304 	and.w	r3, r3, #4
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d004      	beq.n	800c8da <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2204      	movs	r2, #4
 800c8d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c8d6:	2304      	movs	r3, #4
 800c8d8:	e003      	b.n	800c8e2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	22c5      	movs	r2, #197	@ 0xc5
 800c8de:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c8e0:	2300      	movs	r3, #0
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3714      	adds	r7, #20
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop
 800c8f0:	20000054 	.word	0x20000054
 800c8f4:	10624dd3 	.word	0x10624dd3

0800c8f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b088      	sub	sp, #32
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	460b      	mov	r3, r1
 800c902:	607a      	str	r2, [r7, #4]
 800c904:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c906:	4b35      	ldr	r3, [pc, #212]	@ (800c9dc <SDMMC_GetCmdResp6+0xe4>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4a35      	ldr	r2, [pc, #212]	@ (800c9e0 <SDMMC_GetCmdResp6+0xe8>)
 800c90c:	fba2 2303 	umull	r2, r3, r2, r3
 800c910:	0a5b      	lsrs	r3, r3, #9
 800c912:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c916:	fb02 f303 	mul.w	r3, r2, r3
 800c91a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	1e5a      	subs	r2, r3, #1
 800c920:	61fa      	str	r2, [r7, #28]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d102      	bne.n	800c92c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c926:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c92a:	e052      	b.n	800c9d2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c930:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d0ef      	beq.n	800c91c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1ea      	bne.n	800c91c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c94a:	f003 0304 	and.w	r3, r3, #4
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d004      	beq.n	800c95c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2204      	movs	r2, #4
 800c956:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c958:	2304      	movs	r3, #4
 800c95a:	e03a      	b.n	800c9d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c960:	f003 0301 	and.w	r3, r3, #1
 800c964:	2b00      	cmp	r3, #0
 800c966:	d004      	beq.n	800c972 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2201      	movs	r2, #1
 800c96c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c96e:	2301      	movs	r3, #1
 800c970:	e02f      	b.n	800c9d2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c972:	68f8      	ldr	r0, [r7, #12]
 800c974:	f7ff fc0d 	bl	800c192 <SDIO_GetCommandResponse>
 800c978:	4603      	mov	r3, r0
 800c97a:	461a      	mov	r2, r3
 800c97c:	7afb      	ldrb	r3, [r7, #11]
 800c97e:	4293      	cmp	r3, r2
 800c980:	d001      	beq.n	800c986 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c982:	2301      	movs	r3, #1
 800c984:	e025      	b.n	800c9d2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	22c5      	movs	r2, #197	@ 0xc5
 800c98a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c98c:	2100      	movs	r1, #0
 800c98e:	68f8      	ldr	r0, [r7, #12]
 800c990:	f7ff fc0c 	bl	800c1ac <SDIO_GetResponse>
 800c994:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d106      	bne.n	800c9ae <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	0c1b      	lsrs	r3, r3, #16
 800c9a4:	b29a      	uxth	r2, r3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	e011      	b.n	800c9d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d002      	beq.n	800c9be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c9b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c9bc:	e009      	b.n	800c9d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d002      	beq.n	800c9ce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c9c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c9cc:	e001      	b.n	800c9d2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c9ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3720      	adds	r7, #32
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	20000054 	.word	0x20000054
 800c9e0:	10624dd3 	.word	0x10624dd3

0800c9e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b085      	sub	sp, #20
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c9ec:	4b22      	ldr	r3, [pc, #136]	@ (800ca78 <SDMMC_GetCmdResp7+0x94>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a22      	ldr	r2, [pc, #136]	@ (800ca7c <SDMMC_GetCmdResp7+0x98>)
 800c9f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9f6:	0a5b      	lsrs	r3, r3, #9
 800c9f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c9fc:	fb02 f303 	mul.w	r3, r2, r3
 800ca00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	1e5a      	subs	r2, r3, #1
 800ca06:	60fa      	str	r2, [r7, #12]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d102      	bne.n	800ca12 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca0c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ca10:	e02c      	b.n	800ca6c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca16:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d0ef      	beq.n	800ca02 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d1ea      	bne.n	800ca02 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca30:	f003 0304 	and.w	r3, r3, #4
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d004      	beq.n	800ca42 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2204      	movs	r2, #4
 800ca3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca3e:	2304      	movs	r3, #4
 800ca40:	e014      	b.n	800ca6c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca46:	f003 0301 	and.w	r3, r3, #1
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d004      	beq.n	800ca58 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2201      	movs	r2, #1
 800ca52:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca54:	2301      	movs	r3, #1
 800ca56:	e009      	b.n	800ca6c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d002      	beq.n	800ca6a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2240      	movs	r2, #64	@ 0x40
 800ca68:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ca6a:	2300      	movs	r3, #0
  
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3714      	adds	r7, #20
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr
 800ca78:	20000054 	.word	0x20000054
 800ca7c:	10624dd3 	.word	0x10624dd3

0800ca80 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b085      	sub	sp, #20
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca88:	4b11      	ldr	r3, [pc, #68]	@ (800cad0 <SDMMC_GetCmdError+0x50>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a11      	ldr	r2, [pc, #68]	@ (800cad4 <SDMMC_GetCmdError+0x54>)
 800ca8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ca92:	0a5b      	lsrs	r3, r3, #9
 800ca94:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca98:	fb02 f303 	mul.w	r3, r2, r3
 800ca9c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	1e5a      	subs	r2, r3, #1
 800caa2:	60fa      	str	r2, [r7, #12]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d102      	bne.n	800caae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800caa8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800caac:	e009      	b.n	800cac2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d0f1      	beq.n	800ca9e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	22c5      	movs	r2, #197	@ 0xc5
 800cabe:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800cac0:	2300      	movs	r3, #0
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3714      	adds	r7, #20
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	20000054 	.word	0x20000054
 800cad4:	10624dd3 	.word	0x10624dd3

0800cad8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cadc:	4904      	ldr	r1, [pc, #16]	@ (800caf0 <MX_FATFS_Init+0x18>)
 800cade:	4805      	ldr	r0, [pc, #20]	@ (800caf4 <MX_FATFS_Init+0x1c>)
 800cae0:	f003 f83c 	bl	800fb5c <FATFS_LinkDriver>
 800cae4:	4603      	mov	r3, r0
 800cae6:	461a      	mov	r2, r3
 800cae8:	4b03      	ldr	r3, [pc, #12]	@ (800caf8 <MX_FATFS_Init+0x20>)
 800caea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800caec:	bf00      	nop
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	20006710 	.word	0x20006710
 800caf4:	08011214 	.word	0x08011214
 800caf8:	2000670c 	.word	0x2000670c

0800cafc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cafc:	b480      	push	{r7}
 800cafe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cb00:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cb16:	f000 f888 	bl	800cc2a <BSP_SD_IsDetected>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d001      	beq.n	800cb24 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800cb20:	2301      	movs	r3, #1
 800cb22:	e005      	b.n	800cb30 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800cb24:	4804      	ldr	r0, [pc, #16]	@ (800cb38 <BSP_SD_Init+0x2c>)
 800cb26:	f7fc fa4d 	bl	8008fc4 <HAL_SD_Init>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800cb2e:	79fb      	ldrb	r3, [r7, #7]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	20006378 	.word	0x20006378

0800cb3c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b086      	sub	sp, #24
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	68ba      	ldr	r2, [r7, #8]
 800cb50:	68f9      	ldr	r1, [r7, #12]
 800cb52:	4806      	ldr	r0, [pc, #24]	@ (800cb6c <BSP_SD_ReadBlocks_DMA+0x30>)
 800cb54:	f7fc fade 	bl	8009114 <HAL_SD_ReadBlocks_DMA>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d001      	beq.n	800cb62 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cb62:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3718      	adds	r7, #24
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	20006378 	.word	0x20006378

0800cb70 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b086      	sub	sp, #24
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	68ba      	ldr	r2, [r7, #8]
 800cb84:	68f9      	ldr	r1, [r7, #12]
 800cb86:	4806      	ldr	r0, [pc, #24]	@ (800cba0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800cb88:	f7fc fba6 	bl	80092d8 <HAL_SD_WriteBlocks_DMA>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d001      	beq.n	800cb96 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cb96:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3718      	adds	r7, #24
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	20006378 	.word	0x20006378

0800cba4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cba8:	4805      	ldr	r0, [pc, #20]	@ (800cbc0 <BSP_SD_GetCardState+0x1c>)
 800cbaa:	f7fc ffdb 	bl	8009b64 <HAL_SD_GetCardState>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b04      	cmp	r3, #4
 800cbb2:	bf14      	ite	ne
 800cbb4:	2301      	movne	r3, #1
 800cbb6:	2300      	moveq	r3, #0
 800cbb8:	b2db      	uxtb	r3, r3
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	20006378 	.word	0x20006378

0800cbc4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800cbcc:	6879      	ldr	r1, [r7, #4]
 800cbce:	4803      	ldr	r0, [pc, #12]	@ (800cbdc <BSP_SD_GetCardInfo+0x18>)
 800cbd0:	f7fc ff9c 	bl	8009b0c <HAL_SD_GetCardInfo>
}
 800cbd4:	bf00      	nop
 800cbd6:	3708      	adds	r7, #8
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	20006378 	.word	0x20006378

0800cbe0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800cbe8:	f000 f818 	bl	800cc1c <BSP_SD_AbortCallback>
}
 800cbec:	bf00      	nop
 800cbee:	3708      	adds	r7, #8
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}

0800cbf4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800cbfc:	f000 f98c 	bl	800cf18 <BSP_SD_WriteCpltCallback>
}
 800cc00:	bf00      	nop
 800cc02:	3708      	adds	r7, #8
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}

0800cc08 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cc10:	f000 f98e 	bl	800cf30 <BSP_SD_ReadCpltCallback>
}
 800cc14:	bf00      	nop
 800cc16:	3708      	adds	r7, #8
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	af00      	add	r7, sp, #0

}
 800cc20:	bf00      	nop
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr

0800cc2a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cc2a:	b480      	push	{r7}
 800cc2c:	b083      	sub	sp, #12
 800cc2e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cc30:	2301      	movs	r3, #1
 800cc32:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800cc34:	79fb      	ldrb	r3, [r7, #7]
 800cc36:	b2db      	uxtb	r3, r3
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	370c      	adds	r7, #12
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800cc4c:	f7f6 fe3a 	bl	80038c4 <HAL_GetTick>
 800cc50:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800cc52:	e006      	b.n	800cc62 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cc54:	f7ff ffa6 	bl	800cba4 <BSP_SD_GetCardState>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d101      	bne.n	800cc62 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	e009      	b.n	800cc76 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800cc62:	f7f6 fe2f 	bl	80038c4 <HAL_GetTick>
 800cc66:	4602      	mov	r2, r0
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d8f0      	bhi.n	800cc54 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800cc72:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
	...

0800cc80 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	4603      	mov	r3, r0
 800cc88:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cc8a:	4b0b      	ldr	r3, [pc, #44]	@ (800ccb8 <SD_CheckStatus+0x38>)
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cc90:	f7ff ff88 	bl	800cba4 <BSP_SD_GetCardState>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d107      	bne.n	800ccaa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cc9a:	4b07      	ldr	r3, [pc, #28]	@ (800ccb8 <SD_CheckStatus+0x38>)
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	f023 0301 	bic.w	r3, r3, #1
 800cca4:	b2da      	uxtb	r2, r3
 800cca6:	4b04      	ldr	r3, [pc, #16]	@ (800ccb8 <SD_CheckStatus+0x38>)
 800cca8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ccaa:	4b03      	ldr	r3, [pc, #12]	@ (800ccb8 <SD_CheckStatus+0x38>)
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	b2db      	uxtb	r3, r3
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3708      	adds	r7, #8
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	2000005d 	.word	0x2000005d

0800ccbc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ccc6:	f7ff ff21 	bl	800cb0c <BSP_SD_Init>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d107      	bne.n	800cce0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ccd0:	79fb      	ldrb	r3, [r7, #7]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7ff ffd4 	bl	800cc80 <SD_CheckStatus>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	461a      	mov	r2, r3
 800ccdc:	4b04      	ldr	r3, [pc, #16]	@ (800ccf0 <SD_initialize+0x34>)
 800ccde:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cce0:	4b03      	ldr	r3, [pc, #12]	@ (800ccf0 <SD_initialize+0x34>)
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	b2db      	uxtb	r3, r3
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3708      	adds	r7, #8
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	2000005d 	.word	0x2000005d

0800ccf4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b082      	sub	sp, #8
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ccfe:	79fb      	ldrb	r3, [r7, #7]
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7ff ffbd 	bl	800cc80 <SD_CheckStatus>
 800cd06:	4603      	mov	r3, r0
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b086      	sub	sp, #24
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	60b9      	str	r1, [r7, #8]
 800cd18:	607a      	str	r2, [r7, #4]
 800cd1a:	603b      	str	r3, [r7, #0]
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cd20:	2301      	movs	r3, #1
 800cd22:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cd24:	f247 5030 	movw	r0, #30000	@ 0x7530
 800cd28:	f7ff ff8c 	bl	800cc44 <SD_CheckStatusWithTimeout>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	da01      	bge.n	800cd36 <SD_read+0x26>
  {
    return res;
 800cd32:	7dfb      	ldrb	r3, [r7, #23]
 800cd34:	e03b      	b.n	800cdae <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800cd36:	683a      	ldr	r2, [r7, #0]
 800cd38:	6879      	ldr	r1, [r7, #4]
 800cd3a:	68b8      	ldr	r0, [r7, #8]
 800cd3c:	f7ff fefe 	bl	800cb3c <BSP_SD_ReadBlocks_DMA>
 800cd40:	4603      	mov	r3, r0
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d132      	bne.n	800cdac <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800cd46:	4b1c      	ldr	r3, [pc, #112]	@ (800cdb8 <SD_read+0xa8>)
 800cd48:	2200      	movs	r2, #0
 800cd4a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800cd4c:	f7f6 fdba 	bl	80038c4 <HAL_GetTick>
 800cd50:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800cd52:	bf00      	nop
 800cd54:	4b18      	ldr	r3, [pc, #96]	@ (800cdb8 <SD_read+0xa8>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d108      	bne.n	800cd6e <SD_read+0x5e>
 800cd5c:	f7f6 fdb2 	bl	80038c4 <HAL_GetTick>
 800cd60:	4602      	mov	r2, r0
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	1ad3      	subs	r3, r2, r3
 800cd66:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d9f2      	bls.n	800cd54 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800cd6e:	4b12      	ldr	r3, [pc, #72]	@ (800cdb8 <SD_read+0xa8>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d102      	bne.n	800cd7c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800cd76:	2301      	movs	r3, #1
 800cd78:	75fb      	strb	r3, [r7, #23]
 800cd7a:	e017      	b.n	800cdac <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800cd7c:	4b0e      	ldr	r3, [pc, #56]	@ (800cdb8 <SD_read+0xa8>)
 800cd7e:	2200      	movs	r2, #0
 800cd80:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800cd82:	f7f6 fd9f 	bl	80038c4 <HAL_GetTick>
 800cd86:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cd88:	e007      	b.n	800cd9a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cd8a:	f7ff ff0b 	bl	800cba4 <BSP_SD_GetCardState>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d102      	bne.n	800cd9a <SD_read+0x8a>
          {
            res = RES_OK;
 800cd94:	2300      	movs	r3, #0
 800cd96:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800cd98:	e008      	b.n	800cdac <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cd9a:	f7f6 fd93 	bl	80038c4 <HAL_GetTick>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	1ad3      	subs	r3, r2, r3
 800cda4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d9ee      	bls.n	800cd8a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800cdac:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3718      	adds	r7, #24
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	20006718 	.word	0x20006718

0800cdbc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b086      	sub	sp, #24
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60b9      	str	r1, [r7, #8]
 800cdc4:	607a      	str	r2, [r7, #4]
 800cdc6:	603b      	str	r3, [r7, #0]
 800cdc8:	4603      	mov	r3, r0
 800cdca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800cdd0:	4b24      	ldr	r3, [pc, #144]	@ (800ce64 <SD_write+0xa8>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cdd6:	f247 5030 	movw	r0, #30000	@ 0x7530
 800cdda:	f7ff ff33 	bl	800cc44 <SD_CheckStatusWithTimeout>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	da01      	bge.n	800cde8 <SD_write+0x2c>
  {
    return res;
 800cde4:	7dfb      	ldrb	r3, [r7, #23]
 800cde6:	e038      	b.n	800ce5a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cde8:	683a      	ldr	r2, [r7, #0]
 800cdea:	6879      	ldr	r1, [r7, #4]
 800cdec:	68b8      	ldr	r0, [r7, #8]
 800cdee:	f7ff febf 	bl	800cb70 <BSP_SD_WriteBlocks_DMA>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d12f      	bne.n	800ce58 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800cdf8:	f7f6 fd64 	bl	80038c4 <HAL_GetTick>
 800cdfc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800cdfe:	bf00      	nop
 800ce00:	4b18      	ldr	r3, [pc, #96]	@ (800ce64 <SD_write+0xa8>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d108      	bne.n	800ce1a <SD_write+0x5e>
 800ce08:	f7f6 fd5c 	bl	80038c4 <HAL_GetTick>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	1ad3      	subs	r3, r2, r3
 800ce12:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d9f2      	bls.n	800ce00 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800ce1a:	4b12      	ldr	r3, [pc, #72]	@ (800ce64 <SD_write+0xa8>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d102      	bne.n	800ce28 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ce22:	2301      	movs	r3, #1
 800ce24:	75fb      	strb	r3, [r7, #23]
 800ce26:	e017      	b.n	800ce58 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ce28:	4b0e      	ldr	r3, [pc, #56]	@ (800ce64 <SD_write+0xa8>)
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ce2e:	f7f6 fd49 	bl	80038c4 <HAL_GetTick>
 800ce32:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ce34:	e007      	b.n	800ce46 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ce36:	f7ff feb5 	bl	800cba4 <BSP_SD_GetCardState>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d102      	bne.n	800ce46 <SD_write+0x8a>
          {
            res = RES_OK;
 800ce40:	2300      	movs	r3, #0
 800ce42:	75fb      	strb	r3, [r7, #23]
            break;
 800ce44:	e008      	b.n	800ce58 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ce46:	f7f6 fd3d 	bl	80038c4 <HAL_GetTick>
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	1ad3      	subs	r3, r2, r3
 800ce50:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d9ee      	bls.n	800ce36 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ce58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3718      	adds	r7, #24
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	20006714 	.word	0x20006714

0800ce68 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b08c      	sub	sp, #48	@ 0x30
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	4603      	mov	r3, r0
 800ce70:	603a      	str	r2, [r7, #0]
 800ce72:	71fb      	strb	r3, [r7, #7]
 800ce74:	460b      	mov	r3, r1
 800ce76:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ce7e:	4b25      	ldr	r3, [pc, #148]	@ (800cf14 <SD_ioctl+0xac>)
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	f003 0301 	and.w	r3, r3, #1
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d001      	beq.n	800ce90 <SD_ioctl+0x28>
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	e03c      	b.n	800cf0a <SD_ioctl+0xa2>

  switch (cmd)
 800ce90:	79bb      	ldrb	r3, [r7, #6]
 800ce92:	2b03      	cmp	r3, #3
 800ce94:	d834      	bhi.n	800cf00 <SD_ioctl+0x98>
 800ce96:	a201      	add	r2, pc, #4	@ (adr r2, 800ce9c <SD_ioctl+0x34>)
 800ce98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce9c:	0800cead 	.word	0x0800cead
 800cea0:	0800ceb5 	.word	0x0800ceb5
 800cea4:	0800cecd 	.word	0x0800cecd
 800cea8:	0800cee7 	.word	0x0800cee7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ceac:	2300      	movs	r3, #0
 800ceae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ceb2:	e028      	b.n	800cf06 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ceb4:	f107 030c 	add.w	r3, r7, #12
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f7ff fe83 	bl	800cbc4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cec4:	2300      	movs	r3, #0
 800cec6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ceca:	e01c      	b.n	800cf06 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cecc:	f107 030c 	add.w	r3, r7, #12
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7ff fe77 	bl	800cbc4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ced6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ced8:	b29a      	uxth	r2, r3
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cede:	2300      	movs	r3, #0
 800cee0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cee4:	e00f      	b.n	800cf06 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cee6:	f107 030c 	add.w	r3, r7, #12
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7ff fe6a 	bl	800cbc4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef2:	0a5a      	lsrs	r2, r3, #9
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cef8:	2300      	movs	r3, #0
 800cefa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cefe:	e002      	b.n	800cf06 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cf00:	2304      	movs	r3, #4
 800cf02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800cf06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3730      	adds	r7, #48	@ 0x30
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	2000005d 	.word	0x2000005d

0800cf18 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800cf1c:	4b03      	ldr	r3, [pc, #12]	@ (800cf2c <BSP_SD_WriteCpltCallback+0x14>)
 800cf1e:	2201      	movs	r2, #1
 800cf20:	601a      	str	r2, [r3, #0]
}
 800cf22:	bf00      	nop
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr
 800cf2c:	20006714 	.word	0x20006714

0800cf30 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800cf30:	b480      	push	{r7}
 800cf32:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800cf34:	4b03      	ldr	r3, [pc, #12]	@ (800cf44 <BSP_SD_ReadCpltCallback+0x14>)
 800cf36:	2201      	movs	r2, #1
 800cf38:	601a      	str	r2, [r3, #0]
}
 800cf3a:	bf00      	nop
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr
 800cf44:	20006718 	.word	0x20006718

0800cf48 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	4603      	mov	r3, r0
 800cf50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cf52:	79fb      	ldrb	r3, [r7, #7]
 800cf54:	4a08      	ldr	r2, [pc, #32]	@ (800cf78 <disk_status+0x30>)
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	4413      	add	r3, r2
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	79fa      	ldrb	r2, [r7, #7]
 800cf60:	4905      	ldr	r1, [pc, #20]	@ (800cf78 <disk_status+0x30>)
 800cf62:	440a      	add	r2, r1
 800cf64:	7a12      	ldrb	r2, [r2, #8]
 800cf66:	4610      	mov	r0, r2
 800cf68:	4798      	blx	r3
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cf6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3710      	adds	r7, #16
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	20006944 	.word	0x20006944

0800cf7c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	4603      	mov	r3, r0
 800cf84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cf86:	2300      	movs	r3, #0
 800cf88:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cf8a:	79fb      	ldrb	r3, [r7, #7]
 800cf8c:	4a0e      	ldr	r2, [pc, #56]	@ (800cfc8 <disk_initialize+0x4c>)
 800cf8e:	5cd3      	ldrb	r3, [r2, r3]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d114      	bne.n	800cfbe <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cf94:	79fb      	ldrb	r3, [r7, #7]
 800cf96:	4a0c      	ldr	r2, [pc, #48]	@ (800cfc8 <disk_initialize+0x4c>)
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	4413      	add	r3, r2
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	79fa      	ldrb	r2, [r7, #7]
 800cfa2:	4909      	ldr	r1, [pc, #36]	@ (800cfc8 <disk_initialize+0x4c>)
 800cfa4:	440a      	add	r2, r1
 800cfa6:	7a12      	ldrb	r2, [r2, #8]
 800cfa8:	4610      	mov	r0, r2
 800cfaa:	4798      	blx	r3
 800cfac:	4603      	mov	r3, r0
 800cfae:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800cfb0:	7bfb      	ldrb	r3, [r7, #15]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d103      	bne.n	800cfbe <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800cfb6:	79fb      	ldrb	r3, [r7, #7]
 800cfb8:	4a03      	ldr	r2, [pc, #12]	@ (800cfc8 <disk_initialize+0x4c>)
 800cfba:	2101      	movs	r1, #1
 800cfbc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800cfbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3710      	adds	r7, #16
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	20006944 	.word	0x20006944

0800cfcc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cfcc:	b590      	push	{r4, r7, lr}
 800cfce:	b087      	sub	sp, #28
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60b9      	str	r1, [r7, #8]
 800cfd4:	607a      	str	r2, [r7, #4]
 800cfd6:	603b      	str	r3, [r7, #0]
 800cfd8:	4603      	mov	r3, r0
 800cfda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cfdc:	7bfb      	ldrb	r3, [r7, #15]
 800cfde:	4a0a      	ldr	r2, [pc, #40]	@ (800d008 <disk_read+0x3c>)
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	4413      	add	r3, r2
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	689c      	ldr	r4, [r3, #8]
 800cfe8:	7bfb      	ldrb	r3, [r7, #15]
 800cfea:	4a07      	ldr	r2, [pc, #28]	@ (800d008 <disk_read+0x3c>)
 800cfec:	4413      	add	r3, r2
 800cfee:	7a18      	ldrb	r0, [r3, #8]
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	68b9      	ldr	r1, [r7, #8]
 800cff6:	47a0      	blx	r4
 800cff8:	4603      	mov	r3, r0
 800cffa:	75fb      	strb	r3, [r7, #23]
  return res;
 800cffc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	371c      	adds	r7, #28
 800d002:	46bd      	mov	sp, r7
 800d004:	bd90      	pop	{r4, r7, pc}
 800d006:	bf00      	nop
 800d008:	20006944 	.word	0x20006944

0800d00c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d00c:	b590      	push	{r4, r7, lr}
 800d00e:	b087      	sub	sp, #28
 800d010:	af00      	add	r7, sp, #0
 800d012:	60b9      	str	r1, [r7, #8]
 800d014:	607a      	str	r2, [r7, #4]
 800d016:	603b      	str	r3, [r7, #0]
 800d018:	4603      	mov	r3, r0
 800d01a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d01c:	7bfb      	ldrb	r3, [r7, #15]
 800d01e:	4a0a      	ldr	r2, [pc, #40]	@ (800d048 <disk_write+0x3c>)
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	4413      	add	r3, r2
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	68dc      	ldr	r4, [r3, #12]
 800d028:	7bfb      	ldrb	r3, [r7, #15]
 800d02a:	4a07      	ldr	r2, [pc, #28]	@ (800d048 <disk_write+0x3c>)
 800d02c:	4413      	add	r3, r2
 800d02e:	7a18      	ldrb	r0, [r3, #8]
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	68b9      	ldr	r1, [r7, #8]
 800d036:	47a0      	blx	r4
 800d038:	4603      	mov	r3, r0
 800d03a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d03c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	371c      	adds	r7, #28
 800d042:	46bd      	mov	sp, r7
 800d044:	bd90      	pop	{r4, r7, pc}
 800d046:	bf00      	nop
 800d048:	20006944 	.word	0x20006944

0800d04c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	4603      	mov	r3, r0
 800d054:	603a      	str	r2, [r7, #0]
 800d056:	71fb      	strb	r3, [r7, #7]
 800d058:	460b      	mov	r3, r1
 800d05a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d05c:	79fb      	ldrb	r3, [r7, #7]
 800d05e:	4a09      	ldr	r2, [pc, #36]	@ (800d084 <disk_ioctl+0x38>)
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	4413      	add	r3, r2
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	691b      	ldr	r3, [r3, #16]
 800d068:	79fa      	ldrb	r2, [r7, #7]
 800d06a:	4906      	ldr	r1, [pc, #24]	@ (800d084 <disk_ioctl+0x38>)
 800d06c:	440a      	add	r2, r1
 800d06e:	7a10      	ldrb	r0, [r2, #8]
 800d070:	79b9      	ldrb	r1, [r7, #6]
 800d072:	683a      	ldr	r2, [r7, #0]
 800d074:	4798      	blx	r3
 800d076:	4603      	mov	r3, r0
 800d078:	73fb      	strb	r3, [r7, #15]
  return res;
 800d07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3710      	adds	r7, #16
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	20006944 	.word	0x20006944

0800d088 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d088:	b480      	push	{r7}
 800d08a:	b085      	sub	sp, #20
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	3301      	adds	r3, #1
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d098:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d09c:	021b      	lsls	r3, r3, #8
 800d09e:	b21a      	sxth	r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	b21b      	sxth	r3, r3
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	b21b      	sxth	r3, r3
 800d0aa:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d0ac:	89fb      	ldrh	r3, [r7, #14]
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3714      	adds	r7, #20
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr

0800d0ba <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d0ba:	b480      	push	{r7}
 800d0bc:	b085      	sub	sp, #20
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	3303      	adds	r3, #3
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	021b      	lsls	r3, r3, #8
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	3202      	adds	r2, #2
 800d0d2:	7812      	ldrb	r2, [r2, #0]
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	021b      	lsls	r3, r3, #8
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	3201      	adds	r2, #1
 800d0e0:	7812      	ldrb	r2, [r2, #0]
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	021b      	lsls	r3, r3, #8
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	7812      	ldrb	r2, [r2, #0]
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	60fb      	str	r3, [r7, #12]
	return rv;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3714      	adds	r7, #20
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr

0800d100 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d100:	b480      	push	{r7}
 800d102:	b083      	sub	sp, #12
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	460b      	mov	r3, r1
 800d10a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	1c5a      	adds	r2, r3, #1
 800d110:	607a      	str	r2, [r7, #4]
 800d112:	887a      	ldrh	r2, [r7, #2]
 800d114:	b2d2      	uxtb	r2, r2
 800d116:	701a      	strb	r2, [r3, #0]
 800d118:	887b      	ldrh	r3, [r7, #2]
 800d11a:	0a1b      	lsrs	r3, r3, #8
 800d11c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	1c5a      	adds	r2, r3, #1
 800d122:	607a      	str	r2, [r7, #4]
 800d124:	887a      	ldrh	r2, [r7, #2]
 800d126:	b2d2      	uxtb	r2, r2
 800d128:	701a      	strb	r2, [r3, #0]
}
 800d12a:	bf00      	nop
 800d12c:	370c      	adds	r7, #12
 800d12e:	46bd      	mov	sp, r7
 800d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d134:	4770      	bx	lr

0800d136 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d136:	b480      	push	{r7}
 800d138:	b083      	sub	sp, #12
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
 800d13e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	1c5a      	adds	r2, r3, #1
 800d144:	607a      	str	r2, [r7, #4]
 800d146:	683a      	ldr	r2, [r7, #0]
 800d148:	b2d2      	uxtb	r2, r2
 800d14a:	701a      	strb	r2, [r3, #0]
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	0a1b      	lsrs	r3, r3, #8
 800d150:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	1c5a      	adds	r2, r3, #1
 800d156:	607a      	str	r2, [r7, #4]
 800d158:	683a      	ldr	r2, [r7, #0]
 800d15a:	b2d2      	uxtb	r2, r2
 800d15c:	701a      	strb	r2, [r3, #0]
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	0a1b      	lsrs	r3, r3, #8
 800d162:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	1c5a      	adds	r2, r3, #1
 800d168:	607a      	str	r2, [r7, #4]
 800d16a:	683a      	ldr	r2, [r7, #0]
 800d16c:	b2d2      	uxtb	r2, r2
 800d16e:	701a      	strb	r2, [r3, #0]
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	0a1b      	lsrs	r3, r3, #8
 800d174:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	1c5a      	adds	r2, r3, #1
 800d17a:	607a      	str	r2, [r7, #4]
 800d17c:	683a      	ldr	r2, [r7, #0]
 800d17e:	b2d2      	uxtb	r2, r2
 800d180:	701a      	strb	r2, [r3, #0]
}
 800d182:	bf00      	nop
 800d184:	370c      	adds	r7, #12
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr

0800d18e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d18e:	b480      	push	{r7}
 800d190:	b087      	sub	sp, #28
 800d192:	af00      	add	r7, sp, #0
 800d194:	60f8      	str	r0, [r7, #12]
 800d196:	60b9      	str	r1, [r7, #8]
 800d198:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00d      	beq.n	800d1c4 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d1a8:	693a      	ldr	r2, [r7, #16]
 800d1aa:	1c53      	adds	r3, r2, #1
 800d1ac:	613b      	str	r3, [r7, #16]
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	1c59      	adds	r1, r3, #1
 800d1b2:	6179      	str	r1, [r7, #20]
 800d1b4:	7812      	ldrb	r2, [r2, #0]
 800d1b6:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	607b      	str	r3, [r7, #4]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d1f1      	bne.n	800d1a8 <mem_cpy+0x1a>
	}
}
 800d1c4:	bf00      	nop
 800d1c6:	371c      	adds	r7, #28
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d1d0:	b480      	push	{r7}
 800d1d2:	b087      	sub	sp, #28
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	60b9      	str	r1, [r7, #8]
 800d1da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	1c5a      	adds	r2, r3, #1
 800d1e4:	617a      	str	r2, [r7, #20]
 800d1e6:	68ba      	ldr	r2, [r7, #8]
 800d1e8:	b2d2      	uxtb	r2, r2
 800d1ea:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	607b      	str	r3, [r7, #4]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d1f3      	bne.n	800d1e0 <mem_set+0x10>
}
 800d1f8:	bf00      	nop
 800d1fa:	bf00      	nop
 800d1fc:	371c      	adds	r7, #28
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr

0800d206 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d206:	b480      	push	{r7}
 800d208:	b089      	sub	sp, #36	@ 0x24
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	60f8      	str	r0, [r7, #12]
 800d20e:	60b9      	str	r1, [r7, #8]
 800d210:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	61fb      	str	r3, [r7, #28]
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	1c5a      	adds	r2, r3, #1
 800d222:	61fa      	str	r2, [r7, #28]
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	4619      	mov	r1, r3
 800d228:	69bb      	ldr	r3, [r7, #24]
 800d22a:	1c5a      	adds	r2, r3, #1
 800d22c:	61ba      	str	r2, [r7, #24]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	1acb      	subs	r3, r1, r3
 800d232:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	3b01      	subs	r3, #1
 800d238:	607b      	str	r3, [r7, #4]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d002      	beq.n	800d246 <mem_cmp+0x40>
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d0eb      	beq.n	800d21e <mem_cmp+0x18>

	return r;
 800d246:	697b      	ldr	r3, [r7, #20]
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3724      	adds	r7, #36	@ 0x24
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr

0800d254 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d254:	b480      	push	{r7}
 800d256:	b083      	sub	sp, #12
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d25e:	e002      	b.n	800d266 <chk_chr+0x12>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	3301      	adds	r3, #1
 800d264:	607b      	str	r3, [r7, #4]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d005      	beq.n	800d27a <chk_chr+0x26>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	461a      	mov	r2, r3
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	4293      	cmp	r3, r2
 800d278:	d1f2      	bne.n	800d260 <chk_chr+0xc>
	return *str;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	781b      	ldrb	r3, [r3, #0]
}
 800d27e:	4618      	mov	r0, r3
 800d280:	370c      	adds	r7, #12
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr
	...

0800d28c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b085      	sub	sp, #20
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d296:	2300      	movs	r3, #0
 800d298:	60bb      	str	r3, [r7, #8]
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	60fb      	str	r3, [r7, #12]
 800d29e:	e029      	b.n	800d2f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d2a0:	4a27      	ldr	r2, [pc, #156]	@ (800d340 <chk_lock+0xb4>)
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	011b      	lsls	r3, r3, #4
 800d2a6:	4413      	add	r3, r2
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d01d      	beq.n	800d2ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d2ae:	4a24      	ldr	r2, [pc, #144]	@ (800d340 <chk_lock+0xb4>)
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	011b      	lsls	r3, r3, #4
 800d2b4:	4413      	add	r3, r2
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d116      	bne.n	800d2ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d2c0:	4a1f      	ldr	r2, [pc, #124]	@ (800d340 <chk_lock+0xb4>)
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	011b      	lsls	r3, r3, #4
 800d2c6:	4413      	add	r3, r2
 800d2c8:	3304      	adds	r3, #4
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d10c      	bne.n	800d2ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d2d4:	4a1a      	ldr	r2, [pc, #104]	@ (800d340 <chk_lock+0xb4>)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	011b      	lsls	r3, r3, #4
 800d2da:	4413      	add	r3, r2
 800d2dc:	3308      	adds	r3, #8
 800d2de:	681a      	ldr	r2, [r3, #0]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d102      	bne.n	800d2ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d2e8:	e007      	b.n	800d2fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	60fb      	str	r3, [r7, #12]
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d9d2      	bls.n	800d2a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2b02      	cmp	r3, #2
 800d2fe:	d109      	bne.n	800d314 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d102      	bne.n	800d30c <chk_lock+0x80>
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	2b02      	cmp	r3, #2
 800d30a:	d101      	bne.n	800d310 <chk_lock+0x84>
 800d30c:	2300      	movs	r3, #0
 800d30e:	e010      	b.n	800d332 <chk_lock+0xa6>
 800d310:	2312      	movs	r3, #18
 800d312:	e00e      	b.n	800d332 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d108      	bne.n	800d32c <chk_lock+0xa0>
 800d31a:	4a09      	ldr	r2, [pc, #36]	@ (800d340 <chk_lock+0xb4>)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	011b      	lsls	r3, r3, #4
 800d320:	4413      	add	r3, r2
 800d322:	330c      	adds	r3, #12
 800d324:	881b      	ldrh	r3, [r3, #0]
 800d326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d32a:	d101      	bne.n	800d330 <chk_lock+0xa4>
 800d32c:	2310      	movs	r3, #16
 800d32e:	e000      	b.n	800d332 <chk_lock+0xa6>
 800d330:	2300      	movs	r3, #0
}
 800d332:	4618      	mov	r0, r3
 800d334:	3714      	adds	r7, #20
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop
 800d340:	20006724 	.word	0x20006724

0800d344 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d34a:	2300      	movs	r3, #0
 800d34c:	607b      	str	r3, [r7, #4]
 800d34e:	e002      	b.n	800d356 <enq_lock+0x12>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	3301      	adds	r3, #1
 800d354:	607b      	str	r3, [r7, #4]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d806      	bhi.n	800d36a <enq_lock+0x26>
 800d35c:	4a09      	ldr	r2, [pc, #36]	@ (800d384 <enq_lock+0x40>)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	011b      	lsls	r3, r3, #4
 800d362:	4413      	add	r3, r2
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d1f2      	bne.n	800d350 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	bf14      	ite	ne
 800d370:	2301      	movne	r3, #1
 800d372:	2300      	moveq	r3, #0
 800d374:	b2db      	uxtb	r3, r3
}
 800d376:	4618      	mov	r0, r3
 800d378:	370c      	adds	r7, #12
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr
 800d382:	bf00      	nop
 800d384:	20006724 	.word	0x20006724

0800d388 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d392:	2300      	movs	r3, #0
 800d394:	60fb      	str	r3, [r7, #12]
 800d396:	e01f      	b.n	800d3d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d398:	4a41      	ldr	r2, [pc, #260]	@ (800d4a0 <inc_lock+0x118>)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	011b      	lsls	r3, r3, #4
 800d39e:	4413      	add	r3, r2
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d113      	bne.n	800d3d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d3aa:	4a3d      	ldr	r2, [pc, #244]	@ (800d4a0 <inc_lock+0x118>)
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	011b      	lsls	r3, r3, #4
 800d3b0:	4413      	add	r3, r2
 800d3b2:	3304      	adds	r3, #4
 800d3b4:	681a      	ldr	r2, [r3, #0]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d109      	bne.n	800d3d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d3be:	4a38      	ldr	r2, [pc, #224]	@ (800d4a0 <inc_lock+0x118>)
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	011b      	lsls	r3, r3, #4
 800d3c4:	4413      	add	r3, r2
 800d3c6:	3308      	adds	r3, #8
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d006      	beq.n	800d3e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	60fb      	str	r3, [r7, #12]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d9dc      	bls.n	800d398 <inc_lock+0x10>
 800d3de:	e000      	b.n	800d3e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d3e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2b02      	cmp	r3, #2
 800d3e6:	d132      	bne.n	800d44e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	60fb      	str	r3, [r7, #12]
 800d3ec:	e002      	b.n	800d3f4 <inc_lock+0x6c>
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	60fb      	str	r3, [r7, #12]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d806      	bhi.n	800d408 <inc_lock+0x80>
 800d3fa:	4a29      	ldr	r2, [pc, #164]	@ (800d4a0 <inc_lock+0x118>)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	011b      	lsls	r3, r3, #4
 800d400:	4413      	add	r3, r2
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d1f2      	bne.n	800d3ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b02      	cmp	r3, #2
 800d40c:	d101      	bne.n	800d412 <inc_lock+0x8a>
 800d40e:	2300      	movs	r3, #0
 800d410:	e040      	b.n	800d494 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	4922      	ldr	r1, [pc, #136]	@ (800d4a0 <inc_lock+0x118>)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	011b      	lsls	r3, r3, #4
 800d41c:	440b      	add	r3, r1
 800d41e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	689a      	ldr	r2, [r3, #8]
 800d424:	491e      	ldr	r1, [pc, #120]	@ (800d4a0 <inc_lock+0x118>)
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	011b      	lsls	r3, r3, #4
 800d42a:	440b      	add	r3, r1
 800d42c:	3304      	adds	r3, #4
 800d42e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	695a      	ldr	r2, [r3, #20]
 800d434:	491a      	ldr	r1, [pc, #104]	@ (800d4a0 <inc_lock+0x118>)
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	011b      	lsls	r3, r3, #4
 800d43a:	440b      	add	r3, r1
 800d43c:	3308      	adds	r3, #8
 800d43e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d440:	4a17      	ldr	r2, [pc, #92]	@ (800d4a0 <inc_lock+0x118>)
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	011b      	lsls	r3, r3, #4
 800d446:	4413      	add	r3, r2
 800d448:	330c      	adds	r3, #12
 800d44a:	2200      	movs	r2, #0
 800d44c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d009      	beq.n	800d468 <inc_lock+0xe0>
 800d454:	4a12      	ldr	r2, [pc, #72]	@ (800d4a0 <inc_lock+0x118>)
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	011b      	lsls	r3, r3, #4
 800d45a:	4413      	add	r3, r2
 800d45c:	330c      	adds	r3, #12
 800d45e:	881b      	ldrh	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d001      	beq.n	800d468 <inc_lock+0xe0>
 800d464:	2300      	movs	r3, #0
 800d466:	e015      	b.n	800d494 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d108      	bne.n	800d480 <inc_lock+0xf8>
 800d46e:	4a0c      	ldr	r2, [pc, #48]	@ (800d4a0 <inc_lock+0x118>)
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	011b      	lsls	r3, r3, #4
 800d474:	4413      	add	r3, r2
 800d476:	330c      	adds	r3, #12
 800d478:	881b      	ldrh	r3, [r3, #0]
 800d47a:	3301      	adds	r3, #1
 800d47c:	b29a      	uxth	r2, r3
 800d47e:	e001      	b.n	800d484 <inc_lock+0xfc>
 800d480:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d484:	4906      	ldr	r1, [pc, #24]	@ (800d4a0 <inc_lock+0x118>)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	011b      	lsls	r3, r3, #4
 800d48a:	440b      	add	r3, r1
 800d48c:	330c      	adds	r3, #12
 800d48e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	3301      	adds	r3, #1
}
 800d494:	4618      	mov	r0, r3
 800d496:	3714      	adds	r7, #20
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr
 800d4a0:	20006724 	.word	0x20006724

0800d4a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b085      	sub	sp, #20
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	60fb      	str	r3, [r7, #12]
 800d4b0:	e010      	b.n	800d4d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d4b2:	4a0d      	ldr	r2, [pc, #52]	@ (800d4e8 <clear_lock+0x44>)
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	011b      	lsls	r3, r3, #4
 800d4b8:	4413      	add	r3, r2
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	687a      	ldr	r2, [r7, #4]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d105      	bne.n	800d4ce <clear_lock+0x2a>
 800d4c2:	4a09      	ldr	r2, [pc, #36]	@ (800d4e8 <clear_lock+0x44>)
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	011b      	lsls	r3, r3, #4
 800d4c8:	4413      	add	r3, r2
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	60fb      	str	r3, [r7, #12]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d9eb      	bls.n	800d4b2 <clear_lock+0xe>
	}
}
 800d4da:	bf00      	nop
 800d4dc:	bf00      	nop
 800d4de:	3714      	adds	r7, #20
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr
 800d4e8:	20006724 	.word	0x20006724

0800d4ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b086      	sub	sp, #24
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	78db      	ldrb	r3, [r3, #3]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d034      	beq.n	800d56a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d504:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	7858      	ldrb	r0, [r3, #1]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d510:	2301      	movs	r3, #1
 800d512:	697a      	ldr	r2, [r7, #20]
 800d514:	f7ff fd7a 	bl	800d00c <disk_write>
 800d518:	4603      	mov	r3, r0
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d002      	beq.n	800d524 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d51e:	2301      	movs	r3, #1
 800d520:	73fb      	strb	r3, [r7, #15]
 800d522:	e022      	b.n	800d56a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d52e:	697a      	ldr	r2, [r7, #20]
 800d530:	1ad2      	subs	r2, r2, r3
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6a1b      	ldr	r3, [r3, #32]
 800d536:	429a      	cmp	r2, r3
 800d538:	d217      	bcs.n	800d56a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	789b      	ldrb	r3, [r3, #2]
 800d53e:	613b      	str	r3, [r7, #16]
 800d540:	e010      	b.n	800d564 <sync_window+0x78>
					wsect += fs->fsize;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6a1b      	ldr	r3, [r3, #32]
 800d546:	697a      	ldr	r2, [r7, #20]
 800d548:	4413      	add	r3, r2
 800d54a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	7858      	ldrb	r0, [r3, #1]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d556:	2301      	movs	r3, #1
 800d558:	697a      	ldr	r2, [r7, #20]
 800d55a:	f7ff fd57 	bl	800d00c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	3b01      	subs	r3, #1
 800d562:	613b      	str	r3, [r7, #16]
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	2b01      	cmp	r3, #1
 800d568:	d8eb      	bhi.n	800d542 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3718      	adds	r7, #24
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d57e:	2300      	movs	r3, #0
 800d580:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d586:	683a      	ldr	r2, [r7, #0]
 800d588:	429a      	cmp	r2, r3
 800d58a:	d01b      	beq.n	800d5c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f7ff ffad 	bl	800d4ec <sync_window>
 800d592:	4603      	mov	r3, r0
 800d594:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d596:	7bfb      	ldrb	r3, [r7, #15]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d113      	bne.n	800d5c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	7858      	ldrb	r0, [r3, #1]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	683a      	ldr	r2, [r7, #0]
 800d5aa:	f7ff fd0f 	bl	800cfcc <disk_read>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d004      	beq.n	800d5be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d5b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d5b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	683a      	ldr	r2, [r7, #0]
 800d5c2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800d5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3710      	adds	r7, #16
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
	...

0800d5d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f7ff ff87 	bl	800d4ec <sync_window>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d5e2:	7bfb      	ldrb	r3, [r7, #15]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d159      	bne.n	800d69c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	2b03      	cmp	r3, #3
 800d5ee:	d149      	bne.n	800d684 <sync_fs+0xb4>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	791b      	ldrb	r3, [r3, #4]
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d145      	bne.n	800d684 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	899b      	ldrh	r3, [r3, #12]
 800d602:	461a      	mov	r2, r3
 800d604:	2100      	movs	r1, #0
 800d606:	f7ff fde3 	bl	800d1d0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	3338      	adds	r3, #56	@ 0x38
 800d60e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d612:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d616:	4618      	mov	r0, r3
 800d618:	f7ff fd72 	bl	800d100 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	3338      	adds	r3, #56	@ 0x38
 800d620:	4921      	ldr	r1, [pc, #132]	@ (800d6a8 <sync_fs+0xd8>)
 800d622:	4618      	mov	r0, r3
 800d624:	f7ff fd87 	bl	800d136 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	3338      	adds	r3, #56	@ 0x38
 800d62c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d630:	491e      	ldr	r1, [pc, #120]	@ (800d6ac <sync_fs+0xdc>)
 800d632:	4618      	mov	r0, r3
 800d634:	f7ff fd7f 	bl	800d136 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	3338      	adds	r3, #56	@ 0x38
 800d63c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	699b      	ldr	r3, [r3, #24]
 800d644:	4619      	mov	r1, r3
 800d646:	4610      	mov	r0, r2
 800d648:	f7ff fd75 	bl	800d136 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	3338      	adds	r3, #56	@ 0x38
 800d650:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	695b      	ldr	r3, [r3, #20]
 800d658:	4619      	mov	r1, r3
 800d65a:	4610      	mov	r0, r2
 800d65c:	f7ff fd6b 	bl	800d136 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d664:	1c5a      	adds	r2, r3, #1
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	7858      	ldrb	r0, [r3, #1]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d678:	2301      	movs	r3, #1
 800d67a:	f7ff fcc7 	bl	800d00c <disk_write>
			fs->fsi_flag = 0;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2200      	movs	r2, #0
 800d682:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	785b      	ldrb	r3, [r3, #1]
 800d688:	2200      	movs	r2, #0
 800d68a:	2100      	movs	r1, #0
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7ff fcdd 	bl	800d04c <disk_ioctl>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d001      	beq.n	800d69c <sync_fs+0xcc>
 800d698:	2301      	movs	r3, #1
 800d69a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	41615252 	.word	0x41615252
 800d6ac:	61417272 	.word	0x61417272

0800d6b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b083      	sub	sp, #12
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	3b02      	subs	r3, #2
 800d6be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	69db      	ldr	r3, [r3, #28]
 800d6c4:	3b02      	subs	r3, #2
 800d6c6:	683a      	ldr	r2, [r7, #0]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d301      	bcc.n	800d6d0 <clust2sect+0x20>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	e008      	b.n	800d6e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	895b      	ldrh	r3, [r3, #10]
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	fb03 f202 	mul.w	r2, r3, r2
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6e0:	4413      	add	r3, r2
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	370c      	adds	r7, #12
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr

0800d6ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b086      	sub	sp, #24
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
 800d6f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	2b01      	cmp	r3, #1
 800d702:	d904      	bls.n	800d70e <get_fat+0x20>
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	69db      	ldr	r3, [r3, #28]
 800d708:	683a      	ldr	r2, [r7, #0]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d302      	bcc.n	800d714 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d70e:	2301      	movs	r3, #1
 800d710:	617b      	str	r3, [r7, #20]
 800d712:	e0ba      	b.n	800d88a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d714:	f04f 33ff 	mov.w	r3, #4294967295
 800d718:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	2b03      	cmp	r3, #3
 800d720:	f000 8082 	beq.w	800d828 <get_fat+0x13a>
 800d724:	2b03      	cmp	r3, #3
 800d726:	f300 80a6 	bgt.w	800d876 <get_fat+0x188>
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d002      	beq.n	800d734 <get_fat+0x46>
 800d72e:	2b02      	cmp	r3, #2
 800d730:	d055      	beq.n	800d7de <get_fat+0xf0>
 800d732:	e0a0      	b.n	800d876 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	60fb      	str	r3, [r7, #12]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	085b      	lsrs	r3, r3, #1
 800d73c:	68fa      	ldr	r2, [r7, #12]
 800d73e:	4413      	add	r3, r2
 800d740:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	899b      	ldrh	r3, [r3, #12]
 800d74a:	4619      	mov	r1, r3
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d752:	4413      	add	r3, r2
 800d754:	4619      	mov	r1, r3
 800d756:	6938      	ldr	r0, [r7, #16]
 800d758:	f7ff ff0c 	bl	800d574 <move_window>
 800d75c:	4603      	mov	r3, r0
 800d75e:	2b00      	cmp	r3, #0
 800d760:	f040 808c 	bne.w	800d87c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	1c5a      	adds	r2, r3, #1
 800d768:	60fa      	str	r2, [r7, #12]
 800d76a:	693a      	ldr	r2, [r7, #16]
 800d76c:	8992      	ldrh	r2, [r2, #12]
 800d76e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d772:	fb01 f202 	mul.w	r2, r1, r2
 800d776:	1a9b      	subs	r3, r3, r2
 800d778:	693a      	ldr	r2, [r7, #16]
 800d77a:	4413      	add	r3, r2
 800d77c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d780:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	899b      	ldrh	r3, [r3, #12]
 800d78a:	4619      	mov	r1, r3
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d792:	4413      	add	r3, r2
 800d794:	4619      	mov	r1, r3
 800d796:	6938      	ldr	r0, [r7, #16]
 800d798:	f7ff feec 	bl	800d574 <move_window>
 800d79c:	4603      	mov	r3, r0
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d16e      	bne.n	800d880 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	899b      	ldrh	r3, [r3, #12]
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7ae:	fb01 f202 	mul.w	r2, r1, r2
 800d7b2:	1a9b      	subs	r3, r3, r2
 800d7b4:	693a      	ldr	r2, [r7, #16]
 800d7b6:	4413      	add	r3, r2
 800d7b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d7bc:	021b      	lsls	r3, r3, #8
 800d7be:	68ba      	ldr	r2, [r7, #8]
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	f003 0301 	and.w	r3, r3, #1
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d002      	beq.n	800d7d4 <get_fat+0xe6>
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	091b      	lsrs	r3, r3, #4
 800d7d2:	e002      	b.n	800d7da <get_fat+0xec>
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d7da:	617b      	str	r3, [r7, #20]
			break;
 800d7dc:	e055      	b.n	800d88a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	899b      	ldrh	r3, [r3, #12]
 800d7e6:	085b      	lsrs	r3, r3, #1
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800d7f2:	4413      	add	r3, r2
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	6938      	ldr	r0, [r7, #16]
 800d7f8:	f7ff febc 	bl	800d574 <move_window>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d140      	bne.n	800d884 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	005b      	lsls	r3, r3, #1
 800d80c:	693a      	ldr	r2, [r7, #16]
 800d80e:	8992      	ldrh	r2, [r2, #12]
 800d810:	fbb3 f0f2 	udiv	r0, r3, r2
 800d814:	fb00 f202 	mul.w	r2, r0, r2
 800d818:	1a9b      	subs	r3, r3, r2
 800d81a:	440b      	add	r3, r1
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7ff fc33 	bl	800d088 <ld_word>
 800d822:	4603      	mov	r3, r0
 800d824:	617b      	str	r3, [r7, #20]
			break;
 800d826:	e030      	b.n	800d88a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	899b      	ldrh	r3, [r3, #12]
 800d830:	089b      	lsrs	r3, r3, #2
 800d832:	b29b      	uxth	r3, r3
 800d834:	4619      	mov	r1, r3
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	fbb3 f3f1 	udiv	r3, r3, r1
 800d83c:	4413      	add	r3, r2
 800d83e:	4619      	mov	r1, r3
 800d840:	6938      	ldr	r0, [r7, #16]
 800d842:	f7ff fe97 	bl	800d574 <move_window>
 800d846:	4603      	mov	r3, r0
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d11d      	bne.n	800d888 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	693a      	ldr	r2, [r7, #16]
 800d858:	8992      	ldrh	r2, [r2, #12]
 800d85a:	fbb3 f0f2 	udiv	r0, r3, r2
 800d85e:	fb00 f202 	mul.w	r2, r0, r2
 800d862:	1a9b      	subs	r3, r3, r2
 800d864:	440b      	add	r3, r1
 800d866:	4618      	mov	r0, r3
 800d868:	f7ff fc27 	bl	800d0ba <ld_dword>
 800d86c:	4603      	mov	r3, r0
 800d86e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d872:	617b      	str	r3, [r7, #20]
			break;
 800d874:	e009      	b.n	800d88a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d876:	2301      	movs	r3, #1
 800d878:	617b      	str	r3, [r7, #20]
 800d87a:	e006      	b.n	800d88a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d87c:	bf00      	nop
 800d87e:	e004      	b.n	800d88a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d880:	bf00      	nop
 800d882:	e002      	b.n	800d88a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d884:	bf00      	nop
 800d886:	e000      	b.n	800d88a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d888:	bf00      	nop
		}
	}

	return val;
 800d88a:	697b      	ldr	r3, [r7, #20]
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3718      	adds	r7, #24
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d894:	b590      	push	{r4, r7, lr}
 800d896:	b089      	sub	sp, #36	@ 0x24
 800d898:	af00      	add	r7, sp, #0
 800d89a:	60f8      	str	r0, [r7, #12]
 800d89c:	60b9      	str	r1, [r7, #8]
 800d89e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d8a0:	2302      	movs	r3, #2
 800d8a2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	2b01      	cmp	r3, #1
 800d8a8:	f240 8109 	bls.w	800dabe <put_fat+0x22a>
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	69db      	ldr	r3, [r3, #28]
 800d8b0:	68ba      	ldr	r2, [r7, #8]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	f080 8103 	bcs.w	800dabe <put_fat+0x22a>
		switch (fs->fs_type) {
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	2b03      	cmp	r3, #3
 800d8be:	f000 80b6 	beq.w	800da2e <put_fat+0x19a>
 800d8c2:	2b03      	cmp	r3, #3
 800d8c4:	f300 80fb 	bgt.w	800dabe <put_fat+0x22a>
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d003      	beq.n	800d8d4 <put_fat+0x40>
 800d8cc:	2b02      	cmp	r3, #2
 800d8ce:	f000 8083 	beq.w	800d9d8 <put_fat+0x144>
 800d8d2:	e0f4      	b.n	800dabe <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	61bb      	str	r3, [r7, #24]
 800d8d8:	69bb      	ldr	r3, [r7, #24]
 800d8da:	085b      	lsrs	r3, r3, #1
 800d8dc:	69ba      	ldr	r2, [r7, #24]
 800d8de:	4413      	add	r3, r2
 800d8e0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	899b      	ldrh	r3, [r3, #12]
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	69bb      	ldr	r3, [r7, #24]
 800d8ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800d8f2:	4413      	add	r3, r2
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f7ff fe3c 	bl	800d574 <move_window>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d900:	7ffb      	ldrb	r3, [r7, #31]
 800d902:	2b00      	cmp	r3, #0
 800d904:	f040 80d4 	bne.w	800dab0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d90e:	69bb      	ldr	r3, [r7, #24]
 800d910:	1c5a      	adds	r2, r3, #1
 800d912:	61ba      	str	r2, [r7, #24]
 800d914:	68fa      	ldr	r2, [r7, #12]
 800d916:	8992      	ldrh	r2, [r2, #12]
 800d918:	fbb3 f0f2 	udiv	r0, r3, r2
 800d91c:	fb00 f202 	mul.w	r2, r0, r2
 800d920:	1a9b      	subs	r3, r3, r2
 800d922:	440b      	add	r3, r1
 800d924:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	f003 0301 	and.w	r3, r3, #1
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d00d      	beq.n	800d94c <put_fat+0xb8>
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	b25b      	sxtb	r3, r3
 800d936:	f003 030f 	and.w	r3, r3, #15
 800d93a:	b25a      	sxtb	r2, r3
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	b25b      	sxtb	r3, r3
 800d940:	011b      	lsls	r3, r3, #4
 800d942:	b25b      	sxtb	r3, r3
 800d944:	4313      	orrs	r3, r2
 800d946:	b25b      	sxtb	r3, r3
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	e001      	b.n	800d950 <put_fat+0xbc>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	697a      	ldr	r2, [r7, #20]
 800d952:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	2201      	movs	r2, #1
 800d958:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	899b      	ldrh	r3, [r3, #12]
 800d962:	4619      	mov	r1, r3
 800d964:	69bb      	ldr	r3, [r7, #24]
 800d966:	fbb3 f3f1 	udiv	r3, r3, r1
 800d96a:	4413      	add	r3, r2
 800d96c:	4619      	mov	r1, r3
 800d96e:	68f8      	ldr	r0, [r7, #12]
 800d970:	f7ff fe00 	bl	800d574 <move_window>
 800d974:	4603      	mov	r3, r0
 800d976:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d978:	7ffb      	ldrb	r3, [r7, #31]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	f040 809a 	bne.w	800dab4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	899b      	ldrh	r3, [r3, #12]
 800d98a:	461a      	mov	r2, r3
 800d98c:	69bb      	ldr	r3, [r7, #24]
 800d98e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d992:	fb00 f202 	mul.w	r2, r0, r2
 800d996:	1a9b      	subs	r3, r3, r2
 800d998:	440b      	add	r3, r1
 800d99a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	f003 0301 	and.w	r3, r3, #1
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d003      	beq.n	800d9ae <put_fat+0x11a>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	091b      	lsrs	r3, r3, #4
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	e00e      	b.n	800d9cc <put_fat+0x138>
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	b25b      	sxtb	r3, r3
 800d9b4:	f023 030f 	bic.w	r3, r3, #15
 800d9b8:	b25a      	sxtb	r2, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	0a1b      	lsrs	r3, r3, #8
 800d9be:	b25b      	sxtb	r3, r3
 800d9c0:	f003 030f 	and.w	r3, r3, #15
 800d9c4:	b25b      	sxtb	r3, r3
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	b25b      	sxtb	r3, r3
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	697a      	ldr	r2, [r7, #20]
 800d9ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	70da      	strb	r2, [r3, #3]
			break;
 800d9d6:	e072      	b.n	800dabe <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	899b      	ldrh	r3, [r3, #12]
 800d9e0:	085b      	lsrs	r3, r3, #1
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	fbb3 f3f1 	udiv	r3, r3, r1
 800d9ec:	4413      	add	r3, r2
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	68f8      	ldr	r0, [r7, #12]
 800d9f2:	f7ff fdbf 	bl	800d574 <move_window>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d9fa:	7ffb      	ldrb	r3, [r7, #31]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d15b      	bne.n	800dab8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	005b      	lsls	r3, r3, #1
 800da0a:	68fa      	ldr	r2, [r7, #12]
 800da0c:	8992      	ldrh	r2, [r2, #12]
 800da0e:	fbb3 f0f2 	udiv	r0, r3, r2
 800da12:	fb00 f202 	mul.w	r2, r0, r2
 800da16:	1a9b      	subs	r3, r3, r2
 800da18:	440b      	add	r3, r1
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	b292      	uxth	r2, r2
 800da1e:	4611      	mov	r1, r2
 800da20:	4618      	mov	r0, r3
 800da22:	f7ff fb6d 	bl	800d100 <st_word>
			fs->wflag = 1;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2201      	movs	r2, #1
 800da2a:	70da      	strb	r2, [r3, #3]
			break;
 800da2c:	e047      	b.n	800dabe <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	899b      	ldrh	r3, [r3, #12]
 800da36:	089b      	lsrs	r3, r3, #2
 800da38:	b29b      	uxth	r3, r3
 800da3a:	4619      	mov	r1, r3
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	fbb3 f3f1 	udiv	r3, r3, r1
 800da42:	4413      	add	r3, r2
 800da44:	4619      	mov	r1, r3
 800da46:	68f8      	ldr	r0, [r7, #12]
 800da48:	f7ff fd94 	bl	800d574 <move_window>
 800da4c:	4603      	mov	r3, r0
 800da4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da50:	7ffb      	ldrb	r3, [r7, #31]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d132      	bne.n	800dabc <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	009b      	lsls	r3, r3, #2
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	8992      	ldrh	r2, [r2, #12]
 800da6a:	fbb3 f0f2 	udiv	r0, r3, r2
 800da6e:	fb00 f202 	mul.w	r2, r0, r2
 800da72:	1a9b      	subs	r3, r3, r2
 800da74:	440b      	add	r3, r1
 800da76:	4618      	mov	r0, r3
 800da78:	f7ff fb1f 	bl	800d0ba <ld_dword>
 800da7c:	4603      	mov	r3, r0
 800da7e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800da82:	4323      	orrs	r3, r4
 800da84:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	009b      	lsls	r3, r3, #2
 800da90:	68fa      	ldr	r2, [r7, #12]
 800da92:	8992      	ldrh	r2, [r2, #12]
 800da94:	fbb3 f0f2 	udiv	r0, r3, r2
 800da98:	fb00 f202 	mul.w	r2, r0, r2
 800da9c:	1a9b      	subs	r3, r3, r2
 800da9e:	440b      	add	r3, r1
 800daa0:	6879      	ldr	r1, [r7, #4]
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7ff fb47 	bl	800d136 <st_dword>
			fs->wflag = 1;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2201      	movs	r2, #1
 800daac:	70da      	strb	r2, [r3, #3]
			break;
 800daae:	e006      	b.n	800dabe <put_fat+0x22a>
			if (res != FR_OK) break;
 800dab0:	bf00      	nop
 800dab2:	e004      	b.n	800dabe <put_fat+0x22a>
			if (res != FR_OK) break;
 800dab4:	bf00      	nop
 800dab6:	e002      	b.n	800dabe <put_fat+0x22a>
			if (res != FR_OK) break;
 800dab8:	bf00      	nop
 800daba:	e000      	b.n	800dabe <put_fat+0x22a>
			if (res != FR_OK) break;
 800dabc:	bf00      	nop
		}
	}
	return res;
 800dabe:	7ffb      	ldrb	r3, [r7, #31]
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3724      	adds	r7, #36	@ 0x24
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd90      	pop	{r4, r7, pc}

0800dac8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b088      	sub	sp, #32
 800dacc:	af00      	add	r7, sp, #0
 800dace:	60f8      	str	r0, [r7, #12]
 800dad0:	60b9      	str	r1, [r7, #8]
 800dad2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dad4:	2300      	movs	r3, #0
 800dad6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d904      	bls.n	800daee <remove_chain+0x26>
 800dae4:	69bb      	ldr	r3, [r7, #24]
 800dae6:	69db      	ldr	r3, [r3, #28]
 800dae8:	68ba      	ldr	r2, [r7, #8]
 800daea:	429a      	cmp	r2, r3
 800daec:	d301      	bcc.n	800daf2 <remove_chain+0x2a>
 800daee:	2302      	movs	r3, #2
 800daf0:	e04b      	b.n	800db8a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d00c      	beq.n	800db12 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800daf8:	f04f 32ff 	mov.w	r2, #4294967295
 800dafc:	6879      	ldr	r1, [r7, #4]
 800dafe:	69b8      	ldr	r0, [r7, #24]
 800db00:	f7ff fec8 	bl	800d894 <put_fat>
 800db04:	4603      	mov	r3, r0
 800db06:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800db08:	7ffb      	ldrb	r3, [r7, #31]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d001      	beq.n	800db12 <remove_chain+0x4a>
 800db0e:	7ffb      	ldrb	r3, [r7, #31]
 800db10:	e03b      	b.n	800db8a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800db12:	68b9      	ldr	r1, [r7, #8]
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f7ff fdea 	bl	800d6ee <get_fat>
 800db1a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d031      	beq.n	800db86 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	2b01      	cmp	r3, #1
 800db26:	d101      	bne.n	800db2c <remove_chain+0x64>
 800db28:	2302      	movs	r3, #2
 800db2a:	e02e      	b.n	800db8a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db32:	d101      	bne.n	800db38 <remove_chain+0x70>
 800db34:	2301      	movs	r3, #1
 800db36:	e028      	b.n	800db8a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800db38:	2200      	movs	r2, #0
 800db3a:	68b9      	ldr	r1, [r7, #8]
 800db3c:	69b8      	ldr	r0, [r7, #24]
 800db3e:	f7ff fea9 	bl	800d894 <put_fat>
 800db42:	4603      	mov	r3, r0
 800db44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800db46:	7ffb      	ldrb	r3, [r7, #31]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d001      	beq.n	800db50 <remove_chain+0x88>
 800db4c:	7ffb      	ldrb	r3, [r7, #31]
 800db4e:	e01c      	b.n	800db8a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800db50:	69bb      	ldr	r3, [r7, #24]
 800db52:	699a      	ldr	r2, [r3, #24]
 800db54:	69bb      	ldr	r3, [r7, #24]
 800db56:	69db      	ldr	r3, [r3, #28]
 800db58:	3b02      	subs	r3, #2
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d20b      	bcs.n	800db76 <remove_chain+0xae>
			fs->free_clst++;
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	699b      	ldr	r3, [r3, #24]
 800db62:	1c5a      	adds	r2, r3, #1
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800db68:	69bb      	ldr	r3, [r7, #24]
 800db6a:	791b      	ldrb	r3, [r3, #4]
 800db6c:	f043 0301 	orr.w	r3, r3, #1
 800db70:	b2da      	uxtb	r2, r3
 800db72:	69bb      	ldr	r3, [r7, #24]
 800db74:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	69db      	ldr	r3, [r3, #28]
 800db7e:	68ba      	ldr	r2, [r7, #8]
 800db80:	429a      	cmp	r2, r3
 800db82:	d3c6      	bcc.n	800db12 <remove_chain+0x4a>
 800db84:	e000      	b.n	800db88 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800db86:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800db88:	2300      	movs	r3, #0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3720      	adds	r7, #32
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b088      	sub	sp, #32
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
 800db9a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d10d      	bne.n	800dbc4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	695b      	ldr	r3, [r3, #20]
 800dbac:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dbae:	69bb      	ldr	r3, [r7, #24]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d004      	beq.n	800dbbe <create_chain+0x2c>
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	69db      	ldr	r3, [r3, #28]
 800dbb8:	69ba      	ldr	r2, [r7, #24]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d31b      	bcc.n	800dbf6 <create_chain+0x64>
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	61bb      	str	r3, [r7, #24]
 800dbc2:	e018      	b.n	800dbf6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dbc4:	6839      	ldr	r1, [r7, #0]
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f7ff fd91 	bl	800d6ee <get_fat>
 800dbcc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d801      	bhi.n	800dbd8 <create_chain+0x46>
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	e070      	b.n	800dcba <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbde:	d101      	bne.n	800dbe4 <create_chain+0x52>
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	e06a      	b.n	800dcba <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	69db      	ldr	r3, [r3, #28]
 800dbe8:	68fa      	ldr	r2, [r7, #12]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d201      	bcs.n	800dbf2 <create_chain+0x60>
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	e063      	b.n	800dcba <create_chain+0x128>
		scl = clst;
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dbfa:	69fb      	ldr	r3, [r7, #28]
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	69db      	ldr	r3, [r3, #28]
 800dc04:	69fa      	ldr	r2, [r7, #28]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d307      	bcc.n	800dc1a <create_chain+0x88>
				ncl = 2;
 800dc0a:	2302      	movs	r3, #2
 800dc0c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dc0e:	69fa      	ldr	r2, [r7, #28]
 800dc10:	69bb      	ldr	r3, [r7, #24]
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d901      	bls.n	800dc1a <create_chain+0x88>
 800dc16:	2300      	movs	r3, #0
 800dc18:	e04f      	b.n	800dcba <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dc1a:	69f9      	ldr	r1, [r7, #28]
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f7ff fd66 	bl	800d6ee <get_fat>
 800dc22:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00e      	beq.n	800dc48 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d003      	beq.n	800dc38 <create_chain+0xa6>
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc36:	d101      	bne.n	800dc3c <create_chain+0xaa>
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	e03e      	b.n	800dcba <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dc3c:	69fa      	ldr	r2, [r7, #28]
 800dc3e:	69bb      	ldr	r3, [r7, #24]
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d1da      	bne.n	800dbfa <create_chain+0x68>
 800dc44:	2300      	movs	r3, #0
 800dc46:	e038      	b.n	800dcba <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dc48:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dc4a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc4e:	69f9      	ldr	r1, [r7, #28]
 800dc50:	6938      	ldr	r0, [r7, #16]
 800dc52:	f7ff fe1f 	bl	800d894 <put_fat>
 800dc56:	4603      	mov	r3, r0
 800dc58:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dc5a:	7dfb      	ldrb	r3, [r7, #23]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d109      	bne.n	800dc74 <create_chain+0xe2>
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d006      	beq.n	800dc74 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dc66:	69fa      	ldr	r2, [r7, #28]
 800dc68:	6839      	ldr	r1, [r7, #0]
 800dc6a:	6938      	ldr	r0, [r7, #16]
 800dc6c:	f7ff fe12 	bl	800d894 <put_fat>
 800dc70:	4603      	mov	r3, r0
 800dc72:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dc74:	7dfb      	ldrb	r3, [r7, #23]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d116      	bne.n	800dca8 <create_chain+0x116>
		fs->last_clst = ncl;
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	69fa      	ldr	r2, [r7, #28]
 800dc7e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	699a      	ldr	r2, [r3, #24]
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	69db      	ldr	r3, [r3, #28]
 800dc88:	3b02      	subs	r3, #2
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d804      	bhi.n	800dc98 <create_chain+0x106>
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	699b      	ldr	r3, [r3, #24]
 800dc92:	1e5a      	subs	r2, r3, #1
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	791b      	ldrb	r3, [r3, #4]
 800dc9c:	f043 0301 	orr.w	r3, r3, #1
 800dca0:	b2da      	uxtb	r2, r3
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	711a      	strb	r2, [r3, #4]
 800dca6:	e007      	b.n	800dcb8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dca8:	7dfb      	ldrb	r3, [r7, #23]
 800dcaa:	2b01      	cmp	r3, #1
 800dcac:	d102      	bne.n	800dcb4 <create_chain+0x122>
 800dcae:	f04f 33ff 	mov.w	r3, #4294967295
 800dcb2:	e000      	b.n	800dcb6 <create_chain+0x124>
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dcb8:	69fb      	ldr	r3, [r7, #28]
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3720      	adds	r7, #32
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}

0800dcc2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dcc2:	b480      	push	{r7}
 800dcc4:	b087      	sub	sp, #28
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
 800dcca:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcd6:	3304      	adds	r3, #4
 800dcd8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	899b      	ldrh	r3, [r3, #12]
 800dcde:	461a      	mov	r2, r3
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	fbb3 f3f2 	udiv	r3, r3, r2
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	8952      	ldrh	r2, [r2, #10]
 800dcea:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcee:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	1d1a      	adds	r2, r3, #4
 800dcf4:	613a      	str	r2, [r7, #16]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d101      	bne.n	800dd04 <clmt_clust+0x42>
 800dd00:	2300      	movs	r3, #0
 800dd02:	e010      	b.n	800dd26 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800dd04:	697a      	ldr	r2, [r7, #20]
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d307      	bcc.n	800dd1c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800dd0c:	697a      	ldr	r2, [r7, #20]
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	1ad3      	subs	r3, r2, r3
 800dd12:	617b      	str	r3, [r7, #20]
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	3304      	adds	r3, #4
 800dd18:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dd1a:	e7e9      	b.n	800dcf0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800dd1c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	4413      	add	r3, r2
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	371c      	adds	r7, #28
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr

0800dd32 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dd32:	b580      	push	{r7, lr}
 800dd34:	b086      	sub	sp, #24
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	6078      	str	r0, [r7, #4]
 800dd3a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dd48:	d204      	bcs.n	800dd54 <dir_sdi+0x22>
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	f003 031f 	and.w	r3, r3, #31
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d001      	beq.n	800dd58 <dir_sdi+0x26>
		return FR_INT_ERR;
 800dd54:	2302      	movs	r3, #2
 800dd56:	e071      	b.n	800de3c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	683a      	ldr	r2, [r7, #0]
 800dd5c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	689b      	ldr	r3, [r3, #8]
 800dd62:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d106      	bne.n	800dd78 <dir_sdi+0x46>
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	2b02      	cmp	r3, #2
 800dd70:	d902      	bls.n	800dd78 <dir_sdi+0x46>
		clst = fs->dirbase;
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd76:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d10c      	bne.n	800dd98 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	095b      	lsrs	r3, r3, #5
 800dd82:	693a      	ldr	r2, [r7, #16]
 800dd84:	8912      	ldrh	r2, [r2, #8]
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d301      	bcc.n	800dd8e <dir_sdi+0x5c>
 800dd8a:	2302      	movs	r3, #2
 800dd8c:	e056      	b.n	800de3c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	61da      	str	r2, [r3, #28]
 800dd96:	e02d      	b.n	800ddf4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	895b      	ldrh	r3, [r3, #10]
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	899b      	ldrh	r3, [r3, #12]
 800dda2:	fb02 f303 	mul.w	r3, r2, r3
 800dda6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dda8:	e019      	b.n	800ddde <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6979      	ldr	r1, [r7, #20]
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7ff fc9d 	bl	800d6ee <get_fat>
 800ddb4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddbc:	d101      	bne.n	800ddc2 <dir_sdi+0x90>
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	e03c      	b.n	800de3c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d904      	bls.n	800ddd2 <dir_sdi+0xa0>
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	69db      	ldr	r3, [r3, #28]
 800ddcc:	697a      	ldr	r2, [r7, #20]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d301      	bcc.n	800ddd6 <dir_sdi+0xa4>
 800ddd2:	2302      	movs	r3, #2
 800ddd4:	e032      	b.n	800de3c <dir_sdi+0x10a>
			ofs -= csz;
 800ddd6:	683a      	ldr	r2, [r7, #0]
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	1ad3      	subs	r3, r2, r3
 800dddc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ddde:	683a      	ldr	r2, [r7, #0]
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d2e1      	bcs.n	800ddaa <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800dde6:	6979      	ldr	r1, [r7, #20]
 800dde8:	6938      	ldr	r0, [r7, #16]
 800ddea:	f7ff fc61 	bl	800d6b0 <clust2sect>
 800ddee:	4602      	mov	r2, r0
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	697a      	ldr	r2, [r7, #20]
 800ddf8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	69db      	ldr	r3, [r3, #28]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d101      	bne.n	800de06 <dir_sdi+0xd4>
 800de02:	2302      	movs	r3, #2
 800de04:	e01a      	b.n	800de3c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	69da      	ldr	r2, [r3, #28]
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	899b      	ldrh	r3, [r3, #12]
 800de0e:	4619      	mov	r1, r3
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	fbb3 f3f1 	udiv	r3, r3, r1
 800de16:	441a      	add	r2, r3
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	899b      	ldrh	r3, [r3, #12]
 800de26:	461a      	mov	r2, r3
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	fbb3 f0f2 	udiv	r0, r3, r2
 800de2e:	fb00 f202 	mul.w	r2, r0, r2
 800de32:	1a9b      	subs	r3, r3, r2
 800de34:	18ca      	adds	r2, r1, r3
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3718      	adds	r7, #24
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b086      	sub	sp, #24
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	695b      	ldr	r3, [r3, #20]
 800de58:	3320      	adds	r3, #32
 800de5a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	69db      	ldr	r3, [r3, #28]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d003      	beq.n	800de6c <dir_next+0x28>
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800de6a:	d301      	bcc.n	800de70 <dir_next+0x2c>
 800de6c:	2304      	movs	r3, #4
 800de6e:	e0bb      	b.n	800dfe8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	899b      	ldrh	r3, [r3, #12]
 800de74:	461a      	mov	r2, r3
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	fbb3 f1f2 	udiv	r1, r3, r2
 800de7c:	fb01 f202 	mul.w	r2, r1, r2
 800de80:	1a9b      	subs	r3, r3, r2
 800de82:	2b00      	cmp	r3, #0
 800de84:	f040 809d 	bne.w	800dfc2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	69db      	ldr	r3, [r3, #28]
 800de8c:	1c5a      	adds	r2, r3, #1
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	699b      	ldr	r3, [r3, #24]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d10b      	bne.n	800deb2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	095b      	lsrs	r3, r3, #5
 800de9e:	68fa      	ldr	r2, [r7, #12]
 800dea0:	8912      	ldrh	r2, [r2, #8]
 800dea2:	4293      	cmp	r3, r2
 800dea4:	f0c0 808d 	bcc.w	800dfc2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2200      	movs	r2, #0
 800deac:	61da      	str	r2, [r3, #28]
 800deae:	2304      	movs	r3, #4
 800deb0:	e09a      	b.n	800dfe8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	899b      	ldrh	r3, [r3, #12]
 800deb6:	461a      	mov	r2, r3
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	fbb3 f3f2 	udiv	r3, r3, r2
 800debe:	68fa      	ldr	r2, [r7, #12]
 800dec0:	8952      	ldrh	r2, [r2, #10]
 800dec2:	3a01      	subs	r2, #1
 800dec4:	4013      	ands	r3, r2
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d17b      	bne.n	800dfc2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	699b      	ldr	r3, [r3, #24]
 800ded0:	4619      	mov	r1, r3
 800ded2:	4610      	mov	r0, r2
 800ded4:	f7ff fc0b 	bl	800d6ee <get_fat>
 800ded8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d801      	bhi.n	800dee4 <dir_next+0xa0>
 800dee0:	2302      	movs	r3, #2
 800dee2:	e081      	b.n	800dfe8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deea:	d101      	bne.n	800def0 <dir_next+0xac>
 800deec:	2301      	movs	r3, #1
 800deee:	e07b      	b.n	800dfe8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	69db      	ldr	r3, [r3, #28]
 800def4:	697a      	ldr	r2, [r7, #20]
 800def6:	429a      	cmp	r2, r3
 800def8:	d359      	bcc.n	800dfae <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d104      	bne.n	800df0a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2200      	movs	r2, #0
 800df04:	61da      	str	r2, [r3, #28]
 800df06:	2304      	movs	r3, #4
 800df08:	e06e      	b.n	800dfe8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	699b      	ldr	r3, [r3, #24]
 800df10:	4619      	mov	r1, r3
 800df12:	4610      	mov	r0, r2
 800df14:	f7ff fe3d 	bl	800db92 <create_chain>
 800df18:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d101      	bne.n	800df24 <dir_next+0xe0>
 800df20:	2307      	movs	r3, #7
 800df22:	e061      	b.n	800dfe8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	2b01      	cmp	r3, #1
 800df28:	d101      	bne.n	800df2e <dir_next+0xea>
 800df2a:	2302      	movs	r3, #2
 800df2c:	e05c      	b.n	800dfe8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df34:	d101      	bne.n	800df3a <dir_next+0xf6>
 800df36:	2301      	movs	r3, #1
 800df38:	e056      	b.n	800dfe8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f7ff fad6 	bl	800d4ec <sync_window>
 800df40:	4603      	mov	r3, r0
 800df42:	2b00      	cmp	r3, #0
 800df44:	d001      	beq.n	800df4a <dir_next+0x106>
 800df46:	2301      	movs	r3, #1
 800df48:	e04e      	b.n	800dfe8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	899b      	ldrh	r3, [r3, #12]
 800df54:	461a      	mov	r2, r3
 800df56:	2100      	movs	r1, #0
 800df58:	f7ff f93a 	bl	800d1d0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df5c:	2300      	movs	r3, #0
 800df5e:	613b      	str	r3, [r7, #16]
 800df60:	6979      	ldr	r1, [r7, #20]
 800df62:	68f8      	ldr	r0, [r7, #12]
 800df64:	f7ff fba4 	bl	800d6b0 <clust2sect>
 800df68:	4602      	mov	r2, r0
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	635a      	str	r2, [r3, #52]	@ 0x34
 800df6e:	e012      	b.n	800df96 <dir_next+0x152>
						fs->wflag = 1;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2201      	movs	r2, #1
 800df74:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800df76:	68f8      	ldr	r0, [r7, #12]
 800df78:	f7ff fab8 	bl	800d4ec <sync_window>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d001      	beq.n	800df86 <dir_next+0x142>
 800df82:	2301      	movs	r3, #1
 800df84:	e030      	b.n	800dfe8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	3301      	adds	r3, #1
 800df8a:	613b      	str	r3, [r7, #16]
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df90:	1c5a      	adds	r2, r3, #1
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	635a      	str	r2, [r3, #52]	@ 0x34
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	895b      	ldrh	r3, [r3, #10]
 800df9a:	461a      	mov	r2, r3
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d3e6      	bcc.n	800df70 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	1ad2      	subs	r2, r2, r3
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	697a      	ldr	r2, [r7, #20]
 800dfb2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dfb4:	6979      	ldr	r1, [r7, #20]
 800dfb6:	68f8      	ldr	r0, [r7, #12]
 800dfb8:	f7ff fb7a 	bl	800d6b0 <clust2sect>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	68ba      	ldr	r2, [r7, #8]
 800dfc6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	899b      	ldrh	r3, [r3, #12]
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	fbb3 f0f2 	udiv	r0, r3, r2
 800dfda:	fb00 f202 	mul.w	r2, r0, r2
 800dfde:	1a9b      	subs	r3, r3, r2
 800dfe0:	18ca      	adds	r2, r1, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dfe6:	2300      	movs	r3, #0
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3718      	adds	r7, #24
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e000:	2100      	movs	r1, #0
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f7ff fe95 	bl	800dd32 <dir_sdi>
 800e008:	4603      	mov	r3, r0
 800e00a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e00c:	7dfb      	ldrb	r3, [r7, #23]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d12b      	bne.n	800e06a <dir_alloc+0x7a>
		n = 0;
 800e012:	2300      	movs	r3, #0
 800e014:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	69db      	ldr	r3, [r3, #28]
 800e01a:	4619      	mov	r1, r3
 800e01c:	68f8      	ldr	r0, [r7, #12]
 800e01e:	f7ff faa9 	bl	800d574 <move_window>
 800e022:	4603      	mov	r3, r0
 800e024:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e026:	7dfb      	ldrb	r3, [r7, #23]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d11d      	bne.n	800e068 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6a1b      	ldr	r3, [r3, #32]
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	2be5      	cmp	r3, #229	@ 0xe5
 800e034:	d004      	beq.n	800e040 <dir_alloc+0x50>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6a1b      	ldr	r3, [r3, #32]
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d107      	bne.n	800e050 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	3301      	adds	r3, #1
 800e044:	613b      	str	r3, [r7, #16]
 800e046:	693a      	ldr	r2, [r7, #16]
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d102      	bne.n	800e054 <dir_alloc+0x64>
 800e04e:	e00c      	b.n	800e06a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e050:	2300      	movs	r3, #0
 800e052:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e054:	2101      	movs	r1, #1
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f7ff fef4 	bl	800de44 <dir_next>
 800e05c:	4603      	mov	r3, r0
 800e05e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e060:	7dfb      	ldrb	r3, [r7, #23]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d0d7      	beq.n	800e016 <dir_alloc+0x26>
 800e066:	e000      	b.n	800e06a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e068:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e06a:	7dfb      	ldrb	r3, [r7, #23]
 800e06c:	2b04      	cmp	r3, #4
 800e06e:	d101      	bne.n	800e074 <dir_alloc+0x84>
 800e070:	2307      	movs	r3, #7
 800e072:	75fb      	strb	r3, [r7, #23]
	return res;
 800e074:	7dfb      	ldrb	r3, [r7, #23]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3718      	adds	r7, #24
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e07e:	b580      	push	{r7, lr}
 800e080:	b084      	sub	sp, #16
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
 800e086:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	331a      	adds	r3, #26
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7fe fffb 	bl	800d088 <ld_word>
 800e092:	4603      	mov	r3, r0
 800e094:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	2b03      	cmp	r3, #3
 800e09c:	d109      	bne.n	800e0b2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	3314      	adds	r3, #20
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fe fff0 	bl	800d088 <ld_word>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	041b      	lsls	r3, r3, #16
 800e0ac:	68fa      	ldr	r2, [r7, #12]
 800e0ae:	4313      	orrs	r3, r2
 800e0b0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3710      	adds	r7, #16
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}

0800e0bc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b084      	sub	sp, #16
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	331a      	adds	r3, #26
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	b292      	uxth	r2, r2
 800e0d0:	4611      	mov	r1, r2
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7ff f814 	bl	800d100 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	2b03      	cmp	r3, #3
 800e0de:	d109      	bne.n	800e0f4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	f103 0214 	add.w	r2, r3, #20
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	0c1b      	lsrs	r3, r3, #16
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	4610      	mov	r0, r2
 800e0f0:	f7ff f806 	bl	800d100 <st_word>
	}
}
 800e0f4:	bf00      	nop
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e0fc:	b590      	push	{r4, r7, lr}
 800e0fe:	b087      	sub	sp, #28
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	331a      	adds	r3, #26
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fe ffbc 	bl	800d088 <ld_word>
 800e110:	4603      	mov	r3, r0
 800e112:	2b00      	cmp	r3, #0
 800e114:	d001      	beq.n	800e11a <cmp_lfn+0x1e>
 800e116:	2300      	movs	r3, #0
 800e118:	e059      	b.n	800e1ce <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e122:	1e5a      	subs	r2, r3, #1
 800e124:	4613      	mov	r3, r2
 800e126:	005b      	lsls	r3, r3, #1
 800e128:	4413      	add	r3, r2
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	4413      	add	r3, r2
 800e12e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e130:	2301      	movs	r3, #1
 800e132:	81fb      	strh	r3, [r7, #14]
 800e134:	2300      	movs	r3, #0
 800e136:	613b      	str	r3, [r7, #16]
 800e138:	e033      	b.n	800e1a2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e13a:	4a27      	ldr	r2, [pc, #156]	@ (800e1d8 <cmp_lfn+0xdc>)
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	4413      	add	r3, r2
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	461a      	mov	r2, r3
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	4413      	add	r3, r2
 800e148:	4618      	mov	r0, r3
 800e14a:	f7fe ff9d 	bl	800d088 <ld_word>
 800e14e:	4603      	mov	r3, r0
 800e150:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e152:	89fb      	ldrh	r3, [r7, #14]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d01a      	beq.n	800e18e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	2bfe      	cmp	r3, #254	@ 0xfe
 800e15c:	d812      	bhi.n	800e184 <cmp_lfn+0x88>
 800e15e:	89bb      	ldrh	r3, [r7, #12]
 800e160:	4618      	mov	r0, r3
 800e162:	f001 fd47 	bl	800fbf4 <ff_wtoupper>
 800e166:	4603      	mov	r3, r0
 800e168:	461c      	mov	r4, r3
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	1c5a      	adds	r2, r3, #1
 800e16e:	617a      	str	r2, [r7, #20]
 800e170:	005b      	lsls	r3, r3, #1
 800e172:	687a      	ldr	r2, [r7, #4]
 800e174:	4413      	add	r3, r2
 800e176:	881b      	ldrh	r3, [r3, #0]
 800e178:	4618      	mov	r0, r3
 800e17a:	f001 fd3b 	bl	800fbf4 <ff_wtoupper>
 800e17e:	4603      	mov	r3, r0
 800e180:	429c      	cmp	r4, r3
 800e182:	d001      	beq.n	800e188 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e184:	2300      	movs	r3, #0
 800e186:	e022      	b.n	800e1ce <cmp_lfn+0xd2>
			}
			wc = uc;
 800e188:	89bb      	ldrh	r3, [r7, #12]
 800e18a:	81fb      	strh	r3, [r7, #14]
 800e18c:	e006      	b.n	800e19c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e18e:	89bb      	ldrh	r3, [r7, #12]
 800e190:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e194:	4293      	cmp	r3, r2
 800e196:	d001      	beq.n	800e19c <cmp_lfn+0xa0>
 800e198:	2300      	movs	r3, #0
 800e19a:	e018      	b.n	800e1ce <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	3301      	adds	r3, #1
 800e1a0:	613b      	str	r3, [r7, #16]
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	2b0c      	cmp	r3, #12
 800e1a6:	d9c8      	bls.n	800e13a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d00b      	beq.n	800e1cc <cmp_lfn+0xd0>
 800e1b4:	89fb      	ldrh	r3, [r7, #14]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d008      	beq.n	800e1cc <cmp_lfn+0xd0>
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	005b      	lsls	r3, r3, #1
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	881b      	ldrh	r3, [r3, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d001      	beq.n	800e1cc <cmp_lfn+0xd0>
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	e000      	b.n	800e1ce <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e1cc:	2301      	movs	r3, #1
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	371c      	adds	r7, #28
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd90      	pop	{r4, r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	080112a8 	.word	0x080112a8

0800e1dc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b088      	sub	sp, #32
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	60b9      	str	r1, [r7, #8]
 800e1e6:	4611      	mov	r1, r2
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	71fb      	strb	r3, [r7, #7]
 800e1ee:	4613      	mov	r3, r2
 800e1f0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	330d      	adds	r3, #13
 800e1f6:	79ba      	ldrb	r2, [r7, #6]
 800e1f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	330b      	adds	r3, #11
 800e1fe:	220f      	movs	r2, #15
 800e200:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	330c      	adds	r3, #12
 800e206:	2200      	movs	r2, #0
 800e208:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	331a      	adds	r3, #26
 800e20e:	2100      	movs	r1, #0
 800e210:	4618      	mov	r0, r3
 800e212:	f7fe ff75 	bl	800d100 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e216:	79fb      	ldrb	r3, [r7, #7]
 800e218:	1e5a      	subs	r2, r3, #1
 800e21a:	4613      	mov	r3, r2
 800e21c:	005b      	lsls	r3, r3, #1
 800e21e:	4413      	add	r3, r2
 800e220:	009b      	lsls	r3, r3, #2
 800e222:	4413      	add	r3, r2
 800e224:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e226:	2300      	movs	r3, #0
 800e228:	82fb      	strh	r3, [r7, #22]
 800e22a:	2300      	movs	r3, #0
 800e22c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e22e:	8afb      	ldrh	r3, [r7, #22]
 800e230:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e234:	4293      	cmp	r3, r2
 800e236:	d007      	beq.n	800e248 <put_lfn+0x6c>
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	1c5a      	adds	r2, r3, #1
 800e23c:	61fa      	str	r2, [r7, #28]
 800e23e:	005b      	lsls	r3, r3, #1
 800e240:	68fa      	ldr	r2, [r7, #12]
 800e242:	4413      	add	r3, r2
 800e244:	881b      	ldrh	r3, [r3, #0]
 800e246:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e248:	4a17      	ldr	r2, [pc, #92]	@ (800e2a8 <put_lfn+0xcc>)
 800e24a:	69bb      	ldr	r3, [r7, #24]
 800e24c:	4413      	add	r3, r2
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	461a      	mov	r2, r3
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	4413      	add	r3, r2
 800e256:	8afa      	ldrh	r2, [r7, #22]
 800e258:	4611      	mov	r1, r2
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fe ff50 	bl	800d100 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e260:	8afb      	ldrh	r3, [r7, #22]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d102      	bne.n	800e26c <put_lfn+0x90>
 800e266:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e26a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e26c:	69bb      	ldr	r3, [r7, #24]
 800e26e:	3301      	adds	r3, #1
 800e270:	61bb      	str	r3, [r7, #24]
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	2b0c      	cmp	r3, #12
 800e276:	d9da      	bls.n	800e22e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e278:	8afb      	ldrh	r3, [r7, #22]
 800e27a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e27e:	4293      	cmp	r3, r2
 800e280:	d006      	beq.n	800e290 <put_lfn+0xb4>
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	005b      	lsls	r3, r3, #1
 800e286:	68fa      	ldr	r2, [r7, #12]
 800e288:	4413      	add	r3, r2
 800e28a:	881b      	ldrh	r3, [r3, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d103      	bne.n	800e298 <put_lfn+0xbc>
 800e290:	79fb      	ldrb	r3, [r7, #7]
 800e292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e296:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	79fa      	ldrb	r2, [r7, #7]
 800e29c:	701a      	strb	r2, [r3, #0]
}
 800e29e:	bf00      	nop
 800e2a0:	3720      	adds	r7, #32
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	080112a8 	.word	0x080112a8

0800e2ac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b08c      	sub	sp, #48	@ 0x30
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	60f8      	str	r0, [r7, #12]
 800e2b4:	60b9      	str	r1, [r7, #8]
 800e2b6:	607a      	str	r2, [r7, #4]
 800e2b8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e2ba:	220b      	movs	r2, #11
 800e2bc:	68b9      	ldr	r1, [r7, #8]
 800e2be:	68f8      	ldr	r0, [r7, #12]
 800e2c0:	f7fe ff65 	bl	800d18e <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	2b05      	cmp	r3, #5
 800e2c8:	d92b      	bls.n	800e322 <gen_numname+0x76>
		sr = seq;
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e2ce:	e022      	b.n	800e316 <gen_numname+0x6a>
			wc = *lfn++;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	1c9a      	adds	r2, r3, #2
 800e2d4:	607a      	str	r2, [r7, #4]
 800e2d6:	881b      	ldrh	r3, [r3, #0]
 800e2d8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800e2da:	2300      	movs	r3, #0
 800e2dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e2de:	e017      	b.n	800e310 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	005a      	lsls	r2, r3, #1
 800e2e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e2e6:	f003 0301 	and.w	r3, r3, #1
 800e2ea:	4413      	add	r3, r2
 800e2ec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e2ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e2f0:	085b      	lsrs	r3, r3, #1
 800e2f2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d005      	beq.n	800e30a <gen_numname+0x5e>
 800e2fe:	69fb      	ldr	r3, [r7, #28]
 800e300:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800e304:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800e308:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e30c:	3301      	adds	r3, #1
 800e30e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e312:	2b0f      	cmp	r3, #15
 800e314:	d9e4      	bls.n	800e2e0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	881b      	ldrh	r3, [r3, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d1d8      	bne.n	800e2d0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e31e:	69fb      	ldr	r3, [r7, #28]
 800e320:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e322:	2307      	movs	r3, #7
 800e324:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	b2db      	uxtb	r3, r3
 800e32a:	f003 030f 	and.w	r3, r3, #15
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	3330      	adds	r3, #48	@ 0x30
 800e332:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800e336:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e33a:	2b39      	cmp	r3, #57	@ 0x39
 800e33c:	d904      	bls.n	800e348 <gen_numname+0x9c>
 800e33e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e342:	3307      	adds	r3, #7
 800e344:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800e348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e34a:	1e5a      	subs	r2, r3, #1
 800e34c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e34e:	3330      	adds	r3, #48	@ 0x30
 800e350:	443b      	add	r3, r7
 800e352:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e356:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	091b      	lsrs	r3, r3, #4
 800e35e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d1df      	bne.n	800e326 <gen_numname+0x7a>
	ns[i] = '~';
 800e366:	f107 0214 	add.w	r2, r7, #20
 800e36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e36c:	4413      	add	r3, r2
 800e36e:	227e      	movs	r2, #126	@ 0x7e
 800e370:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e372:	2300      	movs	r3, #0
 800e374:	627b      	str	r3, [r7, #36]	@ 0x24
 800e376:	e002      	b.n	800e37e <gen_numname+0xd2>
 800e378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e37a:	3301      	adds	r3, #1
 800e37c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e37e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e382:	429a      	cmp	r2, r3
 800e384:	d205      	bcs.n	800e392 <gen_numname+0xe6>
 800e386:	68fa      	ldr	r2, [r7, #12]
 800e388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e38a:	4413      	add	r3, r2
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	2b20      	cmp	r3, #32
 800e390:	d1f2      	bne.n	800e378 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e394:	2b07      	cmp	r3, #7
 800e396:	d807      	bhi.n	800e3a8 <gen_numname+0xfc>
 800e398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e39a:	1c5a      	adds	r2, r3, #1
 800e39c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e39e:	3330      	adds	r3, #48	@ 0x30
 800e3a0:	443b      	add	r3, r7
 800e3a2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e3a6:	e000      	b.n	800e3aa <gen_numname+0xfe>
 800e3a8:	2120      	movs	r1, #32
 800e3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ac:	1c5a      	adds	r2, r3, #1
 800e3ae:	627a      	str	r2, [r7, #36]	@ 0x24
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	4413      	add	r3, r2
 800e3b4:	460a      	mov	r2, r1
 800e3b6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ba:	2b07      	cmp	r3, #7
 800e3bc:	d9e9      	bls.n	800e392 <gen_numname+0xe6>
}
 800e3be:	bf00      	nop
 800e3c0:	bf00      	nop
 800e3c2:	3730      	adds	r7, #48	@ 0x30
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b085      	sub	sp, #20
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e3d4:	230b      	movs	r3, #11
 800e3d6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e3d8:	7bfb      	ldrb	r3, [r7, #15]
 800e3da:	b2da      	uxtb	r2, r3
 800e3dc:	0852      	lsrs	r2, r2, #1
 800e3de:	01db      	lsls	r3, r3, #7
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	b2da      	uxtb	r2, r3
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	1c59      	adds	r1, r3, #1
 800e3e8:	6079      	str	r1, [r7, #4]
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	3b01      	subs	r3, #1
 800e3f4:	60bb      	str	r3, [r7, #8]
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d1ed      	bne.n	800e3d8 <sum_sfn+0x10>
	return sum;
 800e3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3714      	adds	r7, #20
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr

0800e40a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b086      	sub	sp, #24
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e418:	2100      	movs	r1, #0
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f7ff fc89 	bl	800dd32 <dir_sdi>
 800e420:	4603      	mov	r3, r0
 800e422:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e424:	7dfb      	ldrb	r3, [r7, #23]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d001      	beq.n	800e42e <dir_find+0x24>
 800e42a:	7dfb      	ldrb	r3, [r7, #23]
 800e42c:	e0a9      	b.n	800e582 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e42e:	23ff      	movs	r3, #255	@ 0xff
 800e430:	753b      	strb	r3, [r7, #20]
 800e432:	7d3b      	ldrb	r3, [r7, #20]
 800e434:	757b      	strb	r3, [r7, #21]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f04f 32ff 	mov.w	r2, #4294967295
 800e43c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	69db      	ldr	r3, [r3, #28]
 800e442:	4619      	mov	r1, r3
 800e444:	6938      	ldr	r0, [r7, #16]
 800e446:	f7ff f895 	bl	800d574 <move_window>
 800e44a:	4603      	mov	r3, r0
 800e44c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e44e:	7dfb      	ldrb	r3, [r7, #23]
 800e450:	2b00      	cmp	r3, #0
 800e452:	f040 8090 	bne.w	800e576 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6a1b      	ldr	r3, [r3, #32]
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e45e:	7dbb      	ldrb	r3, [r7, #22]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d102      	bne.n	800e46a <dir_find+0x60>
 800e464:	2304      	movs	r3, #4
 800e466:	75fb      	strb	r3, [r7, #23]
 800e468:	e08a      	b.n	800e580 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6a1b      	ldr	r3, [r3, #32]
 800e46e:	330b      	adds	r3, #11
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e476:	73fb      	strb	r3, [r7, #15]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	7bfa      	ldrb	r2, [r7, #15]
 800e47c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e47e:	7dbb      	ldrb	r3, [r7, #22]
 800e480:	2be5      	cmp	r3, #229	@ 0xe5
 800e482:	d007      	beq.n	800e494 <dir_find+0x8a>
 800e484:	7bfb      	ldrb	r3, [r7, #15]
 800e486:	f003 0308 	and.w	r3, r3, #8
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d009      	beq.n	800e4a2 <dir_find+0x98>
 800e48e:	7bfb      	ldrb	r3, [r7, #15]
 800e490:	2b0f      	cmp	r3, #15
 800e492:	d006      	beq.n	800e4a2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e494:	23ff      	movs	r3, #255	@ 0xff
 800e496:	757b      	strb	r3, [r7, #21]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f04f 32ff 	mov.w	r2, #4294967295
 800e49e:	631a      	str	r2, [r3, #48]	@ 0x30
 800e4a0:	e05e      	b.n	800e560 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e4a2:	7bfb      	ldrb	r3, [r7, #15]
 800e4a4:	2b0f      	cmp	r3, #15
 800e4a6:	d136      	bne.n	800e516 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e4ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d154      	bne.n	800e560 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e4b6:	7dbb      	ldrb	r3, [r7, #22]
 800e4b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d00d      	beq.n	800e4dc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6a1b      	ldr	r3, [r3, #32]
 800e4c4:	7b5b      	ldrb	r3, [r3, #13]
 800e4c6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e4c8:	7dbb      	ldrb	r3, [r7, #22]
 800e4ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e4ce:	75bb      	strb	r3, [r7, #22]
 800e4d0:	7dbb      	ldrb	r3, [r7, #22]
 800e4d2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	695a      	ldr	r2, [r3, #20]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e4dc:	7dba      	ldrb	r2, [r7, #22]
 800e4de:	7d7b      	ldrb	r3, [r7, #21]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d115      	bne.n	800e510 <dir_find+0x106>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6a1b      	ldr	r3, [r3, #32]
 800e4e8:	330d      	adds	r3, #13
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	7d3a      	ldrb	r2, [r7, #20]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d10e      	bne.n	800e510 <dir_find+0x106>
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	691a      	ldr	r2, [r3, #16]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6a1b      	ldr	r3, [r3, #32]
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	4610      	mov	r0, r2
 800e4fe:	f7ff fdfd 	bl	800e0fc <cmp_lfn>
 800e502:	4603      	mov	r3, r0
 800e504:	2b00      	cmp	r3, #0
 800e506:	d003      	beq.n	800e510 <dir_find+0x106>
 800e508:	7d7b      	ldrb	r3, [r7, #21]
 800e50a:	3b01      	subs	r3, #1
 800e50c:	b2db      	uxtb	r3, r3
 800e50e:	e000      	b.n	800e512 <dir_find+0x108>
 800e510:	23ff      	movs	r3, #255	@ 0xff
 800e512:	757b      	strb	r3, [r7, #21]
 800e514:	e024      	b.n	800e560 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e516:	7d7b      	ldrb	r3, [r7, #21]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d109      	bne.n	800e530 <dir_find+0x126>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6a1b      	ldr	r3, [r3, #32]
 800e520:	4618      	mov	r0, r3
 800e522:	f7ff ff51 	bl	800e3c8 <sum_sfn>
 800e526:	4603      	mov	r3, r0
 800e528:	461a      	mov	r2, r3
 800e52a:	7d3b      	ldrb	r3, [r7, #20]
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d024      	beq.n	800e57a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e536:	f003 0301 	and.w	r3, r3, #1
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d10a      	bne.n	800e554 <dir_find+0x14a>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6a18      	ldr	r0, [r3, #32]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	3324      	adds	r3, #36	@ 0x24
 800e546:	220b      	movs	r2, #11
 800e548:	4619      	mov	r1, r3
 800e54a:	f7fe fe5c 	bl	800d206 <mem_cmp>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b00      	cmp	r3, #0
 800e552:	d014      	beq.n	800e57e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e554:	23ff      	movs	r3, #255	@ 0xff
 800e556:	757b      	strb	r3, [r7, #21]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f04f 32ff 	mov.w	r2, #4294967295
 800e55e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e560:	2100      	movs	r1, #0
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f7ff fc6e 	bl	800de44 <dir_next>
 800e568:	4603      	mov	r3, r0
 800e56a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e56c:	7dfb      	ldrb	r3, [r7, #23]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	f43f af65 	beq.w	800e43e <dir_find+0x34>
 800e574:	e004      	b.n	800e580 <dir_find+0x176>
		if (res != FR_OK) break;
 800e576:	bf00      	nop
 800e578:	e002      	b.n	800e580 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e57a:	bf00      	nop
 800e57c:	e000      	b.n	800e580 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e57e:	bf00      	nop

	return res;
 800e580:	7dfb      	ldrb	r3, [r7, #23]
}
 800e582:	4618      	mov	r0, r3
 800e584:	3718      	adds	r7, #24
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
	...

0800e58c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b08c      	sub	sp, #48	@ 0x30
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e5a0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d001      	beq.n	800e5ac <dir_register+0x20>
 800e5a8:	2306      	movs	r3, #6
 800e5aa:	e0e0      	b.n	800e76e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5b0:	e002      	b.n	800e5b8 <dir_register+0x2c>
 800e5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5b4:	3301      	adds	r3, #1
 800e5b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	691a      	ldr	r2, [r3, #16]
 800e5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5be:	005b      	lsls	r3, r3, #1
 800e5c0:	4413      	add	r3, r2
 800e5c2:	881b      	ldrh	r3, [r3, #0]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d1f4      	bne.n	800e5b2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800e5ce:	f107 030c 	add.w	r3, r7, #12
 800e5d2:	220c      	movs	r2, #12
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f7fe fdda 	bl	800d18e <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e5da:	7dfb      	ldrb	r3, [r7, #23]
 800e5dc:	f003 0301 	and.w	r3, r3, #1
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d032      	beq.n	800e64a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2240      	movs	r2, #64	@ 0x40
 800e5e8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e5f0:	e016      	b.n	800e620 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	691a      	ldr	r2, [r3, #16]
 800e5fc:	f107 010c 	add.w	r1, r7, #12
 800e600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e602:	f7ff fe53 	bl	800e2ac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f7ff feff 	bl	800e40a <dir_find>
 800e60c:	4603      	mov	r3, r0
 800e60e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800e612:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e616:	2b00      	cmp	r3, #0
 800e618:	d106      	bne.n	800e628 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e61c:	3301      	adds	r3, #1
 800e61e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e622:	2b63      	cmp	r3, #99	@ 0x63
 800e624:	d9e5      	bls.n	800e5f2 <dir_register+0x66>
 800e626:	e000      	b.n	800e62a <dir_register+0x9e>
			if (res != FR_OK) break;
 800e628:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e62a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e62c:	2b64      	cmp	r3, #100	@ 0x64
 800e62e:	d101      	bne.n	800e634 <dir_register+0xa8>
 800e630:	2307      	movs	r3, #7
 800e632:	e09c      	b.n	800e76e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e634:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e638:	2b04      	cmp	r3, #4
 800e63a:	d002      	beq.n	800e642 <dir_register+0xb6>
 800e63c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e640:	e095      	b.n	800e76e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e642:	7dfa      	ldrb	r2, [r7, #23]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e64a:	7dfb      	ldrb	r3, [r7, #23]
 800e64c:	f003 0302 	and.w	r3, r3, #2
 800e650:	2b00      	cmp	r3, #0
 800e652:	d007      	beq.n	800e664 <dir_register+0xd8>
 800e654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e656:	330c      	adds	r3, #12
 800e658:	4a47      	ldr	r2, [pc, #284]	@ (800e778 <dir_register+0x1ec>)
 800e65a:	fba2 2303 	umull	r2, r3, r2, r3
 800e65e:	089b      	lsrs	r3, r3, #2
 800e660:	3301      	adds	r3, #1
 800e662:	e000      	b.n	800e666 <dir_register+0xda>
 800e664:	2301      	movs	r3, #1
 800e666:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e668:	6a39      	ldr	r1, [r7, #32]
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f7ff fcc0 	bl	800dff0 <dir_alloc>
 800e670:	4603      	mov	r3, r0
 800e672:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e676:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d148      	bne.n	800e710 <dir_register+0x184>
 800e67e:	6a3b      	ldr	r3, [r7, #32]
 800e680:	3b01      	subs	r3, #1
 800e682:	623b      	str	r3, [r7, #32]
 800e684:	6a3b      	ldr	r3, [r7, #32]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d042      	beq.n	800e710 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	695a      	ldr	r2, [r3, #20]
 800e68e:	6a3b      	ldr	r3, [r7, #32]
 800e690:	015b      	lsls	r3, r3, #5
 800e692:	1ad3      	subs	r3, r2, r3
 800e694:	4619      	mov	r1, r3
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f7ff fb4b 	bl	800dd32 <dir_sdi>
 800e69c:	4603      	mov	r3, r0
 800e69e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e6a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d132      	bne.n	800e710 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	3324      	adds	r3, #36	@ 0x24
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7ff fe8a 	bl	800e3c8 <sum_sfn>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	69db      	ldr	r3, [r3, #28]
 800e6bc:	4619      	mov	r1, r3
 800e6be:	69f8      	ldr	r0, [r7, #28]
 800e6c0:	f7fe ff58 	bl	800d574 <move_window>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800e6ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d11d      	bne.n	800e70e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	6918      	ldr	r0, [r3, #16]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6a19      	ldr	r1, [r3, #32]
 800e6da:	6a3b      	ldr	r3, [r7, #32]
 800e6dc:	b2da      	uxtb	r2, r3
 800e6de:	7efb      	ldrb	r3, [r7, #27]
 800e6e0:	f7ff fd7c 	bl	800e1dc <put_lfn>
				fs->wflag = 1;
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e6ea:	2100      	movs	r1, #0
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f7ff fba9 	bl	800de44 <dir_next>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800e6f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d107      	bne.n	800e710 <dir_register+0x184>
 800e700:	6a3b      	ldr	r3, [r7, #32]
 800e702:	3b01      	subs	r3, #1
 800e704:	623b      	str	r3, [r7, #32]
 800e706:	6a3b      	ldr	r3, [r7, #32]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d1d5      	bne.n	800e6b8 <dir_register+0x12c>
 800e70c:	e000      	b.n	800e710 <dir_register+0x184>
				if (res != FR_OK) break;
 800e70e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e710:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e714:	2b00      	cmp	r3, #0
 800e716:	d128      	bne.n	800e76a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	69db      	ldr	r3, [r3, #28]
 800e71c:	4619      	mov	r1, r3
 800e71e:	69f8      	ldr	r0, [r7, #28]
 800e720:	f7fe ff28 	bl	800d574 <move_window>
 800e724:	4603      	mov	r3, r0
 800e726:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e72a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d11b      	bne.n	800e76a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6a1b      	ldr	r3, [r3, #32]
 800e736:	2220      	movs	r2, #32
 800e738:	2100      	movs	r1, #0
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7fe fd48 	bl	800d1d0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6a18      	ldr	r0, [r3, #32]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	3324      	adds	r3, #36	@ 0x24
 800e748:	220b      	movs	r2, #11
 800e74a:	4619      	mov	r1, r3
 800e74c:	f7fe fd1f 	bl	800d18e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6a1b      	ldr	r3, [r3, #32]
 800e75a:	330c      	adds	r3, #12
 800e75c:	f002 0218 	and.w	r2, r2, #24
 800e760:	b2d2      	uxtb	r2, r2
 800e762:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	2201      	movs	r2, #1
 800e768:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e76a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3730      	adds	r7, #48	@ 0x30
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	4ec4ec4f 	.word	0x4ec4ec4f

0800e77c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b08a      	sub	sp, #40	@ 0x28
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
 800e784:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	613b      	str	r3, [r7, #16]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	691b      	ldr	r3, [r3, #16]
 800e792:	60fb      	str	r3, [r7, #12]
 800e794:	2300      	movs	r3, #0
 800e796:	617b      	str	r3, [r7, #20]
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e79c:	69bb      	ldr	r3, [r7, #24]
 800e79e:	1c5a      	adds	r2, r3, #1
 800e7a0:	61ba      	str	r2, [r7, #24]
 800e7a2:	693a      	ldr	r2, [r7, #16]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e7aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7ac:	2b1f      	cmp	r3, #31
 800e7ae:	d940      	bls.n	800e832 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e7b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7b2:	2b2f      	cmp	r3, #47	@ 0x2f
 800e7b4:	d006      	beq.n	800e7c4 <create_name+0x48>
 800e7b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7b8:	2b5c      	cmp	r3, #92	@ 0x5c
 800e7ba:	d110      	bne.n	800e7de <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e7bc:	e002      	b.n	800e7c4 <create_name+0x48>
 800e7be:	69bb      	ldr	r3, [r7, #24]
 800e7c0:	3301      	adds	r3, #1
 800e7c2:	61bb      	str	r3, [r7, #24]
 800e7c4:	693a      	ldr	r2, [r7, #16]
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	4413      	add	r3, r2
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	2b2f      	cmp	r3, #47	@ 0x2f
 800e7ce:	d0f6      	beq.n	800e7be <create_name+0x42>
 800e7d0:	693a      	ldr	r2, [r7, #16]
 800e7d2:	69bb      	ldr	r3, [r7, #24]
 800e7d4:	4413      	add	r3, r2
 800e7d6:	781b      	ldrb	r3, [r3, #0]
 800e7d8:	2b5c      	cmp	r3, #92	@ 0x5c
 800e7da:	d0f0      	beq.n	800e7be <create_name+0x42>
			break;
 800e7dc:	e02a      	b.n	800e834 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	2bfe      	cmp	r3, #254	@ 0xfe
 800e7e2:	d901      	bls.n	800e7e8 <create_name+0x6c>
 800e7e4:	2306      	movs	r3, #6
 800e7e6:	e17d      	b.n	800eae4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e7e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7ea:	b2db      	uxtb	r3, r3
 800e7ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e7ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7f0:	2101      	movs	r1, #1
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f001 f9c2 	bl	800fb7c <ff_convert>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e7fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d101      	bne.n	800e806 <create_name+0x8a>
 800e802:	2306      	movs	r3, #6
 800e804:	e16e      	b.n	800eae4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e806:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e808:	2b7f      	cmp	r3, #127	@ 0x7f
 800e80a:	d809      	bhi.n	800e820 <create_name+0xa4>
 800e80c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e80e:	4619      	mov	r1, r3
 800e810:	488d      	ldr	r0, [pc, #564]	@ (800ea48 <create_name+0x2cc>)
 800e812:	f7fe fd1f 	bl	800d254 <chk_chr>
 800e816:	4603      	mov	r3, r0
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d001      	beq.n	800e820 <create_name+0xa4>
 800e81c:	2306      	movs	r3, #6
 800e81e:	e161      	b.n	800eae4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	1c5a      	adds	r2, r3, #1
 800e824:	617a      	str	r2, [r7, #20]
 800e826:	005b      	lsls	r3, r3, #1
 800e828:	68fa      	ldr	r2, [r7, #12]
 800e82a:	4413      	add	r3, r2
 800e82c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e82e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e830:	e7b4      	b.n	800e79c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e832:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e834:	693a      	ldr	r2, [r7, #16]
 800e836:	69bb      	ldr	r3, [r7, #24]
 800e838:	441a      	add	r2, r3
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e83e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e840:	2b1f      	cmp	r3, #31
 800e842:	d801      	bhi.n	800e848 <create_name+0xcc>
 800e844:	2304      	movs	r3, #4
 800e846:	e000      	b.n	800e84a <create_name+0xce>
 800e848:	2300      	movs	r3, #0
 800e84a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e84e:	e011      	b.n	800e874 <create_name+0xf8>
		w = lfn[di - 1];
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e856:	3b01      	subs	r3, #1
 800e858:	005b      	lsls	r3, r3, #1
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	4413      	add	r3, r2
 800e85e:	881b      	ldrh	r3, [r3, #0]
 800e860:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800e862:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e864:	2b20      	cmp	r3, #32
 800e866:	d002      	beq.n	800e86e <create_name+0xf2>
 800e868:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e86a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e86c:	d106      	bne.n	800e87c <create_name+0x100>
		di--;
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	3b01      	subs	r3, #1
 800e872:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d1ea      	bne.n	800e850 <create_name+0xd4>
 800e87a:	e000      	b.n	800e87e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e87c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	005b      	lsls	r3, r3, #1
 800e882:	68fa      	ldr	r2, [r7, #12]
 800e884:	4413      	add	r3, r2
 800e886:	2200      	movs	r2, #0
 800e888:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d101      	bne.n	800e894 <create_name+0x118>
 800e890:	2306      	movs	r3, #6
 800e892:	e127      	b.n	800eae4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	3324      	adds	r3, #36	@ 0x24
 800e898:	220b      	movs	r2, #11
 800e89a:	2120      	movs	r1, #32
 800e89c:	4618      	mov	r0, r3
 800e89e:	f7fe fc97 	bl	800d1d0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	61bb      	str	r3, [r7, #24]
 800e8a6:	e002      	b.n	800e8ae <create_name+0x132>
 800e8a8:	69bb      	ldr	r3, [r7, #24]
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	61bb      	str	r3, [r7, #24]
 800e8ae:	69bb      	ldr	r3, [r7, #24]
 800e8b0:	005b      	lsls	r3, r3, #1
 800e8b2:	68fa      	ldr	r2, [r7, #12]
 800e8b4:	4413      	add	r3, r2
 800e8b6:	881b      	ldrh	r3, [r3, #0]
 800e8b8:	2b20      	cmp	r3, #32
 800e8ba:	d0f5      	beq.n	800e8a8 <create_name+0x12c>
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	005b      	lsls	r3, r3, #1
 800e8c0:	68fa      	ldr	r2, [r7, #12]
 800e8c2:	4413      	add	r3, r2
 800e8c4:	881b      	ldrh	r3, [r3, #0]
 800e8c6:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8c8:	d0ee      	beq.n	800e8a8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e8ca:	69bb      	ldr	r3, [r7, #24]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d009      	beq.n	800e8e4 <create_name+0x168>
 800e8d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e8d4:	f043 0303 	orr.w	r3, r3, #3
 800e8d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e8dc:	e002      	b.n	800e8e4 <create_name+0x168>
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	617b      	str	r3, [r7, #20]
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d009      	beq.n	800e8fe <create_name+0x182>
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e8f0:	3b01      	subs	r3, #1
 800e8f2:	005b      	lsls	r3, r3, #1
 800e8f4:	68fa      	ldr	r2, [r7, #12]
 800e8f6:	4413      	add	r3, r2
 800e8f8:	881b      	ldrh	r3, [r3, #0]
 800e8fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8fc:	d1ef      	bne.n	800e8de <create_name+0x162>

	i = b = 0; ni = 8;
 800e8fe:	2300      	movs	r3, #0
 800e900:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e904:	2300      	movs	r3, #0
 800e906:	623b      	str	r3, [r7, #32]
 800e908:	2308      	movs	r3, #8
 800e90a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e90c:	69bb      	ldr	r3, [r7, #24]
 800e90e:	1c5a      	adds	r2, r3, #1
 800e910:	61ba      	str	r2, [r7, #24]
 800e912:	005b      	lsls	r3, r3, #1
 800e914:	68fa      	ldr	r2, [r7, #12]
 800e916:	4413      	add	r3, r2
 800e918:	881b      	ldrh	r3, [r3, #0]
 800e91a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e91c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e91e:	2b00      	cmp	r3, #0
 800e920:	f000 8090 	beq.w	800ea44 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e924:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e926:	2b20      	cmp	r3, #32
 800e928:	d006      	beq.n	800e938 <create_name+0x1bc>
 800e92a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e92c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e92e:	d10a      	bne.n	800e946 <create_name+0x1ca>
 800e930:	69ba      	ldr	r2, [r7, #24]
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	429a      	cmp	r2, r3
 800e936:	d006      	beq.n	800e946 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e93c:	f043 0303 	orr.w	r3, r3, #3
 800e940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e944:	e07d      	b.n	800ea42 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e946:	6a3a      	ldr	r2, [r7, #32]
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d203      	bcs.n	800e956 <create_name+0x1da>
 800e94e:	69ba      	ldr	r2, [r7, #24]
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	429a      	cmp	r2, r3
 800e954:	d123      	bne.n	800e99e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e956:	69fb      	ldr	r3, [r7, #28]
 800e958:	2b0b      	cmp	r3, #11
 800e95a:	d106      	bne.n	800e96a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e95c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e960:	f043 0303 	orr.w	r3, r3, #3
 800e964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e968:	e075      	b.n	800ea56 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e96a:	69ba      	ldr	r2, [r7, #24]
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d005      	beq.n	800e97e <create_name+0x202>
 800e972:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e976:	f043 0303 	orr.w	r3, r3, #3
 800e97a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800e97e:	69ba      	ldr	r2, [r7, #24]
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	429a      	cmp	r2, r3
 800e984:	d866      	bhi.n	800ea54 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	61bb      	str	r3, [r7, #24]
 800e98a:	2308      	movs	r3, #8
 800e98c:	623b      	str	r3, [r7, #32]
 800e98e:	230b      	movs	r3, #11
 800e990:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e992:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e996:	009b      	lsls	r3, r3, #2
 800e998:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e99c:	e051      	b.n	800ea42 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e99e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9a0:	2b7f      	cmp	r3, #127	@ 0x7f
 800e9a2:	d914      	bls.n	800e9ce <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e9a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9a6:	2100      	movs	r1, #0
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f001 f8e7 	bl	800fb7c <ff_convert>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e9b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d004      	beq.n	800e9c2 <create_name+0x246>
 800e9b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9ba:	3b80      	subs	r3, #128	@ 0x80
 800e9bc:	4a23      	ldr	r2, [pc, #140]	@ (800ea4c <create_name+0x2d0>)
 800e9be:	5cd3      	ldrb	r3, [r2, r3]
 800e9c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e9c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e9c6:	f043 0302 	orr.w	r3, r3, #2
 800e9ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e9ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d007      	beq.n	800e9e4 <create_name+0x268>
 800e9d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	481d      	ldr	r0, [pc, #116]	@ (800ea50 <create_name+0x2d4>)
 800e9da:	f7fe fc3b 	bl	800d254 <chk_chr>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d008      	beq.n	800e9f6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e9e4:	235f      	movs	r3, #95	@ 0x5f
 800e9e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e9e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e9ec:	f043 0303 	orr.w	r3, r3, #3
 800e9f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e9f4:	e01b      	b.n	800ea2e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e9f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9f8:	2b40      	cmp	r3, #64	@ 0x40
 800e9fa:	d909      	bls.n	800ea10 <create_name+0x294>
 800e9fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9fe:	2b5a      	cmp	r3, #90	@ 0x5a
 800ea00:	d806      	bhi.n	800ea10 <create_name+0x294>
					b |= 2;
 800ea02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ea06:	f043 0302 	orr.w	r3, r3, #2
 800ea0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ea0e:	e00e      	b.n	800ea2e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ea10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea12:	2b60      	cmp	r3, #96	@ 0x60
 800ea14:	d90b      	bls.n	800ea2e <create_name+0x2b2>
 800ea16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea18:	2b7a      	cmp	r3, #122	@ 0x7a
 800ea1a:	d808      	bhi.n	800ea2e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ea1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ea20:	f043 0301 	orr.w	r3, r3, #1
 800ea24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ea28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea2a:	3b20      	subs	r3, #32
 800ea2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ea2e:	6a3b      	ldr	r3, [r7, #32]
 800ea30:	1c5a      	adds	r2, r3, #1
 800ea32:	623a      	str	r2, [r7, #32]
 800ea34:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ea36:	b2d1      	uxtb	r1, r2
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	4413      	add	r3, r2
 800ea3c:	460a      	mov	r2, r1
 800ea3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ea42:	e763      	b.n	800e90c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ea44:	bf00      	nop
 800ea46:	e006      	b.n	800ea56 <create_name+0x2da>
 800ea48:	08011198 	.word	0x08011198
 800ea4c:	08011228 	.word	0x08011228
 800ea50:	080111a4 	.word	0x080111a4
			if (si > di) break;			/* No extension */
 800ea54:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ea5c:	2be5      	cmp	r3, #229	@ 0xe5
 800ea5e:	d103      	bne.n	800ea68 <create_name+0x2ec>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2205      	movs	r2, #5
 800ea64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	2b08      	cmp	r3, #8
 800ea6c:	d104      	bne.n	800ea78 <create_name+0x2fc>
 800ea6e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ea72:	009b      	lsls	r3, r3, #2
 800ea74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ea78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ea7c:	f003 030c 	and.w	r3, r3, #12
 800ea80:	2b0c      	cmp	r3, #12
 800ea82:	d005      	beq.n	800ea90 <create_name+0x314>
 800ea84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ea88:	f003 0303 	and.w	r3, r3, #3
 800ea8c:	2b03      	cmp	r3, #3
 800ea8e:	d105      	bne.n	800ea9c <create_name+0x320>
 800ea90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea94:	f043 0302 	orr.w	r3, r3, #2
 800ea98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ea9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eaa0:	f003 0302 	and.w	r3, r3, #2
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d117      	bne.n	800ead8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800eaa8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eaac:	f003 0303 	and.w	r3, r3, #3
 800eab0:	2b01      	cmp	r3, #1
 800eab2:	d105      	bne.n	800eac0 <create_name+0x344>
 800eab4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eab8:	f043 0310 	orr.w	r3, r3, #16
 800eabc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800eac0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eac4:	f003 030c 	and.w	r3, r3, #12
 800eac8:	2b04      	cmp	r3, #4
 800eaca:	d105      	bne.n	800ead8 <create_name+0x35c>
 800eacc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ead0:	f043 0308 	orr.w	r3, r3, #8
 800ead4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800eade:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800eae2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3728      	adds	r7, #40	@ 0x28
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b086      	sub	sp, #24
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800eb00:	e002      	b.n	800eb08 <follow_path+0x1c>
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	3301      	adds	r3, #1
 800eb06:	603b      	str	r3, [r7, #0]
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	2b2f      	cmp	r3, #47	@ 0x2f
 800eb0e:	d0f8      	beq.n	800eb02 <follow_path+0x16>
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	2b5c      	cmp	r3, #92	@ 0x5c
 800eb16:	d0f4      	beq.n	800eb02 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	2b1f      	cmp	r3, #31
 800eb24:	d80a      	bhi.n	800eb3c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2280      	movs	r2, #128	@ 0x80
 800eb2a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800eb2e:	2100      	movs	r1, #0
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f7ff f8fe 	bl	800dd32 <dir_sdi>
 800eb36:	4603      	mov	r3, r0
 800eb38:	75fb      	strb	r3, [r7, #23]
 800eb3a:	e048      	b.n	800ebce <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eb3c:	463b      	mov	r3, r7
 800eb3e:	4619      	mov	r1, r3
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f7ff fe1b 	bl	800e77c <create_name>
 800eb46:	4603      	mov	r3, r0
 800eb48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eb4a:	7dfb      	ldrb	r3, [r7, #23]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d139      	bne.n	800ebc4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f7ff fc5a 	bl	800e40a <dir_find>
 800eb56:	4603      	mov	r3, r0
 800eb58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800eb60:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800eb62:	7dfb      	ldrb	r3, [r7, #23]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d00a      	beq.n	800eb7e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800eb68:	7dfb      	ldrb	r3, [r7, #23]
 800eb6a:	2b04      	cmp	r3, #4
 800eb6c:	d12c      	bne.n	800ebc8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800eb6e:	7afb      	ldrb	r3, [r7, #11]
 800eb70:	f003 0304 	and.w	r3, r3, #4
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d127      	bne.n	800ebc8 <follow_path+0xdc>
 800eb78:	2305      	movs	r3, #5
 800eb7a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800eb7c:	e024      	b.n	800ebc8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eb7e:	7afb      	ldrb	r3, [r7, #11]
 800eb80:	f003 0304 	and.w	r3, r3, #4
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d121      	bne.n	800ebcc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	799b      	ldrb	r3, [r3, #6]
 800eb8c:	f003 0310 	and.w	r3, r3, #16
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d102      	bne.n	800eb9a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800eb94:	2305      	movs	r3, #5
 800eb96:	75fb      	strb	r3, [r7, #23]
 800eb98:	e019      	b.n	800ebce <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	695b      	ldr	r3, [r3, #20]
 800eba4:	68fa      	ldr	r2, [r7, #12]
 800eba6:	8992      	ldrh	r2, [r2, #12]
 800eba8:	fbb3 f0f2 	udiv	r0, r3, r2
 800ebac:	fb00 f202 	mul.w	r2, r0, r2
 800ebb0:	1a9b      	subs	r3, r3, r2
 800ebb2:	440b      	add	r3, r1
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	68f8      	ldr	r0, [r7, #12]
 800ebb8:	f7ff fa61 	bl	800e07e <ld_clust>
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ebc2:	e7bb      	b.n	800eb3c <follow_path+0x50>
			if (res != FR_OK) break;
 800ebc4:	bf00      	nop
 800ebc6:	e002      	b.n	800ebce <follow_path+0xe2>
				break;
 800ebc8:	bf00      	nop
 800ebca:	e000      	b.n	800ebce <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ebcc:	bf00      	nop
			}
		}
	}

	return res;
 800ebce:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3718      	adds	r7, #24
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b087      	sub	sp, #28
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ebe0:	f04f 33ff 	mov.w	r3, #4294967295
 800ebe4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d031      	beq.n	800ec52 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	617b      	str	r3, [r7, #20]
 800ebf4:	e002      	b.n	800ebfc <get_ldnumber+0x24>
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	617b      	str	r3, [r7, #20]
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	781b      	ldrb	r3, [r3, #0]
 800ec00:	2b1f      	cmp	r3, #31
 800ec02:	d903      	bls.n	800ec0c <get_ldnumber+0x34>
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	2b3a      	cmp	r3, #58	@ 0x3a
 800ec0a:	d1f4      	bne.n	800ebf6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	2b3a      	cmp	r3, #58	@ 0x3a
 800ec12:	d11c      	bne.n	800ec4e <get_ldnumber+0x76>
			tp = *path;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	1c5a      	adds	r2, r3, #1
 800ec1e:	60fa      	str	r2, [r7, #12]
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	3b30      	subs	r3, #48	@ 0x30
 800ec24:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	2b09      	cmp	r3, #9
 800ec2a:	d80e      	bhi.n	800ec4a <get_ldnumber+0x72>
 800ec2c:	68fa      	ldr	r2, [r7, #12]
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d10a      	bne.n	800ec4a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d107      	bne.n	800ec4a <get_ldnumber+0x72>
					vol = (int)i;
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	3301      	adds	r3, #1
 800ec42:	617b      	str	r3, [r7, #20]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	697a      	ldr	r2, [r7, #20]
 800ec48:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	e002      	b.n	800ec54 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ec4e:	2300      	movs	r3, #0
 800ec50:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ec52:	693b      	ldr	r3, [r7, #16]
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	371c      	adds	r7, #28
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr

0800ec60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	70da      	strb	r2, [r3, #3]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f04f 32ff 	mov.w	r2, #4294967295
 800ec76:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ec78:	6839      	ldr	r1, [r7, #0]
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f7fe fc7a 	bl	800d574 <move_window>
 800ec80:	4603      	mov	r3, r0
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d001      	beq.n	800ec8a <check_fs+0x2a>
 800ec86:	2304      	movs	r3, #4
 800ec88:	e038      	b.n	800ecfc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	3338      	adds	r3, #56	@ 0x38
 800ec8e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7fe f9f8 	bl	800d088 <ld_word>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d001      	beq.n	800eca8 <check_fs+0x48>
 800eca4:	2303      	movs	r3, #3
 800eca6:	e029      	b.n	800ecfc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ecae:	2be9      	cmp	r3, #233	@ 0xe9
 800ecb0:	d009      	beq.n	800ecc6 <check_fs+0x66>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ecb8:	2beb      	cmp	r3, #235	@ 0xeb
 800ecba:	d11e      	bne.n	800ecfa <check_fs+0x9a>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800ecc2:	2b90      	cmp	r3, #144	@ 0x90
 800ecc4:	d119      	bne.n	800ecfa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	3338      	adds	r3, #56	@ 0x38
 800ecca:	3336      	adds	r3, #54	@ 0x36
 800eccc:	4618      	mov	r0, r3
 800ecce:	f7fe f9f4 	bl	800d0ba <ld_dword>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ecd8:	4a0a      	ldr	r2, [pc, #40]	@ (800ed04 <check_fs+0xa4>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d101      	bne.n	800ece2 <check_fs+0x82>
 800ecde:	2300      	movs	r3, #0
 800ece0:	e00c      	b.n	800ecfc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	3338      	adds	r3, #56	@ 0x38
 800ece6:	3352      	adds	r3, #82	@ 0x52
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7fe f9e6 	bl	800d0ba <ld_dword>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	4a05      	ldr	r2, [pc, #20]	@ (800ed08 <check_fs+0xa8>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d101      	bne.n	800ecfa <check_fs+0x9a>
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	e000      	b.n	800ecfc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ecfa:	2302      	movs	r3, #2
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3708      	adds	r7, #8
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	00544146 	.word	0x00544146
 800ed08:	33544146 	.word	0x33544146

0800ed0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b096      	sub	sp, #88	@ 0x58
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	60b9      	str	r1, [r7, #8]
 800ed16:	4613      	mov	r3, r2
 800ed18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ed20:	68f8      	ldr	r0, [r7, #12]
 800ed22:	f7ff ff59 	bl	800ebd8 <get_ldnumber>
 800ed26:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ed28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	da01      	bge.n	800ed32 <find_volume+0x26>
 800ed2e:	230b      	movs	r3, #11
 800ed30:	e265      	b.n	800f1fe <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ed32:	4a9f      	ldr	r2, [pc, #636]	@ (800efb0 <find_volume+0x2a4>)
 800ed34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed3a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ed3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d101      	bne.n	800ed46 <find_volume+0x3a>
 800ed42:	230c      	movs	r3, #12
 800ed44:	e25b      	b.n	800f1fe <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ed4a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ed4c:	79fb      	ldrb	r3, [r7, #7]
 800ed4e:	f023 0301 	bic.w	r3, r3, #1
 800ed52:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ed54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed56:	781b      	ldrb	r3, [r3, #0]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d01a      	beq.n	800ed92 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ed5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed5e:	785b      	ldrb	r3, [r3, #1]
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7fe f8f1 	bl	800cf48 <disk_status>
 800ed66:	4603      	mov	r3, r0
 800ed68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ed6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ed70:	f003 0301 	and.w	r3, r3, #1
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d10c      	bne.n	800ed92 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ed78:	79fb      	ldrb	r3, [r7, #7]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d007      	beq.n	800ed8e <find_volume+0x82>
 800ed7e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ed82:	f003 0304 	and.w	r3, r3, #4
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d001      	beq.n	800ed8e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ed8a:	230a      	movs	r3, #10
 800ed8c:	e237      	b.n	800f1fe <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800ed8e:	2300      	movs	r3, #0
 800ed90:	e235      	b.n	800f1fe <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ed92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed94:	2200      	movs	r2, #0
 800ed96:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ed98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed9a:	b2da      	uxtb	r2, r3
 800ed9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800eda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eda2:	785b      	ldrb	r3, [r3, #1]
 800eda4:	4618      	mov	r0, r3
 800eda6:	f7fe f8e9 	bl	800cf7c <disk_initialize>
 800edaa:	4603      	mov	r3, r0
 800edac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800edb0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800edb4:	f003 0301 	and.w	r3, r3, #1
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d001      	beq.n	800edc0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800edbc:	2303      	movs	r3, #3
 800edbe:	e21e      	b.n	800f1fe <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800edc0:	79fb      	ldrb	r3, [r7, #7]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d007      	beq.n	800edd6 <find_volume+0xca>
 800edc6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800edca:	f003 0304 	and.w	r3, r3, #4
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d001      	beq.n	800edd6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800edd2:	230a      	movs	r3, #10
 800edd4:	e213      	b.n	800f1fe <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800edd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edd8:	7858      	ldrb	r0, [r3, #1]
 800edda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eddc:	330c      	adds	r3, #12
 800edde:	461a      	mov	r2, r3
 800ede0:	2102      	movs	r1, #2
 800ede2:	f7fe f933 	bl	800d04c <disk_ioctl>
 800ede6:	4603      	mov	r3, r0
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d001      	beq.n	800edf0 <find_volume+0xe4>
 800edec:	2301      	movs	r3, #1
 800edee:	e206      	b.n	800f1fe <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800edf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edf2:	899b      	ldrh	r3, [r3, #12]
 800edf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800edf8:	d80d      	bhi.n	800ee16 <find_volume+0x10a>
 800edfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edfc:	899b      	ldrh	r3, [r3, #12]
 800edfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee02:	d308      	bcc.n	800ee16 <find_volume+0x10a>
 800ee04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee06:	899b      	ldrh	r3, [r3, #12]
 800ee08:	461a      	mov	r2, r3
 800ee0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee0c:	899b      	ldrh	r3, [r3, #12]
 800ee0e:	3b01      	subs	r3, #1
 800ee10:	4013      	ands	r3, r2
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d001      	beq.n	800ee1a <find_volume+0x10e>
 800ee16:	2301      	movs	r3, #1
 800ee18:	e1f1      	b.n	800f1fe <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ee1e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ee20:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ee22:	f7ff ff1d 	bl	800ec60 <check_fs>
 800ee26:	4603      	mov	r3, r0
 800ee28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ee2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ee30:	2b02      	cmp	r3, #2
 800ee32:	d149      	bne.n	800eec8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ee34:	2300      	movs	r3, #0
 800ee36:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee38:	e01e      	b.n	800ee78 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ee3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee3c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ee40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee42:	011b      	lsls	r3, r3, #4
 800ee44:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ee48:	4413      	add	r3, r2
 800ee4a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ee4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee4e:	3304      	adds	r3, #4
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d006      	beq.n	800ee64 <find_volume+0x158>
 800ee56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee58:	3308      	adds	r3, #8
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7fe f92d 	bl	800d0ba <ld_dword>
 800ee60:	4602      	mov	r2, r0
 800ee62:	e000      	b.n	800ee66 <find_volume+0x15a>
 800ee64:	2200      	movs	r2, #0
 800ee66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee68:	009b      	lsls	r3, r3, #2
 800ee6a:	3358      	adds	r3, #88	@ 0x58
 800ee6c:	443b      	add	r3, r7
 800ee6e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ee72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee74:	3301      	adds	r3, #1
 800ee76:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee7a:	2b03      	cmp	r3, #3
 800ee7c:	d9dd      	bls.n	800ee3a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ee7e:	2300      	movs	r3, #0
 800ee80:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ee82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d002      	beq.n	800ee8e <find_volume+0x182>
 800ee88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee8a:	3b01      	subs	r3, #1
 800ee8c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ee8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee90:	009b      	lsls	r3, r3, #2
 800ee92:	3358      	adds	r3, #88	@ 0x58
 800ee94:	443b      	add	r3, r7
 800ee96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ee9a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ee9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d005      	beq.n	800eeae <find_volume+0x1a2>
 800eea2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eea4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800eea6:	f7ff fedb 	bl	800ec60 <check_fs>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	e000      	b.n	800eeb0 <find_volume+0x1a4>
 800eeae:	2303      	movs	r3, #3
 800eeb0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800eeb4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d905      	bls.n	800eec8 <find_volume+0x1bc>
 800eebc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eebe:	3301      	adds	r3, #1
 800eec0:	643b      	str	r3, [r7, #64]	@ 0x40
 800eec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eec4:	2b03      	cmp	r3, #3
 800eec6:	d9e2      	bls.n	800ee8e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800eec8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800eecc:	2b04      	cmp	r3, #4
 800eece:	d101      	bne.n	800eed4 <find_volume+0x1c8>
 800eed0:	2301      	movs	r3, #1
 800eed2:	e194      	b.n	800f1fe <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800eed4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d901      	bls.n	800eee0 <find_volume+0x1d4>
 800eedc:	230d      	movs	r3, #13
 800eede:	e18e      	b.n	800f1fe <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800eee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eee2:	3338      	adds	r3, #56	@ 0x38
 800eee4:	330b      	adds	r3, #11
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7fe f8ce 	bl	800d088 <ld_word>
 800eeec:	4603      	mov	r3, r0
 800eeee:	461a      	mov	r2, r3
 800eef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eef2:	899b      	ldrh	r3, [r3, #12]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d001      	beq.n	800eefc <find_volume+0x1f0>
 800eef8:	230d      	movs	r3, #13
 800eefa:	e180      	b.n	800f1fe <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800eefc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eefe:	3338      	adds	r3, #56	@ 0x38
 800ef00:	3316      	adds	r3, #22
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7fe f8c0 	bl	800d088 <ld_word>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ef0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d106      	bne.n	800ef20 <find_volume+0x214>
 800ef12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef14:	3338      	adds	r3, #56	@ 0x38
 800ef16:	3324      	adds	r3, #36	@ 0x24
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7fe f8ce 	bl	800d0ba <ld_dword>
 800ef1e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800ef20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ef24:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ef26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef28:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800ef2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ef30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef32:	789b      	ldrb	r3, [r3, #2]
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d005      	beq.n	800ef44 <find_volume+0x238>
 800ef38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef3a:	789b      	ldrb	r3, [r3, #2]
 800ef3c:	2b02      	cmp	r3, #2
 800ef3e:	d001      	beq.n	800ef44 <find_volume+0x238>
 800ef40:	230d      	movs	r3, #13
 800ef42:	e15c      	b.n	800f1fe <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ef44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef46:	789b      	ldrb	r3, [r3, #2]
 800ef48:	461a      	mov	r2, r3
 800ef4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef4c:	fb02 f303 	mul.w	r3, r2, r3
 800ef50:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ef52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ef58:	461a      	mov	r2, r3
 800ef5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ef5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef60:	895b      	ldrh	r3, [r3, #10]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d008      	beq.n	800ef78 <find_volume+0x26c>
 800ef66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef68:	895b      	ldrh	r3, [r3, #10]
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef6e:	895b      	ldrh	r3, [r3, #10]
 800ef70:	3b01      	subs	r3, #1
 800ef72:	4013      	ands	r3, r2
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d001      	beq.n	800ef7c <find_volume+0x270>
 800ef78:	230d      	movs	r3, #13
 800ef7a:	e140      	b.n	800f1fe <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ef7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef7e:	3338      	adds	r3, #56	@ 0x38
 800ef80:	3311      	adds	r3, #17
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fe f880 	bl	800d088 <ld_word>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ef90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef92:	891b      	ldrh	r3, [r3, #8]
 800ef94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef96:	8992      	ldrh	r2, [r2, #12]
 800ef98:	0952      	lsrs	r2, r2, #5
 800ef9a:	b292      	uxth	r2, r2
 800ef9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800efa0:	fb01 f202 	mul.w	r2, r1, r2
 800efa4:	1a9b      	subs	r3, r3, r2
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d003      	beq.n	800efb4 <find_volume+0x2a8>
 800efac:	230d      	movs	r3, #13
 800efae:	e126      	b.n	800f1fe <find_volume+0x4f2>
 800efb0:	2000671c 	.word	0x2000671c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800efb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efb6:	3338      	adds	r3, #56	@ 0x38
 800efb8:	3313      	adds	r3, #19
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fe f864 	bl	800d088 <ld_word>
 800efc0:	4603      	mov	r3, r0
 800efc2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800efc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d106      	bne.n	800efd8 <find_volume+0x2cc>
 800efca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efcc:	3338      	adds	r3, #56	@ 0x38
 800efce:	3320      	adds	r3, #32
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7fe f872 	bl	800d0ba <ld_dword>
 800efd6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800efd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efda:	3338      	adds	r3, #56	@ 0x38
 800efdc:	330e      	adds	r3, #14
 800efde:	4618      	mov	r0, r3
 800efe0:	f7fe f852 	bl	800d088 <ld_word>
 800efe4:	4603      	mov	r3, r0
 800efe6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800efe8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800efea:	2b00      	cmp	r3, #0
 800efec:	d101      	bne.n	800eff2 <find_volume+0x2e6>
 800efee:	230d      	movs	r3, #13
 800eff0:	e105      	b.n	800f1fe <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800eff2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800eff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eff6:	4413      	add	r3, r2
 800eff8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800effa:	8911      	ldrh	r1, [r2, #8]
 800effc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800effe:	8992      	ldrh	r2, [r2, #12]
 800f000:	0952      	lsrs	r2, r2, #5
 800f002:	b292      	uxth	r2, r2
 800f004:	fbb1 f2f2 	udiv	r2, r1, r2
 800f008:	b292      	uxth	r2, r2
 800f00a:	4413      	add	r3, r2
 800f00c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f00e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f012:	429a      	cmp	r2, r3
 800f014:	d201      	bcs.n	800f01a <find_volume+0x30e>
 800f016:	230d      	movs	r3, #13
 800f018:	e0f1      	b.n	800f1fe <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f01a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f01e:	1ad3      	subs	r3, r2, r3
 800f020:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f022:	8952      	ldrh	r2, [r2, #10]
 800f024:	fbb3 f3f2 	udiv	r3, r3, r2
 800f028:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d101      	bne.n	800f034 <find_volume+0x328>
 800f030:	230d      	movs	r3, #13
 800f032:	e0e4      	b.n	800f1fe <find_volume+0x4f2>
		fmt = FS_FAT32;
 800f034:	2303      	movs	r3, #3
 800f036:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f03c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f040:	4293      	cmp	r3, r2
 800f042:	d802      	bhi.n	800f04a <find_volume+0x33e>
 800f044:	2302      	movs	r3, #2
 800f046:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f04c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f050:	4293      	cmp	r3, r2
 800f052:	d802      	bhi.n	800f05a <find_volume+0x34e>
 800f054:	2301      	movs	r3, #1
 800f056:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f05c:	1c9a      	adds	r2, r3, #2
 800f05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f060:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f064:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f066:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f068:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f06a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f06c:	441a      	add	r2, r3
 800f06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f070:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f072:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f076:	441a      	add	r2, r3
 800f078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f07a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800f07c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f080:	2b03      	cmp	r3, #3
 800f082:	d11e      	bne.n	800f0c2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f086:	3338      	adds	r3, #56	@ 0x38
 800f088:	332a      	adds	r3, #42	@ 0x2a
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7fd fffc 	bl	800d088 <ld_word>
 800f090:	4603      	mov	r3, r0
 800f092:	2b00      	cmp	r3, #0
 800f094:	d001      	beq.n	800f09a <find_volume+0x38e>
 800f096:	230d      	movs	r3, #13
 800f098:	e0b1      	b.n	800f1fe <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f09c:	891b      	ldrh	r3, [r3, #8]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d001      	beq.n	800f0a6 <find_volume+0x39a>
 800f0a2:	230d      	movs	r3, #13
 800f0a4:	e0ab      	b.n	800f1fe <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0a8:	3338      	adds	r3, #56	@ 0x38
 800f0aa:	332c      	adds	r3, #44	@ 0x2c
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7fe f804 	bl	800d0ba <ld_dword>
 800f0b2:	4602      	mov	r2, r0
 800f0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0b6:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ba:	69db      	ldr	r3, [r3, #28]
 800f0bc:	009b      	lsls	r3, r3, #2
 800f0be:	647b      	str	r3, [r7, #68]	@ 0x44
 800f0c0:	e01f      	b.n	800f102 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0c4:	891b      	ldrh	r3, [r3, #8]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d101      	bne.n	800f0ce <find_volume+0x3c2>
 800f0ca:	230d      	movs	r3, #13
 800f0cc:	e097      	b.n	800f1fe <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f0d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0d4:	441a      	add	r2, r3
 800f0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0d8:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f0da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f0de:	2b02      	cmp	r3, #2
 800f0e0:	d103      	bne.n	800f0ea <find_volume+0x3de>
 800f0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0e4:	69db      	ldr	r3, [r3, #28]
 800f0e6:	005b      	lsls	r3, r3, #1
 800f0e8:	e00a      	b.n	800f100 <find_volume+0x3f4>
 800f0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ec:	69da      	ldr	r2, [r3, #28]
 800f0ee:	4613      	mov	r3, r2
 800f0f0:	005b      	lsls	r3, r3, #1
 800f0f2:	4413      	add	r3, r2
 800f0f4:	085a      	lsrs	r2, r3, #1
 800f0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0f8:	69db      	ldr	r3, [r3, #28]
 800f0fa:	f003 0301 	and.w	r3, r3, #1
 800f0fe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f100:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f104:	6a1a      	ldr	r2, [r3, #32]
 800f106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f108:	899b      	ldrh	r3, [r3, #12]
 800f10a:	4619      	mov	r1, r3
 800f10c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f10e:	440b      	add	r3, r1
 800f110:	3b01      	subs	r3, #1
 800f112:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f114:	8989      	ldrh	r1, [r1, #12]
 800f116:	fbb3 f3f1 	udiv	r3, r3, r1
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d201      	bcs.n	800f122 <find_volume+0x416>
 800f11e:	230d      	movs	r3, #13
 800f120:	e06d      	b.n	800f1fe <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f124:	f04f 32ff 	mov.w	r2, #4294967295
 800f128:	619a      	str	r2, [r3, #24]
 800f12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f12c:	699a      	ldr	r2, [r3, #24]
 800f12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f130:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f134:	2280      	movs	r2, #128	@ 0x80
 800f136:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f138:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f13c:	2b03      	cmp	r3, #3
 800f13e:	d149      	bne.n	800f1d4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f142:	3338      	adds	r3, #56	@ 0x38
 800f144:	3330      	adds	r3, #48	@ 0x30
 800f146:	4618      	mov	r0, r3
 800f148:	f7fd ff9e 	bl	800d088 <ld_word>
 800f14c:	4603      	mov	r3, r0
 800f14e:	2b01      	cmp	r3, #1
 800f150:	d140      	bne.n	800f1d4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f154:	3301      	adds	r3, #1
 800f156:	4619      	mov	r1, r3
 800f158:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f15a:	f7fe fa0b 	bl	800d574 <move_window>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d137      	bne.n	800f1d4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800f164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f166:	2200      	movs	r2, #0
 800f168:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f16c:	3338      	adds	r3, #56	@ 0x38
 800f16e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f172:	4618      	mov	r0, r3
 800f174:	f7fd ff88 	bl	800d088 <ld_word>
 800f178:	4603      	mov	r3, r0
 800f17a:	461a      	mov	r2, r3
 800f17c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f180:	429a      	cmp	r2, r3
 800f182:	d127      	bne.n	800f1d4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f186:	3338      	adds	r3, #56	@ 0x38
 800f188:	4618      	mov	r0, r3
 800f18a:	f7fd ff96 	bl	800d0ba <ld_dword>
 800f18e:	4603      	mov	r3, r0
 800f190:	4a1d      	ldr	r2, [pc, #116]	@ (800f208 <find_volume+0x4fc>)
 800f192:	4293      	cmp	r3, r2
 800f194:	d11e      	bne.n	800f1d4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f198:	3338      	adds	r3, #56	@ 0x38
 800f19a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7fd ff8b 	bl	800d0ba <ld_dword>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	4a19      	ldr	r2, [pc, #100]	@ (800f20c <find_volume+0x500>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d113      	bne.n	800f1d4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ae:	3338      	adds	r3, #56	@ 0x38
 800f1b0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7fd ff80 	bl	800d0ba <ld_dword>
 800f1ba:	4602      	mov	r2, r0
 800f1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1be:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1c2:	3338      	adds	r3, #56	@ 0x38
 800f1c4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7fd ff76 	bl	800d0ba <ld_dword>
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1d2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1d6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f1da:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f1dc:	4b0c      	ldr	r3, [pc, #48]	@ (800f210 <find_volume+0x504>)
 800f1de:	881b      	ldrh	r3, [r3, #0]
 800f1e0:	3301      	adds	r3, #1
 800f1e2:	b29a      	uxth	r2, r3
 800f1e4:	4b0a      	ldr	r3, [pc, #40]	@ (800f210 <find_volume+0x504>)
 800f1e6:	801a      	strh	r2, [r3, #0]
 800f1e8:	4b09      	ldr	r3, [pc, #36]	@ (800f210 <find_volume+0x504>)
 800f1ea:	881a      	ldrh	r2, [r3, #0]
 800f1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ee:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1f2:	4a08      	ldr	r2, [pc, #32]	@ (800f214 <find_volume+0x508>)
 800f1f4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f1f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f1f8:	f7fe f954 	bl	800d4a4 <clear_lock>
#endif
	return FR_OK;
 800f1fc:	2300      	movs	r3, #0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3758      	adds	r7, #88	@ 0x58
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	41615252 	.word	0x41615252
 800f20c:	61417272 	.word	0x61417272
 800f210:	20006720 	.word	0x20006720
 800f214:	20006744 	.word	0x20006744

0800f218 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f222:	2309      	movs	r3, #9
 800f224:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d01c      	beq.n	800f266 <validate+0x4e>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d018      	beq.n	800f266 <validate+0x4e>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d013      	beq.n	800f266 <validate+0x4e>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	889a      	ldrh	r2, [r3, #4]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	88db      	ldrh	r3, [r3, #6]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d10c      	bne.n	800f266 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	785b      	ldrb	r3, [r3, #1]
 800f252:	4618      	mov	r0, r3
 800f254:	f7fd fe78 	bl	800cf48 <disk_status>
 800f258:	4603      	mov	r3, r0
 800f25a:	f003 0301 	and.w	r3, r3, #1
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d101      	bne.n	800f266 <validate+0x4e>
			res = FR_OK;
 800f262:	2300      	movs	r3, #0
 800f264:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f266:	7bfb      	ldrb	r3, [r7, #15]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d102      	bne.n	800f272 <validate+0x5a>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	e000      	b.n	800f274 <validate+0x5c>
 800f272:	2300      	movs	r3, #0
 800f274:	683a      	ldr	r2, [r7, #0]
 800f276:	6013      	str	r3, [r2, #0]
	return res;
 800f278:	7bfb      	ldrb	r3, [r7, #15]
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3710      	adds	r7, #16
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
	...

0800f284 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b088      	sub	sp, #32
 800f288:	af00      	add	r7, sp, #0
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	4613      	mov	r3, r2
 800f290:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f296:	f107 0310 	add.w	r3, r7, #16
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7ff fc9c 	bl	800ebd8 <get_ldnumber>
 800f2a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f2a2:	69fb      	ldr	r3, [r7, #28]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	da01      	bge.n	800f2ac <f_mount+0x28>
 800f2a8:	230b      	movs	r3, #11
 800f2aa:	e02b      	b.n	800f304 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f2ac:	4a17      	ldr	r2, [pc, #92]	@ (800f30c <f_mount+0x88>)
 800f2ae:	69fb      	ldr	r3, [r7, #28]
 800f2b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f2b6:	69bb      	ldr	r3, [r7, #24]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d005      	beq.n	800f2c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f2bc:	69b8      	ldr	r0, [r7, #24]
 800f2be:	f7fe f8f1 	bl	800d4a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f2c2:	69bb      	ldr	r3, [r7, #24]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d002      	beq.n	800f2d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f2d4:	68fa      	ldr	r2, [r7, #12]
 800f2d6:	490d      	ldr	r1, [pc, #52]	@ (800f30c <f_mount+0x88>)
 800f2d8:	69fb      	ldr	r3, [r7, #28]
 800f2da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d002      	beq.n	800f2ea <f_mount+0x66>
 800f2e4:	79fb      	ldrb	r3, [r7, #7]
 800f2e6:	2b01      	cmp	r3, #1
 800f2e8:	d001      	beq.n	800f2ee <f_mount+0x6a>
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	e00a      	b.n	800f304 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f2ee:	f107 010c 	add.w	r1, r7, #12
 800f2f2:	f107 0308 	add.w	r3, r7, #8
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7ff fd07 	bl	800ed0c <find_volume>
 800f2fe:	4603      	mov	r3, r0
 800f300:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f302:	7dfb      	ldrb	r3, [r7, #23]
}
 800f304:	4618      	mov	r0, r3
 800f306:	3720      	adds	r7, #32
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	2000671c 	.word	0x2000671c

0800f310 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b09a      	sub	sp, #104	@ 0x68
 800f314:	af00      	add	r7, sp, #0
 800f316:	60f8      	str	r0, [r7, #12]
 800f318:	60b9      	str	r1, [r7, #8]
 800f31a:	4613      	mov	r3, r2
 800f31c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d101      	bne.n	800f328 <f_open+0x18>
 800f324:	2309      	movs	r3, #9
 800f326:	e1b7      	b.n	800f698 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f328:	79fb      	ldrb	r3, [r7, #7]
 800f32a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f32e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f330:	79fa      	ldrb	r2, [r7, #7]
 800f332:	f107 0114 	add.w	r1, r7, #20
 800f336:	f107 0308 	add.w	r3, r7, #8
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7ff fce6 	bl	800ed0c <find_volume>
 800f340:	4603      	mov	r3, r0
 800f342:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800f346:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	f040 819b 	bne.w	800f686 <f_open+0x376>
		dj.obj.fs = fs;
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f354:	68ba      	ldr	r2, [r7, #8]
 800f356:	f107 0318 	add.w	r3, r7, #24
 800f35a:	4611      	mov	r1, r2
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7ff fbc5 	bl	800eaec <follow_path>
 800f362:	4603      	mov	r3, r0
 800f364:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f368:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d118      	bne.n	800f3a2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f370:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800f374:	b25b      	sxtb	r3, r3
 800f376:	2b00      	cmp	r3, #0
 800f378:	da03      	bge.n	800f382 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f37a:	2306      	movs	r3, #6
 800f37c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f380:	e00f      	b.n	800f3a2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f382:	79fb      	ldrb	r3, [r7, #7]
 800f384:	2b01      	cmp	r3, #1
 800f386:	bf8c      	ite	hi
 800f388:	2301      	movhi	r3, #1
 800f38a:	2300      	movls	r3, #0
 800f38c:	b2db      	uxtb	r3, r3
 800f38e:	461a      	mov	r2, r3
 800f390:	f107 0318 	add.w	r3, r7, #24
 800f394:	4611      	mov	r1, r2
 800f396:	4618      	mov	r0, r3
 800f398:	f7fd ff78 	bl	800d28c <chk_lock>
 800f39c:	4603      	mov	r3, r0
 800f39e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f3a2:	79fb      	ldrb	r3, [r7, #7]
 800f3a4:	f003 031c 	and.w	r3, r3, #28
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d07f      	beq.n	800f4ac <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800f3ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d017      	beq.n	800f3e4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f3b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f3b8:	2b04      	cmp	r3, #4
 800f3ba:	d10e      	bne.n	800f3da <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f3bc:	f7fd ffc2 	bl	800d344 <enq_lock>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d006      	beq.n	800f3d4 <f_open+0xc4>
 800f3c6:	f107 0318 	add.w	r3, r7, #24
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7ff f8de 	bl	800e58c <dir_register>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	e000      	b.n	800f3d6 <f_open+0xc6>
 800f3d4:	2312      	movs	r3, #18
 800f3d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f3da:	79fb      	ldrb	r3, [r7, #7]
 800f3dc:	f043 0308 	orr.w	r3, r3, #8
 800f3e0:	71fb      	strb	r3, [r7, #7]
 800f3e2:	e010      	b.n	800f406 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f3e4:	7fbb      	ldrb	r3, [r7, #30]
 800f3e6:	f003 0311 	and.w	r3, r3, #17
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d003      	beq.n	800f3f6 <f_open+0xe6>
					res = FR_DENIED;
 800f3ee:	2307      	movs	r3, #7
 800f3f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f3f4:	e007      	b.n	800f406 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f3f6:	79fb      	ldrb	r3, [r7, #7]
 800f3f8:	f003 0304 	and.w	r3, r3, #4
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d002      	beq.n	800f406 <f_open+0xf6>
 800f400:	2308      	movs	r3, #8
 800f402:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f406:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d168      	bne.n	800f4e0 <f_open+0x1d0>
 800f40e:	79fb      	ldrb	r3, [r7, #7]
 800f410:	f003 0308 	and.w	r3, r3, #8
 800f414:	2b00      	cmp	r3, #0
 800f416:	d063      	beq.n	800f4e0 <f_open+0x1d0>
				dw = GET_FATTIME();
 800f418:	f7fd fb70 	bl	800cafc <get_fattime>
 800f41c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f420:	330e      	adds	r3, #14
 800f422:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f424:	4618      	mov	r0, r3
 800f426:	f7fd fe86 	bl	800d136 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f42c:	3316      	adds	r3, #22
 800f42e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f430:	4618      	mov	r0, r3
 800f432:	f7fd fe80 	bl	800d136 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f438:	330b      	adds	r3, #11
 800f43a:	2220      	movs	r2, #32
 800f43c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f442:	4611      	mov	r1, r2
 800f444:	4618      	mov	r0, r3
 800f446:	f7fe fe1a 	bl	800e07e <ld_clust>
 800f44a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f450:	2200      	movs	r2, #0
 800f452:	4618      	mov	r0, r3
 800f454:	f7fe fe32 	bl	800e0bc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f45a:	331c      	adds	r3, #28
 800f45c:	2100      	movs	r1, #0
 800f45e:	4618      	mov	r0, r3
 800f460:	f7fd fe69 	bl	800d136 <st_dword>
					fs->wflag = 1;
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	2201      	movs	r2, #1
 800f468:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f46a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d037      	beq.n	800f4e0 <f_open+0x1d0>
						dw = fs->winsect;
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f474:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f476:	f107 0318 	add.w	r3, r7, #24
 800f47a:	2200      	movs	r2, #0
 800f47c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f47e:	4618      	mov	r0, r3
 800f480:	f7fe fb22 	bl	800dac8 <remove_chain>
 800f484:	4603      	mov	r3, r0
 800f486:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800f48a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d126      	bne.n	800f4e0 <f_open+0x1d0>
							res = move_window(fs, dw);
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f496:	4618      	mov	r0, r3
 800f498:	f7fe f86c 	bl	800d574 <move_window>
 800f49c:	4603      	mov	r3, r0
 800f49e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f4a6:	3a01      	subs	r2, #1
 800f4a8:	615a      	str	r2, [r3, #20]
 800f4aa:	e019      	b.n	800f4e0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f4ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d115      	bne.n	800f4e0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f4b4:	7fbb      	ldrb	r3, [r7, #30]
 800f4b6:	f003 0310 	and.w	r3, r3, #16
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d003      	beq.n	800f4c6 <f_open+0x1b6>
					res = FR_NO_FILE;
 800f4be:	2304      	movs	r3, #4
 800f4c0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f4c4:	e00c      	b.n	800f4e0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f4c6:	79fb      	ldrb	r3, [r7, #7]
 800f4c8:	f003 0302 	and.w	r3, r3, #2
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d007      	beq.n	800f4e0 <f_open+0x1d0>
 800f4d0:	7fbb      	ldrb	r3, [r7, #30]
 800f4d2:	f003 0301 	and.w	r3, r3, #1
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d002      	beq.n	800f4e0 <f_open+0x1d0>
						res = FR_DENIED;
 800f4da:	2307      	movs	r3, #7
 800f4dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f4e0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d126      	bne.n	800f536 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f4e8:	79fb      	ldrb	r3, [r7, #7]
 800f4ea:	f003 0308 	and.w	r3, r3, #8
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d003      	beq.n	800f4fa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800f4f2:	79fb      	ldrb	r3, [r7, #7]
 800f4f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800f502:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f508:	79fb      	ldrb	r3, [r7, #7]
 800f50a:	2b01      	cmp	r3, #1
 800f50c:	bf8c      	ite	hi
 800f50e:	2301      	movhi	r3, #1
 800f510:	2300      	movls	r3, #0
 800f512:	b2db      	uxtb	r3, r3
 800f514:	461a      	mov	r2, r3
 800f516:	f107 0318 	add.w	r3, r7, #24
 800f51a:	4611      	mov	r1, r2
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7fd ff33 	bl	800d388 <inc_lock>
 800f522:	4602      	mov	r2, r0
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	691b      	ldr	r3, [r3, #16]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d102      	bne.n	800f536 <f_open+0x226>
 800f530:	2302      	movs	r3, #2
 800f532:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f536:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	f040 80a3 	bne.w	800f686 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f544:	4611      	mov	r1, r2
 800f546:	4618      	mov	r0, r3
 800f548:	f7fe fd99 	bl	800e07e <ld_clust>
 800f54c:	4602      	mov	r2, r0
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f554:	331c      	adds	r3, #28
 800f556:	4618      	mov	r0, r3
 800f558:	f7fd fdaf 	bl	800d0ba <ld_dword>
 800f55c:	4602      	mov	r2, r0
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	2200      	movs	r2, #0
 800f566:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f568:	697a      	ldr	r2, [r7, #20]
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	88da      	ldrh	r2, [r3, #6]
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	79fa      	ldrb	r2, [r7, #7]
 800f57a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	2200      	movs	r2, #0
 800f580:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2200      	movs	r2, #0
 800f586:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2200      	movs	r2, #0
 800f58c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	3330      	adds	r3, #48	@ 0x30
 800f592:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f596:	2100      	movs	r1, #0
 800f598:	4618      	mov	r0, r3
 800f59a:	f7fd fe19 	bl	800d1d0 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f59e:	79fb      	ldrb	r3, [r7, #7]
 800f5a0:	f003 0320 	and.w	r3, r3, #32
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d06e      	beq.n	800f686 <f_open+0x376>
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	68db      	ldr	r3, [r3, #12]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d06a      	beq.n	800f686 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	68da      	ldr	r2, [r3, #12]
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	895b      	ldrh	r3, [r3, #10]
 800f5bc:	461a      	mov	r2, r3
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	899b      	ldrh	r3, [r3, #12]
 800f5c2:	fb02 f303 	mul.w	r3, r2, r3
 800f5c6:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	689b      	ldr	r3, [r3, #8]
 800f5cc:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	68db      	ldr	r3, [r3, #12]
 800f5d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f5d4:	e016      	b.n	800f604 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7fe f887 	bl	800d6ee <get_fat>
 800f5e0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f5e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f5e4:	2b01      	cmp	r3, #1
 800f5e6:	d802      	bhi.n	800f5ee <f_open+0x2de>
 800f5e8:	2302      	movs	r3, #2
 800f5ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f5ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5f4:	d102      	bne.n	800f5fc <f_open+0x2ec>
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f5fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f5fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f600:	1ad3      	subs	r3, r2, r3
 800f602:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f604:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d103      	bne.n	800f614 <f_open+0x304>
 800f60c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f60e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f610:	429a      	cmp	r2, r3
 800f612:	d8e0      	bhi.n	800f5d6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f618:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f61a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d131      	bne.n	800f686 <f_open+0x376>
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	899b      	ldrh	r3, [r3, #12]
 800f626:	461a      	mov	r2, r3
 800f628:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f62a:	fbb3 f1f2 	udiv	r1, r3, r2
 800f62e:	fb01 f202 	mul.w	r2, r1, r2
 800f632:	1a9b      	subs	r3, r3, r2
 800f634:	2b00      	cmp	r3, #0
 800f636:	d026      	beq.n	800f686 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f63c:	4618      	mov	r0, r3
 800f63e:	f7fe f837 	bl	800d6b0 <clust2sect>
 800f642:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800f644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f646:	2b00      	cmp	r3, #0
 800f648:	d103      	bne.n	800f652 <f_open+0x342>
						res = FR_INT_ERR;
 800f64a:	2302      	movs	r3, #2
 800f64c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f650:	e019      	b.n	800f686 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	899b      	ldrh	r3, [r3, #12]
 800f656:	461a      	mov	r2, r3
 800f658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f65a:	fbb3 f2f2 	udiv	r2, r3, r2
 800f65e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f660:	441a      	add	r2, r3
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	7858      	ldrb	r0, [r3, #1]
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	6a1a      	ldr	r2, [r3, #32]
 800f674:	2301      	movs	r3, #1
 800f676:	f7fd fca9 	bl	800cfcc <disk_read>
 800f67a:	4603      	mov	r3, r0
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d002      	beq.n	800f686 <f_open+0x376>
 800f680:	2301      	movs	r3, #1
 800f682:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f686:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d002      	beq.n	800f694 <f_open+0x384>
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	2200      	movs	r2, #0
 800f692:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f694:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800f698:	4618      	mov	r0, r3
 800f69a:	3768      	adds	r7, #104	@ 0x68
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b08c      	sub	sp, #48	@ 0x30
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	60f8      	str	r0, [r7, #12]
 800f6a8:	60b9      	str	r1, [r7, #8]
 800f6aa:	607a      	str	r2, [r7, #4]
 800f6ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	f107 0210 	add.w	r2, r7, #16
 800f6be:	4611      	mov	r1, r2
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7ff fda9 	bl	800f218 <validate>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f6cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d107      	bne.n	800f6e4 <f_write+0x44>
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	7d5b      	ldrb	r3, [r3, #21]
 800f6d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f6dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d002      	beq.n	800f6ea <f_write+0x4a>
 800f6e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f6e8:	e16a      	b.n	800f9c0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	7d1b      	ldrb	r3, [r3, #20]
 800f6ee:	f003 0302 	and.w	r3, r3, #2
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d101      	bne.n	800f6fa <f_write+0x5a>
 800f6f6:	2307      	movs	r3, #7
 800f6f8:	e162      	b.n	800f9c0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	699a      	ldr	r2, [r3, #24]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	441a      	add	r2, r3
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	699b      	ldr	r3, [r3, #24]
 800f706:	429a      	cmp	r2, r3
 800f708:	f080 814c 	bcs.w	800f9a4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	699b      	ldr	r3, [r3, #24]
 800f710:	43db      	mvns	r3, r3
 800f712:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f714:	e146      	b.n	800f9a4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	699b      	ldr	r3, [r3, #24]
 800f71a:	693a      	ldr	r2, [r7, #16]
 800f71c:	8992      	ldrh	r2, [r2, #12]
 800f71e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f722:	fb01 f202 	mul.w	r2, r1, r2
 800f726:	1a9b      	subs	r3, r3, r2
 800f728:	2b00      	cmp	r3, #0
 800f72a:	f040 80f1 	bne.w	800f910 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	699b      	ldr	r3, [r3, #24]
 800f732:	693a      	ldr	r2, [r7, #16]
 800f734:	8992      	ldrh	r2, [r2, #12]
 800f736:	fbb3 f3f2 	udiv	r3, r3, r2
 800f73a:	693a      	ldr	r2, [r7, #16]
 800f73c:	8952      	ldrh	r2, [r2, #10]
 800f73e:	3a01      	subs	r2, #1
 800f740:	4013      	ands	r3, r2
 800f742:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f744:	69bb      	ldr	r3, [r7, #24]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d143      	bne.n	800f7d2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	699b      	ldr	r3, [r3, #24]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d10c      	bne.n	800f76c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	689b      	ldr	r3, [r3, #8]
 800f756:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d11a      	bne.n	800f794 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	2100      	movs	r1, #0
 800f762:	4618      	mov	r0, r3
 800f764:	f7fe fa15 	bl	800db92 <create_chain>
 800f768:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f76a:	e013      	b.n	800f794 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f770:	2b00      	cmp	r3, #0
 800f772:	d007      	beq.n	800f784 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	699b      	ldr	r3, [r3, #24]
 800f778:	4619      	mov	r1, r3
 800f77a:	68f8      	ldr	r0, [r7, #12]
 800f77c:	f7fe faa1 	bl	800dcc2 <clmt_clust>
 800f780:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f782:	e007      	b.n	800f794 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f784:	68fa      	ldr	r2, [r7, #12]
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	69db      	ldr	r3, [r3, #28]
 800f78a:	4619      	mov	r1, r3
 800f78c:	4610      	mov	r0, r2
 800f78e:	f7fe fa00 	bl	800db92 <create_chain>
 800f792:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f796:	2b00      	cmp	r3, #0
 800f798:	f000 8109 	beq.w	800f9ae <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f79c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f79e:	2b01      	cmp	r3, #1
 800f7a0:	d104      	bne.n	800f7ac <f_write+0x10c>
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	2202      	movs	r2, #2
 800f7a6:	755a      	strb	r2, [r3, #21]
 800f7a8:	2302      	movs	r3, #2
 800f7aa:	e109      	b.n	800f9c0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7b2:	d104      	bne.n	800f7be <f_write+0x11e>
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	2201      	movs	r2, #1
 800f7b8:	755a      	strb	r2, [r3, #21]
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	e100      	b.n	800f9c0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f7c2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	689b      	ldr	r3, [r3, #8]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d102      	bne.n	800f7d2 <f_write+0x132>
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f7d0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	7d1b      	ldrb	r3, [r3, #20]
 800f7d6:	b25b      	sxtb	r3, r3
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	da18      	bge.n	800f80e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f7dc:	693b      	ldr	r3, [r7, #16]
 800f7de:	7858      	ldrb	r0, [r3, #1]
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	6a1a      	ldr	r2, [r3, #32]
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	f7fd fc0e 	bl	800d00c <disk_write>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d004      	beq.n	800f800 <f_write+0x160>
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2201      	movs	r2, #1
 800f7fa:	755a      	strb	r2, [r3, #21]
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	e0df      	b.n	800f9c0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	7d1b      	ldrb	r3, [r3, #20]
 800f804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f808:	b2da      	uxtb	r2, r3
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f80e:	693a      	ldr	r2, [r7, #16]
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	69db      	ldr	r3, [r3, #28]
 800f814:	4619      	mov	r1, r3
 800f816:	4610      	mov	r0, r2
 800f818:	f7fd ff4a 	bl	800d6b0 <clust2sect>
 800f81c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d104      	bne.n	800f82e <f_write+0x18e>
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	2202      	movs	r2, #2
 800f828:	755a      	strb	r2, [r3, #21]
 800f82a:	2302      	movs	r3, #2
 800f82c:	e0c8      	b.n	800f9c0 <f_write+0x320>
			sect += csect;
 800f82e:	697a      	ldr	r2, [r7, #20]
 800f830:	69bb      	ldr	r3, [r7, #24]
 800f832:	4413      	add	r3, r2
 800f834:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	899b      	ldrh	r3, [r3, #12]
 800f83a:	461a      	mov	r2, r3
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f842:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f844:	6a3b      	ldr	r3, [r7, #32]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d043      	beq.n	800f8d2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f84a:	69ba      	ldr	r2, [r7, #24]
 800f84c:	6a3b      	ldr	r3, [r7, #32]
 800f84e:	4413      	add	r3, r2
 800f850:	693a      	ldr	r2, [r7, #16]
 800f852:	8952      	ldrh	r2, [r2, #10]
 800f854:	4293      	cmp	r3, r2
 800f856:	d905      	bls.n	800f864 <f_write+0x1c4>
					cc = fs->csize - csect;
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	895b      	ldrh	r3, [r3, #10]
 800f85c:	461a      	mov	r2, r3
 800f85e:	69bb      	ldr	r3, [r7, #24]
 800f860:	1ad3      	subs	r3, r2, r3
 800f862:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	7858      	ldrb	r0, [r3, #1]
 800f868:	6a3b      	ldr	r3, [r7, #32]
 800f86a:	697a      	ldr	r2, [r7, #20]
 800f86c:	69f9      	ldr	r1, [r7, #28]
 800f86e:	f7fd fbcd 	bl	800d00c <disk_write>
 800f872:	4603      	mov	r3, r0
 800f874:	2b00      	cmp	r3, #0
 800f876:	d004      	beq.n	800f882 <f_write+0x1e2>
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	2201      	movs	r2, #1
 800f87c:	755a      	strb	r2, [r3, #21]
 800f87e:	2301      	movs	r3, #1
 800f880:	e09e      	b.n	800f9c0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	6a1a      	ldr	r2, [r3, #32]
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	1ad3      	subs	r3, r2, r3
 800f88a:	6a3a      	ldr	r2, [r7, #32]
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d918      	bls.n	800f8c2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	6a1a      	ldr	r2, [r3, #32]
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	1ad3      	subs	r3, r2, r3
 800f89e:	693a      	ldr	r2, [r7, #16]
 800f8a0:	8992      	ldrh	r2, [r2, #12]
 800f8a2:	fb02 f303 	mul.w	r3, r2, r3
 800f8a6:	69fa      	ldr	r2, [r7, #28]
 800f8a8:	18d1      	adds	r1, r2, r3
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	899b      	ldrh	r3, [r3, #12]
 800f8ae:	461a      	mov	r2, r3
 800f8b0:	f7fd fc6d 	bl	800d18e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	7d1b      	ldrb	r3, [r3, #20]
 800f8b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8bc:	b2da      	uxtb	r2, r3
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	899b      	ldrh	r3, [r3, #12]
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	6a3b      	ldr	r3, [r7, #32]
 800f8ca:	fb02 f303 	mul.w	r3, r2, r3
 800f8ce:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800f8d0:	e04b      	b.n	800f96a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	6a1b      	ldr	r3, [r3, #32]
 800f8d6:	697a      	ldr	r2, [r7, #20]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d016      	beq.n	800f90a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	699a      	ldr	r2, [r3, #24]
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d210      	bcs.n	800f90a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	7858      	ldrb	r0, [r3, #1]
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	697a      	ldr	r2, [r7, #20]
 800f8f6:	f7fd fb69 	bl	800cfcc <disk_read>
 800f8fa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d004      	beq.n	800f90a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	2201      	movs	r2, #1
 800f904:	755a      	strb	r2, [r3, #21]
 800f906:	2301      	movs	r3, #1
 800f908:	e05a      	b.n	800f9c0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	697a      	ldr	r2, [r7, #20]
 800f90e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f910:	693b      	ldr	r3, [r7, #16]
 800f912:	899b      	ldrh	r3, [r3, #12]
 800f914:	4618      	mov	r0, r3
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	699b      	ldr	r3, [r3, #24]
 800f91a:	693a      	ldr	r2, [r7, #16]
 800f91c:	8992      	ldrh	r2, [r2, #12]
 800f91e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f922:	fb01 f202 	mul.w	r2, r1, r2
 800f926:	1a9b      	subs	r3, r3, r2
 800f928:	1ac3      	subs	r3, r0, r3
 800f92a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f92c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	429a      	cmp	r2, r3
 800f932:	d901      	bls.n	800f938 <f_write+0x298>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	699b      	ldr	r3, [r3, #24]
 800f942:	693a      	ldr	r2, [r7, #16]
 800f944:	8992      	ldrh	r2, [r2, #12]
 800f946:	fbb3 f0f2 	udiv	r0, r3, r2
 800f94a:	fb00 f202 	mul.w	r2, r0, r2
 800f94e:	1a9b      	subs	r3, r3, r2
 800f950:	440b      	add	r3, r1
 800f952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f954:	69f9      	ldr	r1, [r7, #28]
 800f956:	4618      	mov	r0, r3
 800f958:	f7fd fc19 	bl	800d18e <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	7d1b      	ldrb	r3, [r3, #20]
 800f960:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f964:	b2da      	uxtb	r2, r3
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f96a:	69fa      	ldr	r2, [r7, #28]
 800f96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f96e:	4413      	add	r3, r2
 800f970:	61fb      	str	r3, [r7, #28]
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	699a      	ldr	r2, [r3, #24]
 800f976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f978:	441a      	add	r2, r3
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	619a      	str	r2, [r3, #24]
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	68da      	ldr	r2, [r3, #12]
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	699b      	ldr	r3, [r3, #24]
 800f986:	429a      	cmp	r2, r3
 800f988:	bf38      	it	cc
 800f98a:	461a      	movcc	r2, r3
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	60da      	str	r2, [r3, #12]
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	681a      	ldr	r2, [r3, #0]
 800f994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f996:	441a      	add	r2, r3
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	601a      	str	r2, [r3, #0]
 800f99c:	687a      	ldr	r2, [r7, #4]
 800f99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9a0:	1ad3      	subs	r3, r2, r3
 800f9a2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	f47f aeb5 	bne.w	800f716 <f_write+0x76>
 800f9ac:	e000      	b.n	800f9b0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f9ae:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	7d1b      	ldrb	r3, [r3, #20]
 800f9b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9b8:	b2da      	uxtb	r2, r3
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f9be:	2300      	movs	r3, #0
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3730      	adds	r7, #48	@ 0x30
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}

0800f9c8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b086      	sub	sp, #24
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f107 0208 	add.w	r2, r7, #8
 800f9d6:	4611      	mov	r1, r2
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f7ff fc1d 	bl	800f218 <validate>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f9e2:	7dfb      	ldrb	r3, [r7, #23]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d168      	bne.n	800faba <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	7d1b      	ldrb	r3, [r3, #20]
 800f9ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d062      	beq.n	800faba <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	7d1b      	ldrb	r3, [r3, #20]
 800f9f8:	b25b      	sxtb	r3, r3
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	da15      	bge.n	800fa2a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	7858      	ldrb	r0, [r3, #1]
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6a1a      	ldr	r2, [r3, #32]
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	f7fd fafd 	bl	800d00c <disk_write>
 800fa12:	4603      	mov	r3, r0
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d001      	beq.n	800fa1c <f_sync+0x54>
 800fa18:	2301      	movs	r3, #1
 800fa1a:	e04f      	b.n	800fabc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	7d1b      	ldrb	r3, [r3, #20]
 800fa20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fa24:	b2da      	uxtb	r2, r3
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fa2a:	f7fd f867 	bl	800cafc <get_fattime>
 800fa2e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fa30:	68ba      	ldr	r2, [r7, #8]
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa36:	4619      	mov	r1, r3
 800fa38:	4610      	mov	r0, r2
 800fa3a:	f7fd fd9b 	bl	800d574 <move_window>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fa42:	7dfb      	ldrb	r3, [r7, #23]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d138      	bne.n	800faba <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa4c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	330b      	adds	r3, #11
 800fa52:	781a      	ldrb	r2, [r3, #0]
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	330b      	adds	r3, #11
 800fa58:	f042 0220 	orr.w	r2, r2, #32
 800fa5c:	b2d2      	uxtb	r2, r2
 800fa5e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6818      	ldr	r0, [r3, #0]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	689b      	ldr	r3, [r3, #8]
 800fa68:	461a      	mov	r2, r3
 800fa6a:	68f9      	ldr	r1, [r7, #12]
 800fa6c:	f7fe fb26 	bl	800e0bc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f103 021c 	add.w	r2, r3, #28
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	68db      	ldr	r3, [r3, #12]
 800fa7a:	4619      	mov	r1, r3
 800fa7c:	4610      	mov	r0, r2
 800fa7e:	f7fd fb5a 	bl	800d136 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	3316      	adds	r3, #22
 800fa86:	6939      	ldr	r1, [r7, #16]
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7fd fb54 	bl	800d136 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	3312      	adds	r3, #18
 800fa92:	2100      	movs	r1, #0
 800fa94:	4618      	mov	r0, r3
 800fa96:	f7fd fb33 	bl	800d100 <st_word>
					fs->wflag = 1;
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	2201      	movs	r2, #1
 800fa9e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7fd fd94 	bl	800d5d0 <sync_fs>
 800faa8:	4603      	mov	r3, r0
 800faaa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	7d1b      	ldrb	r3, [r3, #20]
 800fab0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fab4:	b2da      	uxtb	r2, r3
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800faba:	7dfb      	ldrb	r3, [r7, #23]
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3718      	adds	r7, #24
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b087      	sub	sp, #28
 800fac8:	af00      	add	r7, sp, #0
 800faca:	60f8      	str	r0, [r7, #12]
 800facc:	60b9      	str	r1, [r7, #8]
 800face:	4613      	mov	r3, r2
 800fad0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fad2:	2301      	movs	r3, #1
 800fad4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fad6:	2300      	movs	r3, #0
 800fad8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fada:	4b1f      	ldr	r3, [pc, #124]	@ (800fb58 <FATFS_LinkDriverEx+0x94>)
 800fadc:	7a5b      	ldrb	r3, [r3, #9]
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d131      	bne.n	800fb48 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fae4:	4b1c      	ldr	r3, [pc, #112]	@ (800fb58 <FATFS_LinkDriverEx+0x94>)
 800fae6:	7a5b      	ldrb	r3, [r3, #9]
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	461a      	mov	r2, r3
 800faec:	4b1a      	ldr	r3, [pc, #104]	@ (800fb58 <FATFS_LinkDriverEx+0x94>)
 800faee:	2100      	movs	r1, #0
 800faf0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800faf2:	4b19      	ldr	r3, [pc, #100]	@ (800fb58 <FATFS_LinkDriverEx+0x94>)
 800faf4:	7a5b      	ldrb	r3, [r3, #9]
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	4a17      	ldr	r2, [pc, #92]	@ (800fb58 <FATFS_LinkDriverEx+0x94>)
 800fafa:	009b      	lsls	r3, r3, #2
 800fafc:	4413      	add	r3, r2
 800fafe:	68fa      	ldr	r2, [r7, #12]
 800fb00:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fb02:	4b15      	ldr	r3, [pc, #84]	@ (800fb58 <FATFS_LinkDriverEx+0x94>)
 800fb04:	7a5b      	ldrb	r3, [r3, #9]
 800fb06:	b2db      	uxtb	r3, r3
 800fb08:	461a      	mov	r2, r3
 800fb0a:	4b13      	ldr	r3, [pc, #76]	@ (800fb58 <FATFS_LinkDriverEx+0x94>)
 800fb0c:	4413      	add	r3, r2
 800fb0e:	79fa      	ldrb	r2, [r7, #7]
 800fb10:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fb12:	4b11      	ldr	r3, [pc, #68]	@ (800fb58 <FATFS_LinkDriverEx+0x94>)
 800fb14:	7a5b      	ldrb	r3, [r3, #9]
 800fb16:	b2db      	uxtb	r3, r3
 800fb18:	1c5a      	adds	r2, r3, #1
 800fb1a:	b2d1      	uxtb	r1, r2
 800fb1c:	4a0e      	ldr	r2, [pc, #56]	@ (800fb58 <FATFS_LinkDriverEx+0x94>)
 800fb1e:	7251      	strb	r1, [r2, #9]
 800fb20:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fb22:	7dbb      	ldrb	r3, [r7, #22]
 800fb24:	3330      	adds	r3, #48	@ 0x30
 800fb26:	b2da      	uxtb	r2, r3
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	3301      	adds	r3, #1
 800fb30:	223a      	movs	r2, #58	@ 0x3a
 800fb32:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	3302      	adds	r3, #2
 800fb38:	222f      	movs	r2, #47	@ 0x2f
 800fb3a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	3303      	adds	r3, #3
 800fb40:	2200      	movs	r2, #0
 800fb42:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fb44:	2300      	movs	r3, #0
 800fb46:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fb48:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	371c      	adds	r7, #28
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb54:	4770      	bx	lr
 800fb56:	bf00      	nop
 800fb58:	20006944 	.word	0x20006944

0800fb5c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fb66:	2200      	movs	r2, #0
 800fb68:	6839      	ldr	r1, [r7, #0]
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f7ff ffaa 	bl	800fac4 <FATFS_LinkDriverEx>
 800fb70:	4603      	mov	r3, r0
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3708      	adds	r7, #8
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
	...

0800fb7c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b085      	sub	sp, #20
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	4603      	mov	r3, r0
 800fb84:	6039      	str	r1, [r7, #0]
 800fb86:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fb88:	88fb      	ldrh	r3, [r7, #6]
 800fb8a:	2b7f      	cmp	r3, #127	@ 0x7f
 800fb8c:	d802      	bhi.n	800fb94 <ff_convert+0x18>
		c = chr;
 800fb8e:	88fb      	ldrh	r3, [r7, #6]
 800fb90:	81fb      	strh	r3, [r7, #14]
 800fb92:	e025      	b.n	800fbe0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d00b      	beq.n	800fbb2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fb9a:	88fb      	ldrh	r3, [r7, #6]
 800fb9c:	2bff      	cmp	r3, #255	@ 0xff
 800fb9e:	d805      	bhi.n	800fbac <ff_convert+0x30>
 800fba0:	88fb      	ldrh	r3, [r7, #6]
 800fba2:	3b80      	subs	r3, #128	@ 0x80
 800fba4:	4a12      	ldr	r2, [pc, #72]	@ (800fbf0 <ff_convert+0x74>)
 800fba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbaa:	e000      	b.n	800fbae <ff_convert+0x32>
 800fbac:	2300      	movs	r3, #0
 800fbae:	81fb      	strh	r3, [r7, #14]
 800fbb0:	e016      	b.n	800fbe0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	81fb      	strh	r3, [r7, #14]
 800fbb6:	e009      	b.n	800fbcc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fbb8:	89fb      	ldrh	r3, [r7, #14]
 800fbba:	4a0d      	ldr	r2, [pc, #52]	@ (800fbf0 <ff_convert+0x74>)
 800fbbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbc0:	88fa      	ldrh	r2, [r7, #6]
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d006      	beq.n	800fbd4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fbc6:	89fb      	ldrh	r3, [r7, #14]
 800fbc8:	3301      	adds	r3, #1
 800fbca:	81fb      	strh	r3, [r7, #14]
 800fbcc:	89fb      	ldrh	r3, [r7, #14]
 800fbce:	2b7f      	cmp	r3, #127	@ 0x7f
 800fbd0:	d9f2      	bls.n	800fbb8 <ff_convert+0x3c>
 800fbd2:	e000      	b.n	800fbd6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fbd4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fbd6:	89fb      	ldrh	r3, [r7, #14]
 800fbd8:	3380      	adds	r3, #128	@ 0x80
 800fbda:	b29b      	uxth	r3, r3
 800fbdc:	b2db      	uxtb	r3, r3
 800fbde:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fbe0:	89fb      	ldrh	r3, [r7, #14]
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3714      	adds	r7, #20
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbec:	4770      	bx	lr
 800fbee:	bf00      	nop
 800fbf0:	080112b8 	.word	0x080112b8

0800fbf4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b087      	sub	sp, #28
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fbfe:	88fb      	ldrh	r3, [r7, #6]
 800fc00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fc04:	d201      	bcs.n	800fc0a <ff_wtoupper+0x16>
 800fc06:	4b3e      	ldr	r3, [pc, #248]	@ (800fd00 <ff_wtoupper+0x10c>)
 800fc08:	e000      	b.n	800fc0c <ff_wtoupper+0x18>
 800fc0a:	4b3e      	ldr	r3, [pc, #248]	@ (800fd04 <ff_wtoupper+0x110>)
 800fc0c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	1c9a      	adds	r2, r3, #2
 800fc12:	617a      	str	r2, [r7, #20]
 800fc14:	881b      	ldrh	r3, [r3, #0]
 800fc16:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800fc18:	8a7b      	ldrh	r3, [r7, #18]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d068      	beq.n	800fcf0 <ff_wtoupper+0xfc>
 800fc1e:	88fa      	ldrh	r2, [r7, #6]
 800fc20:	8a7b      	ldrh	r3, [r7, #18]
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d364      	bcc.n	800fcf0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	1c9a      	adds	r2, r3, #2
 800fc2a:	617a      	str	r2, [r7, #20]
 800fc2c:	881b      	ldrh	r3, [r3, #0]
 800fc2e:	823b      	strh	r3, [r7, #16]
 800fc30:	8a3b      	ldrh	r3, [r7, #16]
 800fc32:	0a1b      	lsrs	r3, r3, #8
 800fc34:	81fb      	strh	r3, [r7, #14]
 800fc36:	8a3b      	ldrh	r3, [r7, #16]
 800fc38:	b2db      	uxtb	r3, r3
 800fc3a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800fc3c:	88fa      	ldrh	r2, [r7, #6]
 800fc3e:	8a79      	ldrh	r1, [r7, #18]
 800fc40:	8a3b      	ldrh	r3, [r7, #16]
 800fc42:	440b      	add	r3, r1
 800fc44:	429a      	cmp	r2, r3
 800fc46:	da49      	bge.n	800fcdc <ff_wtoupper+0xe8>
			switch (cmd) {
 800fc48:	89fb      	ldrh	r3, [r7, #14]
 800fc4a:	2b08      	cmp	r3, #8
 800fc4c:	d84f      	bhi.n	800fcee <ff_wtoupper+0xfa>
 800fc4e:	a201      	add	r2, pc, #4	@ (adr r2, 800fc54 <ff_wtoupper+0x60>)
 800fc50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc54:	0800fc79 	.word	0x0800fc79
 800fc58:	0800fc8b 	.word	0x0800fc8b
 800fc5c:	0800fca1 	.word	0x0800fca1
 800fc60:	0800fca9 	.word	0x0800fca9
 800fc64:	0800fcb1 	.word	0x0800fcb1
 800fc68:	0800fcb9 	.word	0x0800fcb9
 800fc6c:	0800fcc1 	.word	0x0800fcc1
 800fc70:	0800fcc9 	.word	0x0800fcc9
 800fc74:	0800fcd1 	.word	0x0800fcd1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fc78:	88fa      	ldrh	r2, [r7, #6]
 800fc7a:	8a7b      	ldrh	r3, [r7, #18]
 800fc7c:	1ad3      	subs	r3, r2, r3
 800fc7e:	005b      	lsls	r3, r3, #1
 800fc80:	697a      	ldr	r2, [r7, #20]
 800fc82:	4413      	add	r3, r2
 800fc84:	881b      	ldrh	r3, [r3, #0]
 800fc86:	80fb      	strh	r3, [r7, #6]
 800fc88:	e027      	b.n	800fcda <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fc8a:	88fa      	ldrh	r2, [r7, #6]
 800fc8c:	8a7b      	ldrh	r3, [r7, #18]
 800fc8e:	1ad3      	subs	r3, r2, r3
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	f003 0301 	and.w	r3, r3, #1
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	88fa      	ldrh	r2, [r7, #6]
 800fc9a:	1ad3      	subs	r3, r2, r3
 800fc9c:	80fb      	strh	r3, [r7, #6]
 800fc9e:	e01c      	b.n	800fcda <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fca0:	88fb      	ldrh	r3, [r7, #6]
 800fca2:	3b10      	subs	r3, #16
 800fca4:	80fb      	strh	r3, [r7, #6]
 800fca6:	e018      	b.n	800fcda <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fca8:	88fb      	ldrh	r3, [r7, #6]
 800fcaa:	3b20      	subs	r3, #32
 800fcac:	80fb      	strh	r3, [r7, #6]
 800fcae:	e014      	b.n	800fcda <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fcb0:	88fb      	ldrh	r3, [r7, #6]
 800fcb2:	3b30      	subs	r3, #48	@ 0x30
 800fcb4:	80fb      	strh	r3, [r7, #6]
 800fcb6:	e010      	b.n	800fcda <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fcb8:	88fb      	ldrh	r3, [r7, #6]
 800fcba:	3b1a      	subs	r3, #26
 800fcbc:	80fb      	strh	r3, [r7, #6]
 800fcbe:	e00c      	b.n	800fcda <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fcc0:	88fb      	ldrh	r3, [r7, #6]
 800fcc2:	3308      	adds	r3, #8
 800fcc4:	80fb      	strh	r3, [r7, #6]
 800fcc6:	e008      	b.n	800fcda <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800fcc8:	88fb      	ldrh	r3, [r7, #6]
 800fcca:	3b50      	subs	r3, #80	@ 0x50
 800fccc:	80fb      	strh	r3, [r7, #6]
 800fcce:	e004      	b.n	800fcda <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fcd0:	88fb      	ldrh	r3, [r7, #6]
 800fcd2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800fcd6:	80fb      	strh	r3, [r7, #6]
 800fcd8:	bf00      	nop
			}
			break;
 800fcda:	e008      	b.n	800fcee <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800fcdc:	89fb      	ldrh	r3, [r7, #14]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d195      	bne.n	800fc0e <ff_wtoupper+0x1a>
 800fce2:	8a3b      	ldrh	r3, [r7, #16]
 800fce4:	005b      	lsls	r3, r3, #1
 800fce6:	697a      	ldr	r2, [r7, #20]
 800fce8:	4413      	add	r3, r2
 800fcea:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800fcec:	e78f      	b.n	800fc0e <ff_wtoupper+0x1a>
			break;
 800fcee:	bf00      	nop
	}

	return chr;
 800fcf0:	88fb      	ldrh	r3, [r7, #6]
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	371c      	adds	r7, #28
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfc:	4770      	bx	lr
 800fcfe:	bf00      	nop
 800fd00:	080113b8 	.word	0x080113b8
 800fd04:	080115ac 	.word	0x080115ac

0800fd08 <__assert_func>:
 800fd08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd0a:	4614      	mov	r4, r2
 800fd0c:	461a      	mov	r2, r3
 800fd0e:	4b09      	ldr	r3, [pc, #36]	@ (800fd34 <__assert_func+0x2c>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	4605      	mov	r5, r0
 800fd14:	68d8      	ldr	r0, [r3, #12]
 800fd16:	b14c      	cbz	r4, 800fd2c <__assert_func+0x24>
 800fd18:	4b07      	ldr	r3, [pc, #28]	@ (800fd38 <__assert_func+0x30>)
 800fd1a:	9100      	str	r1, [sp, #0]
 800fd1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd20:	4906      	ldr	r1, [pc, #24]	@ (800fd3c <__assert_func+0x34>)
 800fd22:	462b      	mov	r3, r5
 800fd24:	f000 f936 	bl	800ff94 <fiprintf>
 800fd28:	f000 fa57 	bl	80101da <abort>
 800fd2c:	4b04      	ldr	r3, [pc, #16]	@ (800fd40 <__assert_func+0x38>)
 800fd2e:	461c      	mov	r4, r3
 800fd30:	e7f3      	b.n	800fd1a <__assert_func+0x12>
 800fd32:	bf00      	nop
 800fd34:	2000006c 	.word	0x2000006c
 800fd38:	08011668 	.word	0x08011668
 800fd3c:	08011675 	.word	0x08011675
 800fd40:	080116a3 	.word	0x080116a3

0800fd44 <_strtol_l.isra.0>:
 800fd44:	2b24      	cmp	r3, #36	@ 0x24
 800fd46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd4a:	4686      	mov	lr, r0
 800fd4c:	4690      	mov	r8, r2
 800fd4e:	d801      	bhi.n	800fd54 <_strtol_l.isra.0+0x10>
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d106      	bne.n	800fd62 <_strtol_l.isra.0+0x1e>
 800fd54:	f000 fa14 	bl	8010180 <__errno>
 800fd58:	2316      	movs	r3, #22
 800fd5a:	6003      	str	r3, [r0, #0]
 800fd5c:	2000      	movs	r0, #0
 800fd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd62:	4834      	ldr	r0, [pc, #208]	@ (800fe34 <_strtol_l.isra.0+0xf0>)
 800fd64:	460d      	mov	r5, r1
 800fd66:	462a      	mov	r2, r5
 800fd68:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd6c:	5d06      	ldrb	r6, [r0, r4]
 800fd6e:	f016 0608 	ands.w	r6, r6, #8
 800fd72:	d1f8      	bne.n	800fd66 <_strtol_l.isra.0+0x22>
 800fd74:	2c2d      	cmp	r4, #45	@ 0x2d
 800fd76:	d110      	bne.n	800fd9a <_strtol_l.isra.0+0x56>
 800fd78:	782c      	ldrb	r4, [r5, #0]
 800fd7a:	2601      	movs	r6, #1
 800fd7c:	1c95      	adds	r5, r2, #2
 800fd7e:	f033 0210 	bics.w	r2, r3, #16
 800fd82:	d115      	bne.n	800fdb0 <_strtol_l.isra.0+0x6c>
 800fd84:	2c30      	cmp	r4, #48	@ 0x30
 800fd86:	d10d      	bne.n	800fda4 <_strtol_l.isra.0+0x60>
 800fd88:	782a      	ldrb	r2, [r5, #0]
 800fd8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fd8e:	2a58      	cmp	r2, #88	@ 0x58
 800fd90:	d108      	bne.n	800fda4 <_strtol_l.isra.0+0x60>
 800fd92:	786c      	ldrb	r4, [r5, #1]
 800fd94:	3502      	adds	r5, #2
 800fd96:	2310      	movs	r3, #16
 800fd98:	e00a      	b.n	800fdb0 <_strtol_l.isra.0+0x6c>
 800fd9a:	2c2b      	cmp	r4, #43	@ 0x2b
 800fd9c:	bf04      	itt	eq
 800fd9e:	782c      	ldrbeq	r4, [r5, #0]
 800fda0:	1c95      	addeq	r5, r2, #2
 800fda2:	e7ec      	b.n	800fd7e <_strtol_l.isra.0+0x3a>
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d1f6      	bne.n	800fd96 <_strtol_l.isra.0+0x52>
 800fda8:	2c30      	cmp	r4, #48	@ 0x30
 800fdaa:	bf14      	ite	ne
 800fdac:	230a      	movne	r3, #10
 800fdae:	2308      	moveq	r3, #8
 800fdb0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fdb4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fdb8:	2200      	movs	r2, #0
 800fdba:	fbbc f9f3 	udiv	r9, ip, r3
 800fdbe:	4610      	mov	r0, r2
 800fdc0:	fb03 ca19 	mls	sl, r3, r9, ip
 800fdc4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fdc8:	2f09      	cmp	r7, #9
 800fdca:	d80f      	bhi.n	800fdec <_strtol_l.isra.0+0xa8>
 800fdcc:	463c      	mov	r4, r7
 800fdce:	42a3      	cmp	r3, r4
 800fdd0:	dd1b      	ble.n	800fe0a <_strtol_l.isra.0+0xc6>
 800fdd2:	1c57      	adds	r7, r2, #1
 800fdd4:	d007      	beq.n	800fde6 <_strtol_l.isra.0+0xa2>
 800fdd6:	4581      	cmp	r9, r0
 800fdd8:	d314      	bcc.n	800fe04 <_strtol_l.isra.0+0xc0>
 800fdda:	d101      	bne.n	800fde0 <_strtol_l.isra.0+0x9c>
 800fddc:	45a2      	cmp	sl, r4
 800fdde:	db11      	blt.n	800fe04 <_strtol_l.isra.0+0xc0>
 800fde0:	fb00 4003 	mla	r0, r0, r3, r4
 800fde4:	2201      	movs	r2, #1
 800fde6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fdea:	e7eb      	b.n	800fdc4 <_strtol_l.isra.0+0x80>
 800fdec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fdf0:	2f19      	cmp	r7, #25
 800fdf2:	d801      	bhi.n	800fdf8 <_strtol_l.isra.0+0xb4>
 800fdf4:	3c37      	subs	r4, #55	@ 0x37
 800fdf6:	e7ea      	b.n	800fdce <_strtol_l.isra.0+0x8a>
 800fdf8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fdfc:	2f19      	cmp	r7, #25
 800fdfe:	d804      	bhi.n	800fe0a <_strtol_l.isra.0+0xc6>
 800fe00:	3c57      	subs	r4, #87	@ 0x57
 800fe02:	e7e4      	b.n	800fdce <_strtol_l.isra.0+0x8a>
 800fe04:	f04f 32ff 	mov.w	r2, #4294967295
 800fe08:	e7ed      	b.n	800fde6 <_strtol_l.isra.0+0xa2>
 800fe0a:	1c53      	adds	r3, r2, #1
 800fe0c:	d108      	bne.n	800fe20 <_strtol_l.isra.0+0xdc>
 800fe0e:	2322      	movs	r3, #34	@ 0x22
 800fe10:	f8ce 3000 	str.w	r3, [lr]
 800fe14:	4660      	mov	r0, ip
 800fe16:	f1b8 0f00 	cmp.w	r8, #0
 800fe1a:	d0a0      	beq.n	800fd5e <_strtol_l.isra.0+0x1a>
 800fe1c:	1e69      	subs	r1, r5, #1
 800fe1e:	e006      	b.n	800fe2e <_strtol_l.isra.0+0xea>
 800fe20:	b106      	cbz	r6, 800fe24 <_strtol_l.isra.0+0xe0>
 800fe22:	4240      	negs	r0, r0
 800fe24:	f1b8 0f00 	cmp.w	r8, #0
 800fe28:	d099      	beq.n	800fd5e <_strtol_l.isra.0+0x1a>
 800fe2a:	2a00      	cmp	r2, #0
 800fe2c:	d1f6      	bne.n	800fe1c <_strtol_l.isra.0+0xd8>
 800fe2e:	f8c8 1000 	str.w	r1, [r8]
 800fe32:	e794      	b.n	800fd5e <_strtol_l.isra.0+0x1a>
 800fe34:	080116d8 	.word	0x080116d8

0800fe38 <strtol>:
 800fe38:	4613      	mov	r3, r2
 800fe3a:	460a      	mov	r2, r1
 800fe3c:	4601      	mov	r1, r0
 800fe3e:	4802      	ldr	r0, [pc, #8]	@ (800fe48 <strtol+0x10>)
 800fe40:	6800      	ldr	r0, [r0, #0]
 800fe42:	f7ff bf7f 	b.w	800fd44 <_strtol_l.isra.0>
 800fe46:	bf00      	nop
 800fe48:	2000006c 	.word	0x2000006c

0800fe4c <std>:
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	b510      	push	{r4, lr}
 800fe50:	4604      	mov	r4, r0
 800fe52:	e9c0 3300 	strd	r3, r3, [r0]
 800fe56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe5a:	6083      	str	r3, [r0, #8]
 800fe5c:	8181      	strh	r1, [r0, #12]
 800fe5e:	6643      	str	r3, [r0, #100]	@ 0x64
 800fe60:	81c2      	strh	r2, [r0, #14]
 800fe62:	6183      	str	r3, [r0, #24]
 800fe64:	4619      	mov	r1, r3
 800fe66:	2208      	movs	r2, #8
 800fe68:	305c      	adds	r0, #92	@ 0x5c
 800fe6a:	f000 f928 	bl	80100be <memset>
 800fe6e:	4b0d      	ldr	r3, [pc, #52]	@ (800fea4 <std+0x58>)
 800fe70:	6263      	str	r3, [r4, #36]	@ 0x24
 800fe72:	4b0d      	ldr	r3, [pc, #52]	@ (800fea8 <std+0x5c>)
 800fe74:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fe76:	4b0d      	ldr	r3, [pc, #52]	@ (800feac <std+0x60>)
 800fe78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fe7a:	4b0d      	ldr	r3, [pc, #52]	@ (800feb0 <std+0x64>)
 800fe7c:	6323      	str	r3, [r4, #48]	@ 0x30
 800fe7e:	4b0d      	ldr	r3, [pc, #52]	@ (800feb4 <std+0x68>)
 800fe80:	6224      	str	r4, [r4, #32]
 800fe82:	429c      	cmp	r4, r3
 800fe84:	d006      	beq.n	800fe94 <std+0x48>
 800fe86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fe8a:	4294      	cmp	r4, r2
 800fe8c:	d002      	beq.n	800fe94 <std+0x48>
 800fe8e:	33d0      	adds	r3, #208	@ 0xd0
 800fe90:	429c      	cmp	r4, r3
 800fe92:	d105      	bne.n	800fea0 <std+0x54>
 800fe94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fe98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe9c:	f000 b99a 	b.w	80101d4 <__retarget_lock_init_recursive>
 800fea0:	bd10      	pop	{r4, pc}
 800fea2:	bf00      	nop
 800fea4:	08010039 	.word	0x08010039
 800fea8:	0801005b 	.word	0x0801005b
 800feac:	08010093 	.word	0x08010093
 800feb0:	080100b7 	.word	0x080100b7
 800feb4:	20006950 	.word	0x20006950

0800feb8 <stdio_exit_handler>:
 800feb8:	4a02      	ldr	r2, [pc, #8]	@ (800fec4 <stdio_exit_handler+0xc>)
 800feba:	4903      	ldr	r1, [pc, #12]	@ (800fec8 <stdio_exit_handler+0x10>)
 800febc:	4803      	ldr	r0, [pc, #12]	@ (800fecc <stdio_exit_handler+0x14>)
 800febe:	f000 b87b 	b.w	800ffb8 <_fwalk_sglue>
 800fec2:	bf00      	nop
 800fec4:	20000060 	.word	0x20000060
 800fec8:	08010d2d 	.word	0x08010d2d
 800fecc:	20000070 	.word	0x20000070

0800fed0 <cleanup_stdio>:
 800fed0:	6841      	ldr	r1, [r0, #4]
 800fed2:	4b0c      	ldr	r3, [pc, #48]	@ (800ff04 <cleanup_stdio+0x34>)
 800fed4:	4299      	cmp	r1, r3
 800fed6:	b510      	push	{r4, lr}
 800fed8:	4604      	mov	r4, r0
 800feda:	d001      	beq.n	800fee0 <cleanup_stdio+0x10>
 800fedc:	f000 ff26 	bl	8010d2c <_fflush_r>
 800fee0:	68a1      	ldr	r1, [r4, #8]
 800fee2:	4b09      	ldr	r3, [pc, #36]	@ (800ff08 <cleanup_stdio+0x38>)
 800fee4:	4299      	cmp	r1, r3
 800fee6:	d002      	beq.n	800feee <cleanup_stdio+0x1e>
 800fee8:	4620      	mov	r0, r4
 800feea:	f000 ff1f 	bl	8010d2c <_fflush_r>
 800feee:	68e1      	ldr	r1, [r4, #12]
 800fef0:	4b06      	ldr	r3, [pc, #24]	@ (800ff0c <cleanup_stdio+0x3c>)
 800fef2:	4299      	cmp	r1, r3
 800fef4:	d004      	beq.n	800ff00 <cleanup_stdio+0x30>
 800fef6:	4620      	mov	r0, r4
 800fef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fefc:	f000 bf16 	b.w	8010d2c <_fflush_r>
 800ff00:	bd10      	pop	{r4, pc}
 800ff02:	bf00      	nop
 800ff04:	20006950 	.word	0x20006950
 800ff08:	200069b8 	.word	0x200069b8
 800ff0c:	20006a20 	.word	0x20006a20

0800ff10 <global_stdio_init.part.0>:
 800ff10:	b510      	push	{r4, lr}
 800ff12:	4b0b      	ldr	r3, [pc, #44]	@ (800ff40 <global_stdio_init.part.0+0x30>)
 800ff14:	4c0b      	ldr	r4, [pc, #44]	@ (800ff44 <global_stdio_init.part.0+0x34>)
 800ff16:	4a0c      	ldr	r2, [pc, #48]	@ (800ff48 <global_stdio_init.part.0+0x38>)
 800ff18:	601a      	str	r2, [r3, #0]
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	2104      	movs	r1, #4
 800ff20:	f7ff ff94 	bl	800fe4c <std>
 800ff24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ff28:	2201      	movs	r2, #1
 800ff2a:	2109      	movs	r1, #9
 800ff2c:	f7ff ff8e 	bl	800fe4c <std>
 800ff30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ff34:	2202      	movs	r2, #2
 800ff36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff3a:	2112      	movs	r1, #18
 800ff3c:	f7ff bf86 	b.w	800fe4c <std>
 800ff40:	20006a88 	.word	0x20006a88
 800ff44:	20006950 	.word	0x20006950
 800ff48:	0800feb9 	.word	0x0800feb9

0800ff4c <__sfp_lock_acquire>:
 800ff4c:	4801      	ldr	r0, [pc, #4]	@ (800ff54 <__sfp_lock_acquire+0x8>)
 800ff4e:	f000 b942 	b.w	80101d6 <__retarget_lock_acquire_recursive>
 800ff52:	bf00      	nop
 800ff54:	20006a91 	.word	0x20006a91

0800ff58 <__sfp_lock_release>:
 800ff58:	4801      	ldr	r0, [pc, #4]	@ (800ff60 <__sfp_lock_release+0x8>)
 800ff5a:	f000 b93d 	b.w	80101d8 <__retarget_lock_release_recursive>
 800ff5e:	bf00      	nop
 800ff60:	20006a91 	.word	0x20006a91

0800ff64 <__sinit>:
 800ff64:	b510      	push	{r4, lr}
 800ff66:	4604      	mov	r4, r0
 800ff68:	f7ff fff0 	bl	800ff4c <__sfp_lock_acquire>
 800ff6c:	6a23      	ldr	r3, [r4, #32]
 800ff6e:	b11b      	cbz	r3, 800ff78 <__sinit+0x14>
 800ff70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff74:	f7ff bff0 	b.w	800ff58 <__sfp_lock_release>
 800ff78:	4b04      	ldr	r3, [pc, #16]	@ (800ff8c <__sinit+0x28>)
 800ff7a:	6223      	str	r3, [r4, #32]
 800ff7c:	4b04      	ldr	r3, [pc, #16]	@ (800ff90 <__sinit+0x2c>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d1f5      	bne.n	800ff70 <__sinit+0xc>
 800ff84:	f7ff ffc4 	bl	800ff10 <global_stdio_init.part.0>
 800ff88:	e7f2      	b.n	800ff70 <__sinit+0xc>
 800ff8a:	bf00      	nop
 800ff8c:	0800fed1 	.word	0x0800fed1
 800ff90:	20006a88 	.word	0x20006a88

0800ff94 <fiprintf>:
 800ff94:	b40e      	push	{r1, r2, r3}
 800ff96:	b503      	push	{r0, r1, lr}
 800ff98:	4601      	mov	r1, r0
 800ff9a:	ab03      	add	r3, sp, #12
 800ff9c:	4805      	ldr	r0, [pc, #20]	@ (800ffb4 <fiprintf+0x20>)
 800ff9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffa2:	6800      	ldr	r0, [r0, #0]
 800ffa4:	9301      	str	r3, [sp, #4]
 800ffa6:	f000 fb99 	bl	80106dc <_vfiprintf_r>
 800ffaa:	b002      	add	sp, #8
 800ffac:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffb0:	b003      	add	sp, #12
 800ffb2:	4770      	bx	lr
 800ffb4:	2000006c 	.word	0x2000006c

0800ffb8 <_fwalk_sglue>:
 800ffb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffbc:	4607      	mov	r7, r0
 800ffbe:	4688      	mov	r8, r1
 800ffc0:	4614      	mov	r4, r2
 800ffc2:	2600      	movs	r6, #0
 800ffc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ffc8:	f1b9 0901 	subs.w	r9, r9, #1
 800ffcc:	d505      	bpl.n	800ffda <_fwalk_sglue+0x22>
 800ffce:	6824      	ldr	r4, [r4, #0]
 800ffd0:	2c00      	cmp	r4, #0
 800ffd2:	d1f7      	bne.n	800ffc4 <_fwalk_sglue+0xc>
 800ffd4:	4630      	mov	r0, r6
 800ffd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffda:	89ab      	ldrh	r3, [r5, #12]
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d907      	bls.n	800fff0 <_fwalk_sglue+0x38>
 800ffe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	d003      	beq.n	800fff0 <_fwalk_sglue+0x38>
 800ffe8:	4629      	mov	r1, r5
 800ffea:	4638      	mov	r0, r7
 800ffec:	47c0      	blx	r8
 800ffee:	4306      	orrs	r6, r0
 800fff0:	3568      	adds	r5, #104	@ 0x68
 800fff2:	e7e9      	b.n	800ffc8 <_fwalk_sglue+0x10>

0800fff4 <siprintf>:
 800fff4:	b40e      	push	{r1, r2, r3}
 800fff6:	b510      	push	{r4, lr}
 800fff8:	b09d      	sub	sp, #116	@ 0x74
 800fffa:	ab1f      	add	r3, sp, #124	@ 0x7c
 800fffc:	9002      	str	r0, [sp, #8]
 800fffe:	9006      	str	r0, [sp, #24]
 8010000:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010004:	480a      	ldr	r0, [pc, #40]	@ (8010030 <siprintf+0x3c>)
 8010006:	9107      	str	r1, [sp, #28]
 8010008:	9104      	str	r1, [sp, #16]
 801000a:	490a      	ldr	r1, [pc, #40]	@ (8010034 <siprintf+0x40>)
 801000c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010010:	9105      	str	r1, [sp, #20]
 8010012:	2400      	movs	r4, #0
 8010014:	a902      	add	r1, sp, #8
 8010016:	6800      	ldr	r0, [r0, #0]
 8010018:	9301      	str	r3, [sp, #4]
 801001a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801001c:	f000 fa38 	bl	8010490 <_svfiprintf_r>
 8010020:	9b02      	ldr	r3, [sp, #8]
 8010022:	701c      	strb	r4, [r3, #0]
 8010024:	b01d      	add	sp, #116	@ 0x74
 8010026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801002a:	b003      	add	sp, #12
 801002c:	4770      	bx	lr
 801002e:	bf00      	nop
 8010030:	2000006c 	.word	0x2000006c
 8010034:	ffff0208 	.word	0xffff0208

08010038 <__sread>:
 8010038:	b510      	push	{r4, lr}
 801003a:	460c      	mov	r4, r1
 801003c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010040:	f000 f87a 	bl	8010138 <_read_r>
 8010044:	2800      	cmp	r0, #0
 8010046:	bfab      	itete	ge
 8010048:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801004a:	89a3      	ldrhlt	r3, [r4, #12]
 801004c:	181b      	addge	r3, r3, r0
 801004e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010052:	bfac      	ite	ge
 8010054:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010056:	81a3      	strhlt	r3, [r4, #12]
 8010058:	bd10      	pop	{r4, pc}

0801005a <__swrite>:
 801005a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801005e:	461f      	mov	r7, r3
 8010060:	898b      	ldrh	r3, [r1, #12]
 8010062:	05db      	lsls	r3, r3, #23
 8010064:	4605      	mov	r5, r0
 8010066:	460c      	mov	r4, r1
 8010068:	4616      	mov	r6, r2
 801006a:	d505      	bpl.n	8010078 <__swrite+0x1e>
 801006c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010070:	2302      	movs	r3, #2
 8010072:	2200      	movs	r2, #0
 8010074:	f000 f84e 	bl	8010114 <_lseek_r>
 8010078:	89a3      	ldrh	r3, [r4, #12]
 801007a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801007e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010082:	81a3      	strh	r3, [r4, #12]
 8010084:	4632      	mov	r2, r6
 8010086:	463b      	mov	r3, r7
 8010088:	4628      	mov	r0, r5
 801008a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801008e:	f000 b865 	b.w	801015c <_write_r>

08010092 <__sseek>:
 8010092:	b510      	push	{r4, lr}
 8010094:	460c      	mov	r4, r1
 8010096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801009a:	f000 f83b 	bl	8010114 <_lseek_r>
 801009e:	1c43      	adds	r3, r0, #1
 80100a0:	89a3      	ldrh	r3, [r4, #12]
 80100a2:	bf15      	itete	ne
 80100a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80100a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80100aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80100ae:	81a3      	strheq	r3, [r4, #12]
 80100b0:	bf18      	it	ne
 80100b2:	81a3      	strhne	r3, [r4, #12]
 80100b4:	bd10      	pop	{r4, pc}

080100b6 <__sclose>:
 80100b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100ba:	f000 b81b 	b.w	80100f4 <_close_r>

080100be <memset>:
 80100be:	4402      	add	r2, r0
 80100c0:	4603      	mov	r3, r0
 80100c2:	4293      	cmp	r3, r2
 80100c4:	d100      	bne.n	80100c8 <memset+0xa>
 80100c6:	4770      	bx	lr
 80100c8:	f803 1b01 	strb.w	r1, [r3], #1
 80100cc:	e7f9      	b.n	80100c2 <memset+0x4>

080100ce <strncpy>:
 80100ce:	b510      	push	{r4, lr}
 80100d0:	3901      	subs	r1, #1
 80100d2:	4603      	mov	r3, r0
 80100d4:	b132      	cbz	r2, 80100e4 <strncpy+0x16>
 80100d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80100da:	f803 4b01 	strb.w	r4, [r3], #1
 80100de:	3a01      	subs	r2, #1
 80100e0:	2c00      	cmp	r4, #0
 80100e2:	d1f7      	bne.n	80100d4 <strncpy+0x6>
 80100e4:	441a      	add	r2, r3
 80100e6:	2100      	movs	r1, #0
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d100      	bne.n	80100ee <strncpy+0x20>
 80100ec:	bd10      	pop	{r4, pc}
 80100ee:	f803 1b01 	strb.w	r1, [r3], #1
 80100f2:	e7f9      	b.n	80100e8 <strncpy+0x1a>

080100f4 <_close_r>:
 80100f4:	b538      	push	{r3, r4, r5, lr}
 80100f6:	4d06      	ldr	r5, [pc, #24]	@ (8010110 <_close_r+0x1c>)
 80100f8:	2300      	movs	r3, #0
 80100fa:	4604      	mov	r4, r0
 80100fc:	4608      	mov	r0, r1
 80100fe:	602b      	str	r3, [r5, #0]
 8010100:	f7f2 ffa9 	bl	8003056 <_close>
 8010104:	1c43      	adds	r3, r0, #1
 8010106:	d102      	bne.n	801010e <_close_r+0x1a>
 8010108:	682b      	ldr	r3, [r5, #0]
 801010a:	b103      	cbz	r3, 801010e <_close_r+0x1a>
 801010c:	6023      	str	r3, [r4, #0]
 801010e:	bd38      	pop	{r3, r4, r5, pc}
 8010110:	20006a8c 	.word	0x20006a8c

08010114 <_lseek_r>:
 8010114:	b538      	push	{r3, r4, r5, lr}
 8010116:	4d07      	ldr	r5, [pc, #28]	@ (8010134 <_lseek_r+0x20>)
 8010118:	4604      	mov	r4, r0
 801011a:	4608      	mov	r0, r1
 801011c:	4611      	mov	r1, r2
 801011e:	2200      	movs	r2, #0
 8010120:	602a      	str	r2, [r5, #0]
 8010122:	461a      	mov	r2, r3
 8010124:	f7f2 ffbe 	bl	80030a4 <_lseek>
 8010128:	1c43      	adds	r3, r0, #1
 801012a:	d102      	bne.n	8010132 <_lseek_r+0x1e>
 801012c:	682b      	ldr	r3, [r5, #0]
 801012e:	b103      	cbz	r3, 8010132 <_lseek_r+0x1e>
 8010130:	6023      	str	r3, [r4, #0]
 8010132:	bd38      	pop	{r3, r4, r5, pc}
 8010134:	20006a8c 	.word	0x20006a8c

08010138 <_read_r>:
 8010138:	b538      	push	{r3, r4, r5, lr}
 801013a:	4d07      	ldr	r5, [pc, #28]	@ (8010158 <_read_r+0x20>)
 801013c:	4604      	mov	r4, r0
 801013e:	4608      	mov	r0, r1
 8010140:	4611      	mov	r1, r2
 8010142:	2200      	movs	r2, #0
 8010144:	602a      	str	r2, [r5, #0]
 8010146:	461a      	mov	r2, r3
 8010148:	f7f1 fe10 	bl	8001d6c <_read>
 801014c:	1c43      	adds	r3, r0, #1
 801014e:	d102      	bne.n	8010156 <_read_r+0x1e>
 8010150:	682b      	ldr	r3, [r5, #0]
 8010152:	b103      	cbz	r3, 8010156 <_read_r+0x1e>
 8010154:	6023      	str	r3, [r4, #0]
 8010156:	bd38      	pop	{r3, r4, r5, pc}
 8010158:	20006a8c 	.word	0x20006a8c

0801015c <_write_r>:
 801015c:	b538      	push	{r3, r4, r5, lr}
 801015e:	4d07      	ldr	r5, [pc, #28]	@ (801017c <_write_r+0x20>)
 8010160:	4604      	mov	r4, r0
 8010162:	4608      	mov	r0, r1
 8010164:	4611      	mov	r1, r2
 8010166:	2200      	movs	r2, #0
 8010168:	602a      	str	r2, [r5, #0]
 801016a:	461a      	mov	r2, r3
 801016c:	f7f1 fe06 	bl	8001d7c <_write>
 8010170:	1c43      	adds	r3, r0, #1
 8010172:	d102      	bne.n	801017a <_write_r+0x1e>
 8010174:	682b      	ldr	r3, [r5, #0]
 8010176:	b103      	cbz	r3, 801017a <_write_r+0x1e>
 8010178:	6023      	str	r3, [r4, #0]
 801017a:	bd38      	pop	{r3, r4, r5, pc}
 801017c:	20006a8c 	.word	0x20006a8c

08010180 <__errno>:
 8010180:	4b01      	ldr	r3, [pc, #4]	@ (8010188 <__errno+0x8>)
 8010182:	6818      	ldr	r0, [r3, #0]
 8010184:	4770      	bx	lr
 8010186:	bf00      	nop
 8010188:	2000006c 	.word	0x2000006c

0801018c <__libc_init_array>:
 801018c:	b570      	push	{r4, r5, r6, lr}
 801018e:	4d0d      	ldr	r5, [pc, #52]	@ (80101c4 <__libc_init_array+0x38>)
 8010190:	4c0d      	ldr	r4, [pc, #52]	@ (80101c8 <__libc_init_array+0x3c>)
 8010192:	1b64      	subs	r4, r4, r5
 8010194:	10a4      	asrs	r4, r4, #2
 8010196:	2600      	movs	r6, #0
 8010198:	42a6      	cmp	r6, r4
 801019a:	d109      	bne.n	80101b0 <__libc_init_array+0x24>
 801019c:	4d0b      	ldr	r5, [pc, #44]	@ (80101cc <__libc_init_array+0x40>)
 801019e:	4c0c      	ldr	r4, [pc, #48]	@ (80101d0 <__libc_init_array+0x44>)
 80101a0:	f000 ffb6 	bl	8011110 <_init>
 80101a4:	1b64      	subs	r4, r4, r5
 80101a6:	10a4      	asrs	r4, r4, #2
 80101a8:	2600      	movs	r6, #0
 80101aa:	42a6      	cmp	r6, r4
 80101ac:	d105      	bne.n	80101ba <__libc_init_array+0x2e>
 80101ae:	bd70      	pop	{r4, r5, r6, pc}
 80101b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80101b4:	4798      	blx	r3
 80101b6:	3601      	adds	r6, #1
 80101b8:	e7ee      	b.n	8010198 <__libc_init_array+0xc>
 80101ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80101be:	4798      	blx	r3
 80101c0:	3601      	adds	r6, #1
 80101c2:	e7f2      	b.n	80101aa <__libc_init_array+0x1e>
 80101c4:	080117e0 	.word	0x080117e0
 80101c8:	080117e0 	.word	0x080117e0
 80101cc:	080117e0 	.word	0x080117e0
 80101d0:	080117e4 	.word	0x080117e4

080101d4 <__retarget_lock_init_recursive>:
 80101d4:	4770      	bx	lr

080101d6 <__retarget_lock_acquire_recursive>:
 80101d6:	4770      	bx	lr

080101d8 <__retarget_lock_release_recursive>:
 80101d8:	4770      	bx	lr

080101da <abort>:
 80101da:	b508      	push	{r3, lr}
 80101dc:	2006      	movs	r0, #6
 80101de:	f000 fea3 	bl	8010f28 <raise>
 80101e2:	2001      	movs	r0, #1
 80101e4:	f7f2 ff2c 	bl	8003040 <_exit>

080101e8 <_free_r>:
 80101e8:	b538      	push	{r3, r4, r5, lr}
 80101ea:	4605      	mov	r5, r0
 80101ec:	2900      	cmp	r1, #0
 80101ee:	d041      	beq.n	8010274 <_free_r+0x8c>
 80101f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101f4:	1f0c      	subs	r4, r1, #4
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	bfb8      	it	lt
 80101fa:	18e4      	addlt	r4, r4, r3
 80101fc:	f000 f8e0 	bl	80103c0 <__malloc_lock>
 8010200:	4a1d      	ldr	r2, [pc, #116]	@ (8010278 <_free_r+0x90>)
 8010202:	6813      	ldr	r3, [r2, #0]
 8010204:	b933      	cbnz	r3, 8010214 <_free_r+0x2c>
 8010206:	6063      	str	r3, [r4, #4]
 8010208:	6014      	str	r4, [r2, #0]
 801020a:	4628      	mov	r0, r5
 801020c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010210:	f000 b8dc 	b.w	80103cc <__malloc_unlock>
 8010214:	42a3      	cmp	r3, r4
 8010216:	d908      	bls.n	801022a <_free_r+0x42>
 8010218:	6820      	ldr	r0, [r4, #0]
 801021a:	1821      	adds	r1, r4, r0
 801021c:	428b      	cmp	r3, r1
 801021e:	bf01      	itttt	eq
 8010220:	6819      	ldreq	r1, [r3, #0]
 8010222:	685b      	ldreq	r3, [r3, #4]
 8010224:	1809      	addeq	r1, r1, r0
 8010226:	6021      	streq	r1, [r4, #0]
 8010228:	e7ed      	b.n	8010206 <_free_r+0x1e>
 801022a:	461a      	mov	r2, r3
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	b10b      	cbz	r3, 8010234 <_free_r+0x4c>
 8010230:	42a3      	cmp	r3, r4
 8010232:	d9fa      	bls.n	801022a <_free_r+0x42>
 8010234:	6811      	ldr	r1, [r2, #0]
 8010236:	1850      	adds	r0, r2, r1
 8010238:	42a0      	cmp	r0, r4
 801023a:	d10b      	bne.n	8010254 <_free_r+0x6c>
 801023c:	6820      	ldr	r0, [r4, #0]
 801023e:	4401      	add	r1, r0
 8010240:	1850      	adds	r0, r2, r1
 8010242:	4283      	cmp	r3, r0
 8010244:	6011      	str	r1, [r2, #0]
 8010246:	d1e0      	bne.n	801020a <_free_r+0x22>
 8010248:	6818      	ldr	r0, [r3, #0]
 801024a:	685b      	ldr	r3, [r3, #4]
 801024c:	6053      	str	r3, [r2, #4]
 801024e:	4408      	add	r0, r1
 8010250:	6010      	str	r0, [r2, #0]
 8010252:	e7da      	b.n	801020a <_free_r+0x22>
 8010254:	d902      	bls.n	801025c <_free_r+0x74>
 8010256:	230c      	movs	r3, #12
 8010258:	602b      	str	r3, [r5, #0]
 801025a:	e7d6      	b.n	801020a <_free_r+0x22>
 801025c:	6820      	ldr	r0, [r4, #0]
 801025e:	1821      	adds	r1, r4, r0
 8010260:	428b      	cmp	r3, r1
 8010262:	bf04      	itt	eq
 8010264:	6819      	ldreq	r1, [r3, #0]
 8010266:	685b      	ldreq	r3, [r3, #4]
 8010268:	6063      	str	r3, [r4, #4]
 801026a:	bf04      	itt	eq
 801026c:	1809      	addeq	r1, r1, r0
 801026e:	6021      	streq	r1, [r4, #0]
 8010270:	6054      	str	r4, [r2, #4]
 8010272:	e7ca      	b.n	801020a <_free_r+0x22>
 8010274:	bd38      	pop	{r3, r4, r5, pc}
 8010276:	bf00      	nop
 8010278:	20006a98 	.word	0x20006a98

0801027c <sbrk_aligned>:
 801027c:	b570      	push	{r4, r5, r6, lr}
 801027e:	4e0f      	ldr	r6, [pc, #60]	@ (80102bc <sbrk_aligned+0x40>)
 8010280:	460c      	mov	r4, r1
 8010282:	6831      	ldr	r1, [r6, #0]
 8010284:	4605      	mov	r5, r0
 8010286:	b911      	cbnz	r1, 801028e <sbrk_aligned+0x12>
 8010288:	f000 fe6a 	bl	8010f60 <_sbrk_r>
 801028c:	6030      	str	r0, [r6, #0]
 801028e:	4621      	mov	r1, r4
 8010290:	4628      	mov	r0, r5
 8010292:	f000 fe65 	bl	8010f60 <_sbrk_r>
 8010296:	1c43      	adds	r3, r0, #1
 8010298:	d103      	bne.n	80102a2 <sbrk_aligned+0x26>
 801029a:	f04f 34ff 	mov.w	r4, #4294967295
 801029e:	4620      	mov	r0, r4
 80102a0:	bd70      	pop	{r4, r5, r6, pc}
 80102a2:	1cc4      	adds	r4, r0, #3
 80102a4:	f024 0403 	bic.w	r4, r4, #3
 80102a8:	42a0      	cmp	r0, r4
 80102aa:	d0f8      	beq.n	801029e <sbrk_aligned+0x22>
 80102ac:	1a21      	subs	r1, r4, r0
 80102ae:	4628      	mov	r0, r5
 80102b0:	f000 fe56 	bl	8010f60 <_sbrk_r>
 80102b4:	3001      	adds	r0, #1
 80102b6:	d1f2      	bne.n	801029e <sbrk_aligned+0x22>
 80102b8:	e7ef      	b.n	801029a <sbrk_aligned+0x1e>
 80102ba:	bf00      	nop
 80102bc:	20006a94 	.word	0x20006a94

080102c0 <_malloc_r>:
 80102c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102c4:	1ccd      	adds	r5, r1, #3
 80102c6:	f025 0503 	bic.w	r5, r5, #3
 80102ca:	3508      	adds	r5, #8
 80102cc:	2d0c      	cmp	r5, #12
 80102ce:	bf38      	it	cc
 80102d0:	250c      	movcc	r5, #12
 80102d2:	2d00      	cmp	r5, #0
 80102d4:	4606      	mov	r6, r0
 80102d6:	db01      	blt.n	80102dc <_malloc_r+0x1c>
 80102d8:	42a9      	cmp	r1, r5
 80102da:	d904      	bls.n	80102e6 <_malloc_r+0x26>
 80102dc:	230c      	movs	r3, #12
 80102de:	6033      	str	r3, [r6, #0]
 80102e0:	2000      	movs	r0, #0
 80102e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80103bc <_malloc_r+0xfc>
 80102ea:	f000 f869 	bl	80103c0 <__malloc_lock>
 80102ee:	f8d8 3000 	ldr.w	r3, [r8]
 80102f2:	461c      	mov	r4, r3
 80102f4:	bb44      	cbnz	r4, 8010348 <_malloc_r+0x88>
 80102f6:	4629      	mov	r1, r5
 80102f8:	4630      	mov	r0, r6
 80102fa:	f7ff ffbf 	bl	801027c <sbrk_aligned>
 80102fe:	1c43      	adds	r3, r0, #1
 8010300:	4604      	mov	r4, r0
 8010302:	d158      	bne.n	80103b6 <_malloc_r+0xf6>
 8010304:	f8d8 4000 	ldr.w	r4, [r8]
 8010308:	4627      	mov	r7, r4
 801030a:	2f00      	cmp	r7, #0
 801030c:	d143      	bne.n	8010396 <_malloc_r+0xd6>
 801030e:	2c00      	cmp	r4, #0
 8010310:	d04b      	beq.n	80103aa <_malloc_r+0xea>
 8010312:	6823      	ldr	r3, [r4, #0]
 8010314:	4639      	mov	r1, r7
 8010316:	4630      	mov	r0, r6
 8010318:	eb04 0903 	add.w	r9, r4, r3
 801031c:	f000 fe20 	bl	8010f60 <_sbrk_r>
 8010320:	4581      	cmp	r9, r0
 8010322:	d142      	bne.n	80103aa <_malloc_r+0xea>
 8010324:	6821      	ldr	r1, [r4, #0]
 8010326:	1a6d      	subs	r5, r5, r1
 8010328:	4629      	mov	r1, r5
 801032a:	4630      	mov	r0, r6
 801032c:	f7ff ffa6 	bl	801027c <sbrk_aligned>
 8010330:	3001      	adds	r0, #1
 8010332:	d03a      	beq.n	80103aa <_malloc_r+0xea>
 8010334:	6823      	ldr	r3, [r4, #0]
 8010336:	442b      	add	r3, r5
 8010338:	6023      	str	r3, [r4, #0]
 801033a:	f8d8 3000 	ldr.w	r3, [r8]
 801033e:	685a      	ldr	r2, [r3, #4]
 8010340:	bb62      	cbnz	r2, 801039c <_malloc_r+0xdc>
 8010342:	f8c8 7000 	str.w	r7, [r8]
 8010346:	e00f      	b.n	8010368 <_malloc_r+0xa8>
 8010348:	6822      	ldr	r2, [r4, #0]
 801034a:	1b52      	subs	r2, r2, r5
 801034c:	d420      	bmi.n	8010390 <_malloc_r+0xd0>
 801034e:	2a0b      	cmp	r2, #11
 8010350:	d917      	bls.n	8010382 <_malloc_r+0xc2>
 8010352:	1961      	adds	r1, r4, r5
 8010354:	42a3      	cmp	r3, r4
 8010356:	6025      	str	r5, [r4, #0]
 8010358:	bf18      	it	ne
 801035a:	6059      	strne	r1, [r3, #4]
 801035c:	6863      	ldr	r3, [r4, #4]
 801035e:	bf08      	it	eq
 8010360:	f8c8 1000 	streq.w	r1, [r8]
 8010364:	5162      	str	r2, [r4, r5]
 8010366:	604b      	str	r3, [r1, #4]
 8010368:	4630      	mov	r0, r6
 801036a:	f000 f82f 	bl	80103cc <__malloc_unlock>
 801036e:	f104 000b 	add.w	r0, r4, #11
 8010372:	1d23      	adds	r3, r4, #4
 8010374:	f020 0007 	bic.w	r0, r0, #7
 8010378:	1ac2      	subs	r2, r0, r3
 801037a:	bf1c      	itt	ne
 801037c:	1a1b      	subne	r3, r3, r0
 801037e:	50a3      	strne	r3, [r4, r2]
 8010380:	e7af      	b.n	80102e2 <_malloc_r+0x22>
 8010382:	6862      	ldr	r2, [r4, #4]
 8010384:	42a3      	cmp	r3, r4
 8010386:	bf0c      	ite	eq
 8010388:	f8c8 2000 	streq.w	r2, [r8]
 801038c:	605a      	strne	r2, [r3, #4]
 801038e:	e7eb      	b.n	8010368 <_malloc_r+0xa8>
 8010390:	4623      	mov	r3, r4
 8010392:	6864      	ldr	r4, [r4, #4]
 8010394:	e7ae      	b.n	80102f4 <_malloc_r+0x34>
 8010396:	463c      	mov	r4, r7
 8010398:	687f      	ldr	r7, [r7, #4]
 801039a:	e7b6      	b.n	801030a <_malloc_r+0x4a>
 801039c:	461a      	mov	r2, r3
 801039e:	685b      	ldr	r3, [r3, #4]
 80103a0:	42a3      	cmp	r3, r4
 80103a2:	d1fb      	bne.n	801039c <_malloc_r+0xdc>
 80103a4:	2300      	movs	r3, #0
 80103a6:	6053      	str	r3, [r2, #4]
 80103a8:	e7de      	b.n	8010368 <_malloc_r+0xa8>
 80103aa:	230c      	movs	r3, #12
 80103ac:	6033      	str	r3, [r6, #0]
 80103ae:	4630      	mov	r0, r6
 80103b0:	f000 f80c 	bl	80103cc <__malloc_unlock>
 80103b4:	e794      	b.n	80102e0 <_malloc_r+0x20>
 80103b6:	6005      	str	r5, [r0, #0]
 80103b8:	e7d6      	b.n	8010368 <_malloc_r+0xa8>
 80103ba:	bf00      	nop
 80103bc:	20006a98 	.word	0x20006a98

080103c0 <__malloc_lock>:
 80103c0:	4801      	ldr	r0, [pc, #4]	@ (80103c8 <__malloc_lock+0x8>)
 80103c2:	f7ff bf08 	b.w	80101d6 <__retarget_lock_acquire_recursive>
 80103c6:	bf00      	nop
 80103c8:	20006a90 	.word	0x20006a90

080103cc <__malloc_unlock>:
 80103cc:	4801      	ldr	r0, [pc, #4]	@ (80103d4 <__malloc_unlock+0x8>)
 80103ce:	f7ff bf03 	b.w	80101d8 <__retarget_lock_release_recursive>
 80103d2:	bf00      	nop
 80103d4:	20006a90 	.word	0x20006a90

080103d8 <__ssputs_r>:
 80103d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103dc:	688e      	ldr	r6, [r1, #8]
 80103de:	461f      	mov	r7, r3
 80103e0:	42be      	cmp	r6, r7
 80103e2:	680b      	ldr	r3, [r1, #0]
 80103e4:	4682      	mov	sl, r0
 80103e6:	460c      	mov	r4, r1
 80103e8:	4690      	mov	r8, r2
 80103ea:	d82d      	bhi.n	8010448 <__ssputs_r+0x70>
 80103ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80103f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80103f4:	d026      	beq.n	8010444 <__ssputs_r+0x6c>
 80103f6:	6965      	ldr	r5, [r4, #20]
 80103f8:	6909      	ldr	r1, [r1, #16]
 80103fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80103fe:	eba3 0901 	sub.w	r9, r3, r1
 8010402:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010406:	1c7b      	adds	r3, r7, #1
 8010408:	444b      	add	r3, r9
 801040a:	106d      	asrs	r5, r5, #1
 801040c:	429d      	cmp	r5, r3
 801040e:	bf38      	it	cc
 8010410:	461d      	movcc	r5, r3
 8010412:	0553      	lsls	r3, r2, #21
 8010414:	d527      	bpl.n	8010466 <__ssputs_r+0x8e>
 8010416:	4629      	mov	r1, r5
 8010418:	f7ff ff52 	bl	80102c0 <_malloc_r>
 801041c:	4606      	mov	r6, r0
 801041e:	b360      	cbz	r0, 801047a <__ssputs_r+0xa2>
 8010420:	6921      	ldr	r1, [r4, #16]
 8010422:	464a      	mov	r2, r9
 8010424:	f000 fdac 	bl	8010f80 <memcpy>
 8010428:	89a3      	ldrh	r3, [r4, #12]
 801042a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801042e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010432:	81a3      	strh	r3, [r4, #12]
 8010434:	6126      	str	r6, [r4, #16]
 8010436:	6165      	str	r5, [r4, #20]
 8010438:	444e      	add	r6, r9
 801043a:	eba5 0509 	sub.w	r5, r5, r9
 801043e:	6026      	str	r6, [r4, #0]
 8010440:	60a5      	str	r5, [r4, #8]
 8010442:	463e      	mov	r6, r7
 8010444:	42be      	cmp	r6, r7
 8010446:	d900      	bls.n	801044a <__ssputs_r+0x72>
 8010448:	463e      	mov	r6, r7
 801044a:	6820      	ldr	r0, [r4, #0]
 801044c:	4632      	mov	r2, r6
 801044e:	4641      	mov	r1, r8
 8010450:	f000 fd28 	bl	8010ea4 <memmove>
 8010454:	68a3      	ldr	r3, [r4, #8]
 8010456:	1b9b      	subs	r3, r3, r6
 8010458:	60a3      	str	r3, [r4, #8]
 801045a:	6823      	ldr	r3, [r4, #0]
 801045c:	4433      	add	r3, r6
 801045e:	6023      	str	r3, [r4, #0]
 8010460:	2000      	movs	r0, #0
 8010462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010466:	462a      	mov	r2, r5
 8010468:	f000 fd98 	bl	8010f9c <_realloc_r>
 801046c:	4606      	mov	r6, r0
 801046e:	2800      	cmp	r0, #0
 8010470:	d1e0      	bne.n	8010434 <__ssputs_r+0x5c>
 8010472:	6921      	ldr	r1, [r4, #16]
 8010474:	4650      	mov	r0, sl
 8010476:	f7ff feb7 	bl	80101e8 <_free_r>
 801047a:	230c      	movs	r3, #12
 801047c:	f8ca 3000 	str.w	r3, [sl]
 8010480:	89a3      	ldrh	r3, [r4, #12]
 8010482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010486:	81a3      	strh	r3, [r4, #12]
 8010488:	f04f 30ff 	mov.w	r0, #4294967295
 801048c:	e7e9      	b.n	8010462 <__ssputs_r+0x8a>
	...

08010490 <_svfiprintf_r>:
 8010490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010494:	4698      	mov	r8, r3
 8010496:	898b      	ldrh	r3, [r1, #12]
 8010498:	061b      	lsls	r3, r3, #24
 801049a:	b09d      	sub	sp, #116	@ 0x74
 801049c:	4607      	mov	r7, r0
 801049e:	460d      	mov	r5, r1
 80104a0:	4614      	mov	r4, r2
 80104a2:	d510      	bpl.n	80104c6 <_svfiprintf_r+0x36>
 80104a4:	690b      	ldr	r3, [r1, #16]
 80104a6:	b973      	cbnz	r3, 80104c6 <_svfiprintf_r+0x36>
 80104a8:	2140      	movs	r1, #64	@ 0x40
 80104aa:	f7ff ff09 	bl	80102c0 <_malloc_r>
 80104ae:	6028      	str	r0, [r5, #0]
 80104b0:	6128      	str	r0, [r5, #16]
 80104b2:	b930      	cbnz	r0, 80104c2 <_svfiprintf_r+0x32>
 80104b4:	230c      	movs	r3, #12
 80104b6:	603b      	str	r3, [r7, #0]
 80104b8:	f04f 30ff 	mov.w	r0, #4294967295
 80104bc:	b01d      	add	sp, #116	@ 0x74
 80104be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104c2:	2340      	movs	r3, #64	@ 0x40
 80104c4:	616b      	str	r3, [r5, #20]
 80104c6:	2300      	movs	r3, #0
 80104c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80104ca:	2320      	movs	r3, #32
 80104cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80104d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80104d4:	2330      	movs	r3, #48	@ 0x30
 80104d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010674 <_svfiprintf_r+0x1e4>
 80104da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80104de:	f04f 0901 	mov.w	r9, #1
 80104e2:	4623      	mov	r3, r4
 80104e4:	469a      	mov	sl, r3
 80104e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104ea:	b10a      	cbz	r2, 80104f0 <_svfiprintf_r+0x60>
 80104ec:	2a25      	cmp	r2, #37	@ 0x25
 80104ee:	d1f9      	bne.n	80104e4 <_svfiprintf_r+0x54>
 80104f0:	ebba 0b04 	subs.w	fp, sl, r4
 80104f4:	d00b      	beq.n	801050e <_svfiprintf_r+0x7e>
 80104f6:	465b      	mov	r3, fp
 80104f8:	4622      	mov	r2, r4
 80104fa:	4629      	mov	r1, r5
 80104fc:	4638      	mov	r0, r7
 80104fe:	f7ff ff6b 	bl	80103d8 <__ssputs_r>
 8010502:	3001      	adds	r0, #1
 8010504:	f000 80a7 	beq.w	8010656 <_svfiprintf_r+0x1c6>
 8010508:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801050a:	445a      	add	r2, fp
 801050c:	9209      	str	r2, [sp, #36]	@ 0x24
 801050e:	f89a 3000 	ldrb.w	r3, [sl]
 8010512:	2b00      	cmp	r3, #0
 8010514:	f000 809f 	beq.w	8010656 <_svfiprintf_r+0x1c6>
 8010518:	2300      	movs	r3, #0
 801051a:	f04f 32ff 	mov.w	r2, #4294967295
 801051e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010522:	f10a 0a01 	add.w	sl, sl, #1
 8010526:	9304      	str	r3, [sp, #16]
 8010528:	9307      	str	r3, [sp, #28]
 801052a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801052e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010530:	4654      	mov	r4, sl
 8010532:	2205      	movs	r2, #5
 8010534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010538:	484e      	ldr	r0, [pc, #312]	@ (8010674 <_svfiprintf_r+0x1e4>)
 801053a:	f7ef fe49 	bl	80001d0 <memchr>
 801053e:	9a04      	ldr	r2, [sp, #16]
 8010540:	b9d8      	cbnz	r0, 801057a <_svfiprintf_r+0xea>
 8010542:	06d0      	lsls	r0, r2, #27
 8010544:	bf44      	itt	mi
 8010546:	2320      	movmi	r3, #32
 8010548:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801054c:	0711      	lsls	r1, r2, #28
 801054e:	bf44      	itt	mi
 8010550:	232b      	movmi	r3, #43	@ 0x2b
 8010552:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010556:	f89a 3000 	ldrb.w	r3, [sl]
 801055a:	2b2a      	cmp	r3, #42	@ 0x2a
 801055c:	d015      	beq.n	801058a <_svfiprintf_r+0xfa>
 801055e:	9a07      	ldr	r2, [sp, #28]
 8010560:	4654      	mov	r4, sl
 8010562:	2000      	movs	r0, #0
 8010564:	f04f 0c0a 	mov.w	ip, #10
 8010568:	4621      	mov	r1, r4
 801056a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801056e:	3b30      	subs	r3, #48	@ 0x30
 8010570:	2b09      	cmp	r3, #9
 8010572:	d94b      	bls.n	801060c <_svfiprintf_r+0x17c>
 8010574:	b1b0      	cbz	r0, 80105a4 <_svfiprintf_r+0x114>
 8010576:	9207      	str	r2, [sp, #28]
 8010578:	e014      	b.n	80105a4 <_svfiprintf_r+0x114>
 801057a:	eba0 0308 	sub.w	r3, r0, r8
 801057e:	fa09 f303 	lsl.w	r3, r9, r3
 8010582:	4313      	orrs	r3, r2
 8010584:	9304      	str	r3, [sp, #16]
 8010586:	46a2      	mov	sl, r4
 8010588:	e7d2      	b.n	8010530 <_svfiprintf_r+0xa0>
 801058a:	9b03      	ldr	r3, [sp, #12]
 801058c:	1d19      	adds	r1, r3, #4
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	9103      	str	r1, [sp, #12]
 8010592:	2b00      	cmp	r3, #0
 8010594:	bfbb      	ittet	lt
 8010596:	425b      	neglt	r3, r3
 8010598:	f042 0202 	orrlt.w	r2, r2, #2
 801059c:	9307      	strge	r3, [sp, #28]
 801059e:	9307      	strlt	r3, [sp, #28]
 80105a0:	bfb8      	it	lt
 80105a2:	9204      	strlt	r2, [sp, #16]
 80105a4:	7823      	ldrb	r3, [r4, #0]
 80105a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80105a8:	d10a      	bne.n	80105c0 <_svfiprintf_r+0x130>
 80105aa:	7863      	ldrb	r3, [r4, #1]
 80105ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80105ae:	d132      	bne.n	8010616 <_svfiprintf_r+0x186>
 80105b0:	9b03      	ldr	r3, [sp, #12]
 80105b2:	1d1a      	adds	r2, r3, #4
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	9203      	str	r2, [sp, #12]
 80105b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80105bc:	3402      	adds	r4, #2
 80105be:	9305      	str	r3, [sp, #20]
 80105c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010684 <_svfiprintf_r+0x1f4>
 80105c4:	7821      	ldrb	r1, [r4, #0]
 80105c6:	2203      	movs	r2, #3
 80105c8:	4650      	mov	r0, sl
 80105ca:	f7ef fe01 	bl	80001d0 <memchr>
 80105ce:	b138      	cbz	r0, 80105e0 <_svfiprintf_r+0x150>
 80105d0:	9b04      	ldr	r3, [sp, #16]
 80105d2:	eba0 000a 	sub.w	r0, r0, sl
 80105d6:	2240      	movs	r2, #64	@ 0x40
 80105d8:	4082      	lsls	r2, r0
 80105da:	4313      	orrs	r3, r2
 80105dc:	3401      	adds	r4, #1
 80105de:	9304      	str	r3, [sp, #16]
 80105e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105e4:	4824      	ldr	r0, [pc, #144]	@ (8010678 <_svfiprintf_r+0x1e8>)
 80105e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80105ea:	2206      	movs	r2, #6
 80105ec:	f7ef fdf0 	bl	80001d0 <memchr>
 80105f0:	2800      	cmp	r0, #0
 80105f2:	d036      	beq.n	8010662 <_svfiprintf_r+0x1d2>
 80105f4:	4b21      	ldr	r3, [pc, #132]	@ (801067c <_svfiprintf_r+0x1ec>)
 80105f6:	bb1b      	cbnz	r3, 8010640 <_svfiprintf_r+0x1b0>
 80105f8:	9b03      	ldr	r3, [sp, #12]
 80105fa:	3307      	adds	r3, #7
 80105fc:	f023 0307 	bic.w	r3, r3, #7
 8010600:	3308      	adds	r3, #8
 8010602:	9303      	str	r3, [sp, #12]
 8010604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010606:	4433      	add	r3, r6
 8010608:	9309      	str	r3, [sp, #36]	@ 0x24
 801060a:	e76a      	b.n	80104e2 <_svfiprintf_r+0x52>
 801060c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010610:	460c      	mov	r4, r1
 8010612:	2001      	movs	r0, #1
 8010614:	e7a8      	b.n	8010568 <_svfiprintf_r+0xd8>
 8010616:	2300      	movs	r3, #0
 8010618:	3401      	adds	r4, #1
 801061a:	9305      	str	r3, [sp, #20]
 801061c:	4619      	mov	r1, r3
 801061e:	f04f 0c0a 	mov.w	ip, #10
 8010622:	4620      	mov	r0, r4
 8010624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010628:	3a30      	subs	r2, #48	@ 0x30
 801062a:	2a09      	cmp	r2, #9
 801062c:	d903      	bls.n	8010636 <_svfiprintf_r+0x1a6>
 801062e:	2b00      	cmp	r3, #0
 8010630:	d0c6      	beq.n	80105c0 <_svfiprintf_r+0x130>
 8010632:	9105      	str	r1, [sp, #20]
 8010634:	e7c4      	b.n	80105c0 <_svfiprintf_r+0x130>
 8010636:	fb0c 2101 	mla	r1, ip, r1, r2
 801063a:	4604      	mov	r4, r0
 801063c:	2301      	movs	r3, #1
 801063e:	e7f0      	b.n	8010622 <_svfiprintf_r+0x192>
 8010640:	ab03      	add	r3, sp, #12
 8010642:	9300      	str	r3, [sp, #0]
 8010644:	462a      	mov	r2, r5
 8010646:	4b0e      	ldr	r3, [pc, #56]	@ (8010680 <_svfiprintf_r+0x1f0>)
 8010648:	a904      	add	r1, sp, #16
 801064a:	4638      	mov	r0, r7
 801064c:	f3af 8000 	nop.w
 8010650:	1c42      	adds	r2, r0, #1
 8010652:	4606      	mov	r6, r0
 8010654:	d1d6      	bne.n	8010604 <_svfiprintf_r+0x174>
 8010656:	89ab      	ldrh	r3, [r5, #12]
 8010658:	065b      	lsls	r3, r3, #25
 801065a:	f53f af2d 	bmi.w	80104b8 <_svfiprintf_r+0x28>
 801065e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010660:	e72c      	b.n	80104bc <_svfiprintf_r+0x2c>
 8010662:	ab03      	add	r3, sp, #12
 8010664:	9300      	str	r3, [sp, #0]
 8010666:	462a      	mov	r2, r5
 8010668:	4b05      	ldr	r3, [pc, #20]	@ (8010680 <_svfiprintf_r+0x1f0>)
 801066a:	a904      	add	r1, sp, #16
 801066c:	4638      	mov	r0, r7
 801066e:	f000 f9bb 	bl	80109e8 <_printf_i>
 8010672:	e7ed      	b.n	8010650 <_svfiprintf_r+0x1c0>
 8010674:	080116a4 	.word	0x080116a4
 8010678:	080116ae 	.word	0x080116ae
 801067c:	00000000 	.word	0x00000000
 8010680:	080103d9 	.word	0x080103d9
 8010684:	080116aa 	.word	0x080116aa

08010688 <__sfputc_r>:
 8010688:	6893      	ldr	r3, [r2, #8]
 801068a:	3b01      	subs	r3, #1
 801068c:	2b00      	cmp	r3, #0
 801068e:	b410      	push	{r4}
 8010690:	6093      	str	r3, [r2, #8]
 8010692:	da08      	bge.n	80106a6 <__sfputc_r+0x1e>
 8010694:	6994      	ldr	r4, [r2, #24]
 8010696:	42a3      	cmp	r3, r4
 8010698:	db01      	blt.n	801069e <__sfputc_r+0x16>
 801069a:	290a      	cmp	r1, #10
 801069c:	d103      	bne.n	80106a6 <__sfputc_r+0x1e>
 801069e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106a2:	f000 bb6b 	b.w	8010d7c <__swbuf_r>
 80106a6:	6813      	ldr	r3, [r2, #0]
 80106a8:	1c58      	adds	r0, r3, #1
 80106aa:	6010      	str	r0, [r2, #0]
 80106ac:	7019      	strb	r1, [r3, #0]
 80106ae:	4608      	mov	r0, r1
 80106b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106b4:	4770      	bx	lr

080106b6 <__sfputs_r>:
 80106b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106b8:	4606      	mov	r6, r0
 80106ba:	460f      	mov	r7, r1
 80106bc:	4614      	mov	r4, r2
 80106be:	18d5      	adds	r5, r2, r3
 80106c0:	42ac      	cmp	r4, r5
 80106c2:	d101      	bne.n	80106c8 <__sfputs_r+0x12>
 80106c4:	2000      	movs	r0, #0
 80106c6:	e007      	b.n	80106d8 <__sfputs_r+0x22>
 80106c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106cc:	463a      	mov	r2, r7
 80106ce:	4630      	mov	r0, r6
 80106d0:	f7ff ffda 	bl	8010688 <__sfputc_r>
 80106d4:	1c43      	adds	r3, r0, #1
 80106d6:	d1f3      	bne.n	80106c0 <__sfputs_r+0xa>
 80106d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080106dc <_vfiprintf_r>:
 80106dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106e0:	460d      	mov	r5, r1
 80106e2:	b09d      	sub	sp, #116	@ 0x74
 80106e4:	4614      	mov	r4, r2
 80106e6:	4698      	mov	r8, r3
 80106e8:	4606      	mov	r6, r0
 80106ea:	b118      	cbz	r0, 80106f4 <_vfiprintf_r+0x18>
 80106ec:	6a03      	ldr	r3, [r0, #32]
 80106ee:	b90b      	cbnz	r3, 80106f4 <_vfiprintf_r+0x18>
 80106f0:	f7ff fc38 	bl	800ff64 <__sinit>
 80106f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80106f6:	07d9      	lsls	r1, r3, #31
 80106f8:	d405      	bmi.n	8010706 <_vfiprintf_r+0x2a>
 80106fa:	89ab      	ldrh	r3, [r5, #12]
 80106fc:	059a      	lsls	r2, r3, #22
 80106fe:	d402      	bmi.n	8010706 <_vfiprintf_r+0x2a>
 8010700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010702:	f7ff fd68 	bl	80101d6 <__retarget_lock_acquire_recursive>
 8010706:	89ab      	ldrh	r3, [r5, #12]
 8010708:	071b      	lsls	r3, r3, #28
 801070a:	d501      	bpl.n	8010710 <_vfiprintf_r+0x34>
 801070c:	692b      	ldr	r3, [r5, #16]
 801070e:	b99b      	cbnz	r3, 8010738 <_vfiprintf_r+0x5c>
 8010710:	4629      	mov	r1, r5
 8010712:	4630      	mov	r0, r6
 8010714:	f000 fb70 	bl	8010df8 <__swsetup_r>
 8010718:	b170      	cbz	r0, 8010738 <_vfiprintf_r+0x5c>
 801071a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801071c:	07dc      	lsls	r4, r3, #31
 801071e:	d504      	bpl.n	801072a <_vfiprintf_r+0x4e>
 8010720:	f04f 30ff 	mov.w	r0, #4294967295
 8010724:	b01d      	add	sp, #116	@ 0x74
 8010726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801072a:	89ab      	ldrh	r3, [r5, #12]
 801072c:	0598      	lsls	r0, r3, #22
 801072e:	d4f7      	bmi.n	8010720 <_vfiprintf_r+0x44>
 8010730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010732:	f7ff fd51 	bl	80101d8 <__retarget_lock_release_recursive>
 8010736:	e7f3      	b.n	8010720 <_vfiprintf_r+0x44>
 8010738:	2300      	movs	r3, #0
 801073a:	9309      	str	r3, [sp, #36]	@ 0x24
 801073c:	2320      	movs	r3, #32
 801073e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010742:	f8cd 800c 	str.w	r8, [sp, #12]
 8010746:	2330      	movs	r3, #48	@ 0x30
 8010748:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80108f8 <_vfiprintf_r+0x21c>
 801074c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010750:	f04f 0901 	mov.w	r9, #1
 8010754:	4623      	mov	r3, r4
 8010756:	469a      	mov	sl, r3
 8010758:	f813 2b01 	ldrb.w	r2, [r3], #1
 801075c:	b10a      	cbz	r2, 8010762 <_vfiprintf_r+0x86>
 801075e:	2a25      	cmp	r2, #37	@ 0x25
 8010760:	d1f9      	bne.n	8010756 <_vfiprintf_r+0x7a>
 8010762:	ebba 0b04 	subs.w	fp, sl, r4
 8010766:	d00b      	beq.n	8010780 <_vfiprintf_r+0xa4>
 8010768:	465b      	mov	r3, fp
 801076a:	4622      	mov	r2, r4
 801076c:	4629      	mov	r1, r5
 801076e:	4630      	mov	r0, r6
 8010770:	f7ff ffa1 	bl	80106b6 <__sfputs_r>
 8010774:	3001      	adds	r0, #1
 8010776:	f000 80a7 	beq.w	80108c8 <_vfiprintf_r+0x1ec>
 801077a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801077c:	445a      	add	r2, fp
 801077e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010780:	f89a 3000 	ldrb.w	r3, [sl]
 8010784:	2b00      	cmp	r3, #0
 8010786:	f000 809f 	beq.w	80108c8 <_vfiprintf_r+0x1ec>
 801078a:	2300      	movs	r3, #0
 801078c:	f04f 32ff 	mov.w	r2, #4294967295
 8010790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010794:	f10a 0a01 	add.w	sl, sl, #1
 8010798:	9304      	str	r3, [sp, #16]
 801079a:	9307      	str	r3, [sp, #28]
 801079c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80107a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80107a2:	4654      	mov	r4, sl
 80107a4:	2205      	movs	r2, #5
 80107a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107aa:	4853      	ldr	r0, [pc, #332]	@ (80108f8 <_vfiprintf_r+0x21c>)
 80107ac:	f7ef fd10 	bl	80001d0 <memchr>
 80107b0:	9a04      	ldr	r2, [sp, #16]
 80107b2:	b9d8      	cbnz	r0, 80107ec <_vfiprintf_r+0x110>
 80107b4:	06d1      	lsls	r1, r2, #27
 80107b6:	bf44      	itt	mi
 80107b8:	2320      	movmi	r3, #32
 80107ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80107be:	0713      	lsls	r3, r2, #28
 80107c0:	bf44      	itt	mi
 80107c2:	232b      	movmi	r3, #43	@ 0x2b
 80107c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80107c8:	f89a 3000 	ldrb.w	r3, [sl]
 80107cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80107ce:	d015      	beq.n	80107fc <_vfiprintf_r+0x120>
 80107d0:	9a07      	ldr	r2, [sp, #28]
 80107d2:	4654      	mov	r4, sl
 80107d4:	2000      	movs	r0, #0
 80107d6:	f04f 0c0a 	mov.w	ip, #10
 80107da:	4621      	mov	r1, r4
 80107dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107e0:	3b30      	subs	r3, #48	@ 0x30
 80107e2:	2b09      	cmp	r3, #9
 80107e4:	d94b      	bls.n	801087e <_vfiprintf_r+0x1a2>
 80107e6:	b1b0      	cbz	r0, 8010816 <_vfiprintf_r+0x13a>
 80107e8:	9207      	str	r2, [sp, #28]
 80107ea:	e014      	b.n	8010816 <_vfiprintf_r+0x13a>
 80107ec:	eba0 0308 	sub.w	r3, r0, r8
 80107f0:	fa09 f303 	lsl.w	r3, r9, r3
 80107f4:	4313      	orrs	r3, r2
 80107f6:	9304      	str	r3, [sp, #16]
 80107f8:	46a2      	mov	sl, r4
 80107fa:	e7d2      	b.n	80107a2 <_vfiprintf_r+0xc6>
 80107fc:	9b03      	ldr	r3, [sp, #12]
 80107fe:	1d19      	adds	r1, r3, #4
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	9103      	str	r1, [sp, #12]
 8010804:	2b00      	cmp	r3, #0
 8010806:	bfbb      	ittet	lt
 8010808:	425b      	neglt	r3, r3
 801080a:	f042 0202 	orrlt.w	r2, r2, #2
 801080e:	9307      	strge	r3, [sp, #28]
 8010810:	9307      	strlt	r3, [sp, #28]
 8010812:	bfb8      	it	lt
 8010814:	9204      	strlt	r2, [sp, #16]
 8010816:	7823      	ldrb	r3, [r4, #0]
 8010818:	2b2e      	cmp	r3, #46	@ 0x2e
 801081a:	d10a      	bne.n	8010832 <_vfiprintf_r+0x156>
 801081c:	7863      	ldrb	r3, [r4, #1]
 801081e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010820:	d132      	bne.n	8010888 <_vfiprintf_r+0x1ac>
 8010822:	9b03      	ldr	r3, [sp, #12]
 8010824:	1d1a      	adds	r2, r3, #4
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	9203      	str	r2, [sp, #12]
 801082a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801082e:	3402      	adds	r4, #2
 8010830:	9305      	str	r3, [sp, #20]
 8010832:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010908 <_vfiprintf_r+0x22c>
 8010836:	7821      	ldrb	r1, [r4, #0]
 8010838:	2203      	movs	r2, #3
 801083a:	4650      	mov	r0, sl
 801083c:	f7ef fcc8 	bl	80001d0 <memchr>
 8010840:	b138      	cbz	r0, 8010852 <_vfiprintf_r+0x176>
 8010842:	9b04      	ldr	r3, [sp, #16]
 8010844:	eba0 000a 	sub.w	r0, r0, sl
 8010848:	2240      	movs	r2, #64	@ 0x40
 801084a:	4082      	lsls	r2, r0
 801084c:	4313      	orrs	r3, r2
 801084e:	3401      	adds	r4, #1
 8010850:	9304      	str	r3, [sp, #16]
 8010852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010856:	4829      	ldr	r0, [pc, #164]	@ (80108fc <_vfiprintf_r+0x220>)
 8010858:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801085c:	2206      	movs	r2, #6
 801085e:	f7ef fcb7 	bl	80001d0 <memchr>
 8010862:	2800      	cmp	r0, #0
 8010864:	d03f      	beq.n	80108e6 <_vfiprintf_r+0x20a>
 8010866:	4b26      	ldr	r3, [pc, #152]	@ (8010900 <_vfiprintf_r+0x224>)
 8010868:	bb1b      	cbnz	r3, 80108b2 <_vfiprintf_r+0x1d6>
 801086a:	9b03      	ldr	r3, [sp, #12]
 801086c:	3307      	adds	r3, #7
 801086e:	f023 0307 	bic.w	r3, r3, #7
 8010872:	3308      	adds	r3, #8
 8010874:	9303      	str	r3, [sp, #12]
 8010876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010878:	443b      	add	r3, r7
 801087a:	9309      	str	r3, [sp, #36]	@ 0x24
 801087c:	e76a      	b.n	8010754 <_vfiprintf_r+0x78>
 801087e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010882:	460c      	mov	r4, r1
 8010884:	2001      	movs	r0, #1
 8010886:	e7a8      	b.n	80107da <_vfiprintf_r+0xfe>
 8010888:	2300      	movs	r3, #0
 801088a:	3401      	adds	r4, #1
 801088c:	9305      	str	r3, [sp, #20]
 801088e:	4619      	mov	r1, r3
 8010890:	f04f 0c0a 	mov.w	ip, #10
 8010894:	4620      	mov	r0, r4
 8010896:	f810 2b01 	ldrb.w	r2, [r0], #1
 801089a:	3a30      	subs	r2, #48	@ 0x30
 801089c:	2a09      	cmp	r2, #9
 801089e:	d903      	bls.n	80108a8 <_vfiprintf_r+0x1cc>
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d0c6      	beq.n	8010832 <_vfiprintf_r+0x156>
 80108a4:	9105      	str	r1, [sp, #20]
 80108a6:	e7c4      	b.n	8010832 <_vfiprintf_r+0x156>
 80108a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80108ac:	4604      	mov	r4, r0
 80108ae:	2301      	movs	r3, #1
 80108b0:	e7f0      	b.n	8010894 <_vfiprintf_r+0x1b8>
 80108b2:	ab03      	add	r3, sp, #12
 80108b4:	9300      	str	r3, [sp, #0]
 80108b6:	462a      	mov	r2, r5
 80108b8:	4b12      	ldr	r3, [pc, #72]	@ (8010904 <_vfiprintf_r+0x228>)
 80108ba:	a904      	add	r1, sp, #16
 80108bc:	4630      	mov	r0, r6
 80108be:	f3af 8000 	nop.w
 80108c2:	4607      	mov	r7, r0
 80108c4:	1c78      	adds	r0, r7, #1
 80108c6:	d1d6      	bne.n	8010876 <_vfiprintf_r+0x19a>
 80108c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80108ca:	07d9      	lsls	r1, r3, #31
 80108cc:	d405      	bmi.n	80108da <_vfiprintf_r+0x1fe>
 80108ce:	89ab      	ldrh	r3, [r5, #12]
 80108d0:	059a      	lsls	r2, r3, #22
 80108d2:	d402      	bmi.n	80108da <_vfiprintf_r+0x1fe>
 80108d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80108d6:	f7ff fc7f 	bl	80101d8 <__retarget_lock_release_recursive>
 80108da:	89ab      	ldrh	r3, [r5, #12]
 80108dc:	065b      	lsls	r3, r3, #25
 80108de:	f53f af1f 	bmi.w	8010720 <_vfiprintf_r+0x44>
 80108e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80108e4:	e71e      	b.n	8010724 <_vfiprintf_r+0x48>
 80108e6:	ab03      	add	r3, sp, #12
 80108e8:	9300      	str	r3, [sp, #0]
 80108ea:	462a      	mov	r2, r5
 80108ec:	4b05      	ldr	r3, [pc, #20]	@ (8010904 <_vfiprintf_r+0x228>)
 80108ee:	a904      	add	r1, sp, #16
 80108f0:	4630      	mov	r0, r6
 80108f2:	f000 f879 	bl	80109e8 <_printf_i>
 80108f6:	e7e4      	b.n	80108c2 <_vfiprintf_r+0x1e6>
 80108f8:	080116a4 	.word	0x080116a4
 80108fc:	080116ae 	.word	0x080116ae
 8010900:	00000000 	.word	0x00000000
 8010904:	080106b7 	.word	0x080106b7
 8010908:	080116aa 	.word	0x080116aa

0801090c <_printf_common>:
 801090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010910:	4616      	mov	r6, r2
 8010912:	4698      	mov	r8, r3
 8010914:	688a      	ldr	r2, [r1, #8]
 8010916:	690b      	ldr	r3, [r1, #16]
 8010918:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801091c:	4293      	cmp	r3, r2
 801091e:	bfb8      	it	lt
 8010920:	4613      	movlt	r3, r2
 8010922:	6033      	str	r3, [r6, #0]
 8010924:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010928:	4607      	mov	r7, r0
 801092a:	460c      	mov	r4, r1
 801092c:	b10a      	cbz	r2, 8010932 <_printf_common+0x26>
 801092e:	3301      	adds	r3, #1
 8010930:	6033      	str	r3, [r6, #0]
 8010932:	6823      	ldr	r3, [r4, #0]
 8010934:	0699      	lsls	r1, r3, #26
 8010936:	bf42      	ittt	mi
 8010938:	6833      	ldrmi	r3, [r6, #0]
 801093a:	3302      	addmi	r3, #2
 801093c:	6033      	strmi	r3, [r6, #0]
 801093e:	6825      	ldr	r5, [r4, #0]
 8010940:	f015 0506 	ands.w	r5, r5, #6
 8010944:	d106      	bne.n	8010954 <_printf_common+0x48>
 8010946:	f104 0a19 	add.w	sl, r4, #25
 801094a:	68e3      	ldr	r3, [r4, #12]
 801094c:	6832      	ldr	r2, [r6, #0]
 801094e:	1a9b      	subs	r3, r3, r2
 8010950:	42ab      	cmp	r3, r5
 8010952:	dc26      	bgt.n	80109a2 <_printf_common+0x96>
 8010954:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010958:	6822      	ldr	r2, [r4, #0]
 801095a:	3b00      	subs	r3, #0
 801095c:	bf18      	it	ne
 801095e:	2301      	movne	r3, #1
 8010960:	0692      	lsls	r2, r2, #26
 8010962:	d42b      	bmi.n	80109bc <_printf_common+0xb0>
 8010964:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010968:	4641      	mov	r1, r8
 801096a:	4638      	mov	r0, r7
 801096c:	47c8      	blx	r9
 801096e:	3001      	adds	r0, #1
 8010970:	d01e      	beq.n	80109b0 <_printf_common+0xa4>
 8010972:	6823      	ldr	r3, [r4, #0]
 8010974:	6922      	ldr	r2, [r4, #16]
 8010976:	f003 0306 	and.w	r3, r3, #6
 801097a:	2b04      	cmp	r3, #4
 801097c:	bf02      	ittt	eq
 801097e:	68e5      	ldreq	r5, [r4, #12]
 8010980:	6833      	ldreq	r3, [r6, #0]
 8010982:	1aed      	subeq	r5, r5, r3
 8010984:	68a3      	ldr	r3, [r4, #8]
 8010986:	bf0c      	ite	eq
 8010988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801098c:	2500      	movne	r5, #0
 801098e:	4293      	cmp	r3, r2
 8010990:	bfc4      	itt	gt
 8010992:	1a9b      	subgt	r3, r3, r2
 8010994:	18ed      	addgt	r5, r5, r3
 8010996:	2600      	movs	r6, #0
 8010998:	341a      	adds	r4, #26
 801099a:	42b5      	cmp	r5, r6
 801099c:	d11a      	bne.n	80109d4 <_printf_common+0xc8>
 801099e:	2000      	movs	r0, #0
 80109a0:	e008      	b.n	80109b4 <_printf_common+0xa8>
 80109a2:	2301      	movs	r3, #1
 80109a4:	4652      	mov	r2, sl
 80109a6:	4641      	mov	r1, r8
 80109a8:	4638      	mov	r0, r7
 80109aa:	47c8      	blx	r9
 80109ac:	3001      	adds	r0, #1
 80109ae:	d103      	bne.n	80109b8 <_printf_common+0xac>
 80109b0:	f04f 30ff 	mov.w	r0, #4294967295
 80109b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109b8:	3501      	adds	r5, #1
 80109ba:	e7c6      	b.n	801094a <_printf_common+0x3e>
 80109bc:	18e1      	adds	r1, r4, r3
 80109be:	1c5a      	adds	r2, r3, #1
 80109c0:	2030      	movs	r0, #48	@ 0x30
 80109c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80109c6:	4422      	add	r2, r4
 80109c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80109cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80109d0:	3302      	adds	r3, #2
 80109d2:	e7c7      	b.n	8010964 <_printf_common+0x58>
 80109d4:	2301      	movs	r3, #1
 80109d6:	4622      	mov	r2, r4
 80109d8:	4641      	mov	r1, r8
 80109da:	4638      	mov	r0, r7
 80109dc:	47c8      	blx	r9
 80109de:	3001      	adds	r0, #1
 80109e0:	d0e6      	beq.n	80109b0 <_printf_common+0xa4>
 80109e2:	3601      	adds	r6, #1
 80109e4:	e7d9      	b.n	801099a <_printf_common+0x8e>
	...

080109e8 <_printf_i>:
 80109e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109ec:	7e0f      	ldrb	r7, [r1, #24]
 80109ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80109f0:	2f78      	cmp	r7, #120	@ 0x78
 80109f2:	4691      	mov	r9, r2
 80109f4:	4680      	mov	r8, r0
 80109f6:	460c      	mov	r4, r1
 80109f8:	469a      	mov	sl, r3
 80109fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80109fe:	d807      	bhi.n	8010a10 <_printf_i+0x28>
 8010a00:	2f62      	cmp	r7, #98	@ 0x62
 8010a02:	d80a      	bhi.n	8010a1a <_printf_i+0x32>
 8010a04:	2f00      	cmp	r7, #0
 8010a06:	f000 80d1 	beq.w	8010bac <_printf_i+0x1c4>
 8010a0a:	2f58      	cmp	r7, #88	@ 0x58
 8010a0c:	f000 80b8 	beq.w	8010b80 <_printf_i+0x198>
 8010a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010a14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010a18:	e03a      	b.n	8010a90 <_printf_i+0xa8>
 8010a1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010a1e:	2b15      	cmp	r3, #21
 8010a20:	d8f6      	bhi.n	8010a10 <_printf_i+0x28>
 8010a22:	a101      	add	r1, pc, #4	@ (adr r1, 8010a28 <_printf_i+0x40>)
 8010a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010a28:	08010a81 	.word	0x08010a81
 8010a2c:	08010a95 	.word	0x08010a95
 8010a30:	08010a11 	.word	0x08010a11
 8010a34:	08010a11 	.word	0x08010a11
 8010a38:	08010a11 	.word	0x08010a11
 8010a3c:	08010a11 	.word	0x08010a11
 8010a40:	08010a95 	.word	0x08010a95
 8010a44:	08010a11 	.word	0x08010a11
 8010a48:	08010a11 	.word	0x08010a11
 8010a4c:	08010a11 	.word	0x08010a11
 8010a50:	08010a11 	.word	0x08010a11
 8010a54:	08010b93 	.word	0x08010b93
 8010a58:	08010abf 	.word	0x08010abf
 8010a5c:	08010b4d 	.word	0x08010b4d
 8010a60:	08010a11 	.word	0x08010a11
 8010a64:	08010a11 	.word	0x08010a11
 8010a68:	08010bb5 	.word	0x08010bb5
 8010a6c:	08010a11 	.word	0x08010a11
 8010a70:	08010abf 	.word	0x08010abf
 8010a74:	08010a11 	.word	0x08010a11
 8010a78:	08010a11 	.word	0x08010a11
 8010a7c:	08010b55 	.word	0x08010b55
 8010a80:	6833      	ldr	r3, [r6, #0]
 8010a82:	1d1a      	adds	r2, r3, #4
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	6032      	str	r2, [r6, #0]
 8010a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010a8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010a90:	2301      	movs	r3, #1
 8010a92:	e09c      	b.n	8010bce <_printf_i+0x1e6>
 8010a94:	6833      	ldr	r3, [r6, #0]
 8010a96:	6820      	ldr	r0, [r4, #0]
 8010a98:	1d19      	adds	r1, r3, #4
 8010a9a:	6031      	str	r1, [r6, #0]
 8010a9c:	0606      	lsls	r6, r0, #24
 8010a9e:	d501      	bpl.n	8010aa4 <_printf_i+0xbc>
 8010aa0:	681d      	ldr	r5, [r3, #0]
 8010aa2:	e003      	b.n	8010aac <_printf_i+0xc4>
 8010aa4:	0645      	lsls	r5, r0, #25
 8010aa6:	d5fb      	bpl.n	8010aa0 <_printf_i+0xb8>
 8010aa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010aac:	2d00      	cmp	r5, #0
 8010aae:	da03      	bge.n	8010ab8 <_printf_i+0xd0>
 8010ab0:	232d      	movs	r3, #45	@ 0x2d
 8010ab2:	426d      	negs	r5, r5
 8010ab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ab8:	4858      	ldr	r0, [pc, #352]	@ (8010c1c <_printf_i+0x234>)
 8010aba:	230a      	movs	r3, #10
 8010abc:	e011      	b.n	8010ae2 <_printf_i+0xfa>
 8010abe:	6821      	ldr	r1, [r4, #0]
 8010ac0:	6833      	ldr	r3, [r6, #0]
 8010ac2:	0608      	lsls	r0, r1, #24
 8010ac4:	f853 5b04 	ldr.w	r5, [r3], #4
 8010ac8:	d402      	bmi.n	8010ad0 <_printf_i+0xe8>
 8010aca:	0649      	lsls	r1, r1, #25
 8010acc:	bf48      	it	mi
 8010ace:	b2ad      	uxthmi	r5, r5
 8010ad0:	2f6f      	cmp	r7, #111	@ 0x6f
 8010ad2:	4852      	ldr	r0, [pc, #328]	@ (8010c1c <_printf_i+0x234>)
 8010ad4:	6033      	str	r3, [r6, #0]
 8010ad6:	bf14      	ite	ne
 8010ad8:	230a      	movne	r3, #10
 8010ada:	2308      	moveq	r3, #8
 8010adc:	2100      	movs	r1, #0
 8010ade:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010ae2:	6866      	ldr	r6, [r4, #4]
 8010ae4:	60a6      	str	r6, [r4, #8]
 8010ae6:	2e00      	cmp	r6, #0
 8010ae8:	db05      	blt.n	8010af6 <_printf_i+0x10e>
 8010aea:	6821      	ldr	r1, [r4, #0]
 8010aec:	432e      	orrs	r6, r5
 8010aee:	f021 0104 	bic.w	r1, r1, #4
 8010af2:	6021      	str	r1, [r4, #0]
 8010af4:	d04b      	beq.n	8010b8e <_printf_i+0x1a6>
 8010af6:	4616      	mov	r6, r2
 8010af8:	fbb5 f1f3 	udiv	r1, r5, r3
 8010afc:	fb03 5711 	mls	r7, r3, r1, r5
 8010b00:	5dc7      	ldrb	r7, [r0, r7]
 8010b02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010b06:	462f      	mov	r7, r5
 8010b08:	42bb      	cmp	r3, r7
 8010b0a:	460d      	mov	r5, r1
 8010b0c:	d9f4      	bls.n	8010af8 <_printf_i+0x110>
 8010b0e:	2b08      	cmp	r3, #8
 8010b10:	d10b      	bne.n	8010b2a <_printf_i+0x142>
 8010b12:	6823      	ldr	r3, [r4, #0]
 8010b14:	07df      	lsls	r7, r3, #31
 8010b16:	d508      	bpl.n	8010b2a <_printf_i+0x142>
 8010b18:	6923      	ldr	r3, [r4, #16]
 8010b1a:	6861      	ldr	r1, [r4, #4]
 8010b1c:	4299      	cmp	r1, r3
 8010b1e:	bfde      	ittt	le
 8010b20:	2330      	movle	r3, #48	@ 0x30
 8010b22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010b26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010b2a:	1b92      	subs	r2, r2, r6
 8010b2c:	6122      	str	r2, [r4, #16]
 8010b2e:	f8cd a000 	str.w	sl, [sp]
 8010b32:	464b      	mov	r3, r9
 8010b34:	aa03      	add	r2, sp, #12
 8010b36:	4621      	mov	r1, r4
 8010b38:	4640      	mov	r0, r8
 8010b3a:	f7ff fee7 	bl	801090c <_printf_common>
 8010b3e:	3001      	adds	r0, #1
 8010b40:	d14a      	bne.n	8010bd8 <_printf_i+0x1f0>
 8010b42:	f04f 30ff 	mov.w	r0, #4294967295
 8010b46:	b004      	add	sp, #16
 8010b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b4c:	6823      	ldr	r3, [r4, #0]
 8010b4e:	f043 0320 	orr.w	r3, r3, #32
 8010b52:	6023      	str	r3, [r4, #0]
 8010b54:	4832      	ldr	r0, [pc, #200]	@ (8010c20 <_printf_i+0x238>)
 8010b56:	2778      	movs	r7, #120	@ 0x78
 8010b58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010b5c:	6823      	ldr	r3, [r4, #0]
 8010b5e:	6831      	ldr	r1, [r6, #0]
 8010b60:	061f      	lsls	r7, r3, #24
 8010b62:	f851 5b04 	ldr.w	r5, [r1], #4
 8010b66:	d402      	bmi.n	8010b6e <_printf_i+0x186>
 8010b68:	065f      	lsls	r7, r3, #25
 8010b6a:	bf48      	it	mi
 8010b6c:	b2ad      	uxthmi	r5, r5
 8010b6e:	6031      	str	r1, [r6, #0]
 8010b70:	07d9      	lsls	r1, r3, #31
 8010b72:	bf44      	itt	mi
 8010b74:	f043 0320 	orrmi.w	r3, r3, #32
 8010b78:	6023      	strmi	r3, [r4, #0]
 8010b7a:	b11d      	cbz	r5, 8010b84 <_printf_i+0x19c>
 8010b7c:	2310      	movs	r3, #16
 8010b7e:	e7ad      	b.n	8010adc <_printf_i+0xf4>
 8010b80:	4826      	ldr	r0, [pc, #152]	@ (8010c1c <_printf_i+0x234>)
 8010b82:	e7e9      	b.n	8010b58 <_printf_i+0x170>
 8010b84:	6823      	ldr	r3, [r4, #0]
 8010b86:	f023 0320 	bic.w	r3, r3, #32
 8010b8a:	6023      	str	r3, [r4, #0]
 8010b8c:	e7f6      	b.n	8010b7c <_printf_i+0x194>
 8010b8e:	4616      	mov	r6, r2
 8010b90:	e7bd      	b.n	8010b0e <_printf_i+0x126>
 8010b92:	6833      	ldr	r3, [r6, #0]
 8010b94:	6825      	ldr	r5, [r4, #0]
 8010b96:	6961      	ldr	r1, [r4, #20]
 8010b98:	1d18      	adds	r0, r3, #4
 8010b9a:	6030      	str	r0, [r6, #0]
 8010b9c:	062e      	lsls	r6, r5, #24
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	d501      	bpl.n	8010ba6 <_printf_i+0x1be>
 8010ba2:	6019      	str	r1, [r3, #0]
 8010ba4:	e002      	b.n	8010bac <_printf_i+0x1c4>
 8010ba6:	0668      	lsls	r0, r5, #25
 8010ba8:	d5fb      	bpl.n	8010ba2 <_printf_i+0x1ba>
 8010baa:	8019      	strh	r1, [r3, #0]
 8010bac:	2300      	movs	r3, #0
 8010bae:	6123      	str	r3, [r4, #16]
 8010bb0:	4616      	mov	r6, r2
 8010bb2:	e7bc      	b.n	8010b2e <_printf_i+0x146>
 8010bb4:	6833      	ldr	r3, [r6, #0]
 8010bb6:	1d1a      	adds	r2, r3, #4
 8010bb8:	6032      	str	r2, [r6, #0]
 8010bba:	681e      	ldr	r6, [r3, #0]
 8010bbc:	6862      	ldr	r2, [r4, #4]
 8010bbe:	2100      	movs	r1, #0
 8010bc0:	4630      	mov	r0, r6
 8010bc2:	f7ef fb05 	bl	80001d0 <memchr>
 8010bc6:	b108      	cbz	r0, 8010bcc <_printf_i+0x1e4>
 8010bc8:	1b80      	subs	r0, r0, r6
 8010bca:	6060      	str	r0, [r4, #4]
 8010bcc:	6863      	ldr	r3, [r4, #4]
 8010bce:	6123      	str	r3, [r4, #16]
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010bd6:	e7aa      	b.n	8010b2e <_printf_i+0x146>
 8010bd8:	6923      	ldr	r3, [r4, #16]
 8010bda:	4632      	mov	r2, r6
 8010bdc:	4649      	mov	r1, r9
 8010bde:	4640      	mov	r0, r8
 8010be0:	47d0      	blx	sl
 8010be2:	3001      	adds	r0, #1
 8010be4:	d0ad      	beq.n	8010b42 <_printf_i+0x15a>
 8010be6:	6823      	ldr	r3, [r4, #0]
 8010be8:	079b      	lsls	r3, r3, #30
 8010bea:	d413      	bmi.n	8010c14 <_printf_i+0x22c>
 8010bec:	68e0      	ldr	r0, [r4, #12]
 8010bee:	9b03      	ldr	r3, [sp, #12]
 8010bf0:	4298      	cmp	r0, r3
 8010bf2:	bfb8      	it	lt
 8010bf4:	4618      	movlt	r0, r3
 8010bf6:	e7a6      	b.n	8010b46 <_printf_i+0x15e>
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	4632      	mov	r2, r6
 8010bfc:	4649      	mov	r1, r9
 8010bfe:	4640      	mov	r0, r8
 8010c00:	47d0      	blx	sl
 8010c02:	3001      	adds	r0, #1
 8010c04:	d09d      	beq.n	8010b42 <_printf_i+0x15a>
 8010c06:	3501      	adds	r5, #1
 8010c08:	68e3      	ldr	r3, [r4, #12]
 8010c0a:	9903      	ldr	r1, [sp, #12]
 8010c0c:	1a5b      	subs	r3, r3, r1
 8010c0e:	42ab      	cmp	r3, r5
 8010c10:	dcf2      	bgt.n	8010bf8 <_printf_i+0x210>
 8010c12:	e7eb      	b.n	8010bec <_printf_i+0x204>
 8010c14:	2500      	movs	r5, #0
 8010c16:	f104 0619 	add.w	r6, r4, #25
 8010c1a:	e7f5      	b.n	8010c08 <_printf_i+0x220>
 8010c1c:	080116b5 	.word	0x080116b5
 8010c20:	080116c6 	.word	0x080116c6

08010c24 <__sflush_r>:
 8010c24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c2c:	0716      	lsls	r6, r2, #28
 8010c2e:	4605      	mov	r5, r0
 8010c30:	460c      	mov	r4, r1
 8010c32:	d454      	bmi.n	8010cde <__sflush_r+0xba>
 8010c34:	684b      	ldr	r3, [r1, #4]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	dc02      	bgt.n	8010c40 <__sflush_r+0x1c>
 8010c3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	dd48      	ble.n	8010cd2 <__sflush_r+0xae>
 8010c40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c42:	2e00      	cmp	r6, #0
 8010c44:	d045      	beq.n	8010cd2 <__sflush_r+0xae>
 8010c46:	2300      	movs	r3, #0
 8010c48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010c4c:	682f      	ldr	r7, [r5, #0]
 8010c4e:	6a21      	ldr	r1, [r4, #32]
 8010c50:	602b      	str	r3, [r5, #0]
 8010c52:	d030      	beq.n	8010cb6 <__sflush_r+0x92>
 8010c54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010c56:	89a3      	ldrh	r3, [r4, #12]
 8010c58:	0759      	lsls	r1, r3, #29
 8010c5a:	d505      	bpl.n	8010c68 <__sflush_r+0x44>
 8010c5c:	6863      	ldr	r3, [r4, #4]
 8010c5e:	1ad2      	subs	r2, r2, r3
 8010c60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010c62:	b10b      	cbz	r3, 8010c68 <__sflush_r+0x44>
 8010c64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010c66:	1ad2      	subs	r2, r2, r3
 8010c68:	2300      	movs	r3, #0
 8010c6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c6c:	6a21      	ldr	r1, [r4, #32]
 8010c6e:	4628      	mov	r0, r5
 8010c70:	47b0      	blx	r6
 8010c72:	1c43      	adds	r3, r0, #1
 8010c74:	89a3      	ldrh	r3, [r4, #12]
 8010c76:	d106      	bne.n	8010c86 <__sflush_r+0x62>
 8010c78:	6829      	ldr	r1, [r5, #0]
 8010c7a:	291d      	cmp	r1, #29
 8010c7c:	d82b      	bhi.n	8010cd6 <__sflush_r+0xb2>
 8010c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8010d28 <__sflush_r+0x104>)
 8010c80:	40ca      	lsrs	r2, r1
 8010c82:	07d6      	lsls	r6, r2, #31
 8010c84:	d527      	bpl.n	8010cd6 <__sflush_r+0xb2>
 8010c86:	2200      	movs	r2, #0
 8010c88:	6062      	str	r2, [r4, #4]
 8010c8a:	04d9      	lsls	r1, r3, #19
 8010c8c:	6922      	ldr	r2, [r4, #16]
 8010c8e:	6022      	str	r2, [r4, #0]
 8010c90:	d504      	bpl.n	8010c9c <__sflush_r+0x78>
 8010c92:	1c42      	adds	r2, r0, #1
 8010c94:	d101      	bne.n	8010c9a <__sflush_r+0x76>
 8010c96:	682b      	ldr	r3, [r5, #0]
 8010c98:	b903      	cbnz	r3, 8010c9c <__sflush_r+0x78>
 8010c9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8010c9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c9e:	602f      	str	r7, [r5, #0]
 8010ca0:	b1b9      	cbz	r1, 8010cd2 <__sflush_r+0xae>
 8010ca2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010ca6:	4299      	cmp	r1, r3
 8010ca8:	d002      	beq.n	8010cb0 <__sflush_r+0x8c>
 8010caa:	4628      	mov	r0, r5
 8010cac:	f7ff fa9c 	bl	80101e8 <_free_r>
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8010cb4:	e00d      	b.n	8010cd2 <__sflush_r+0xae>
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	4628      	mov	r0, r5
 8010cba:	47b0      	blx	r6
 8010cbc:	4602      	mov	r2, r0
 8010cbe:	1c50      	adds	r0, r2, #1
 8010cc0:	d1c9      	bne.n	8010c56 <__sflush_r+0x32>
 8010cc2:	682b      	ldr	r3, [r5, #0]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d0c6      	beq.n	8010c56 <__sflush_r+0x32>
 8010cc8:	2b1d      	cmp	r3, #29
 8010cca:	d001      	beq.n	8010cd0 <__sflush_r+0xac>
 8010ccc:	2b16      	cmp	r3, #22
 8010cce:	d11e      	bne.n	8010d0e <__sflush_r+0xea>
 8010cd0:	602f      	str	r7, [r5, #0]
 8010cd2:	2000      	movs	r0, #0
 8010cd4:	e022      	b.n	8010d1c <__sflush_r+0xf8>
 8010cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cda:	b21b      	sxth	r3, r3
 8010cdc:	e01b      	b.n	8010d16 <__sflush_r+0xf2>
 8010cde:	690f      	ldr	r7, [r1, #16]
 8010ce0:	2f00      	cmp	r7, #0
 8010ce2:	d0f6      	beq.n	8010cd2 <__sflush_r+0xae>
 8010ce4:	0793      	lsls	r3, r2, #30
 8010ce6:	680e      	ldr	r6, [r1, #0]
 8010ce8:	bf08      	it	eq
 8010cea:	694b      	ldreq	r3, [r1, #20]
 8010cec:	600f      	str	r7, [r1, #0]
 8010cee:	bf18      	it	ne
 8010cf0:	2300      	movne	r3, #0
 8010cf2:	eba6 0807 	sub.w	r8, r6, r7
 8010cf6:	608b      	str	r3, [r1, #8]
 8010cf8:	f1b8 0f00 	cmp.w	r8, #0
 8010cfc:	dde9      	ble.n	8010cd2 <__sflush_r+0xae>
 8010cfe:	6a21      	ldr	r1, [r4, #32]
 8010d00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010d02:	4643      	mov	r3, r8
 8010d04:	463a      	mov	r2, r7
 8010d06:	4628      	mov	r0, r5
 8010d08:	47b0      	blx	r6
 8010d0a:	2800      	cmp	r0, #0
 8010d0c:	dc08      	bgt.n	8010d20 <__sflush_r+0xfc>
 8010d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d16:	81a3      	strh	r3, [r4, #12]
 8010d18:	f04f 30ff 	mov.w	r0, #4294967295
 8010d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d20:	4407      	add	r7, r0
 8010d22:	eba8 0800 	sub.w	r8, r8, r0
 8010d26:	e7e7      	b.n	8010cf8 <__sflush_r+0xd4>
 8010d28:	20400001 	.word	0x20400001

08010d2c <_fflush_r>:
 8010d2c:	b538      	push	{r3, r4, r5, lr}
 8010d2e:	690b      	ldr	r3, [r1, #16]
 8010d30:	4605      	mov	r5, r0
 8010d32:	460c      	mov	r4, r1
 8010d34:	b913      	cbnz	r3, 8010d3c <_fflush_r+0x10>
 8010d36:	2500      	movs	r5, #0
 8010d38:	4628      	mov	r0, r5
 8010d3a:	bd38      	pop	{r3, r4, r5, pc}
 8010d3c:	b118      	cbz	r0, 8010d46 <_fflush_r+0x1a>
 8010d3e:	6a03      	ldr	r3, [r0, #32]
 8010d40:	b90b      	cbnz	r3, 8010d46 <_fflush_r+0x1a>
 8010d42:	f7ff f90f 	bl	800ff64 <__sinit>
 8010d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d0f3      	beq.n	8010d36 <_fflush_r+0xa>
 8010d4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010d50:	07d0      	lsls	r0, r2, #31
 8010d52:	d404      	bmi.n	8010d5e <_fflush_r+0x32>
 8010d54:	0599      	lsls	r1, r3, #22
 8010d56:	d402      	bmi.n	8010d5e <_fflush_r+0x32>
 8010d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d5a:	f7ff fa3c 	bl	80101d6 <__retarget_lock_acquire_recursive>
 8010d5e:	4628      	mov	r0, r5
 8010d60:	4621      	mov	r1, r4
 8010d62:	f7ff ff5f 	bl	8010c24 <__sflush_r>
 8010d66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d68:	07da      	lsls	r2, r3, #31
 8010d6a:	4605      	mov	r5, r0
 8010d6c:	d4e4      	bmi.n	8010d38 <_fflush_r+0xc>
 8010d6e:	89a3      	ldrh	r3, [r4, #12]
 8010d70:	059b      	lsls	r3, r3, #22
 8010d72:	d4e1      	bmi.n	8010d38 <_fflush_r+0xc>
 8010d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d76:	f7ff fa2f 	bl	80101d8 <__retarget_lock_release_recursive>
 8010d7a:	e7dd      	b.n	8010d38 <_fflush_r+0xc>

08010d7c <__swbuf_r>:
 8010d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d7e:	460e      	mov	r6, r1
 8010d80:	4614      	mov	r4, r2
 8010d82:	4605      	mov	r5, r0
 8010d84:	b118      	cbz	r0, 8010d8e <__swbuf_r+0x12>
 8010d86:	6a03      	ldr	r3, [r0, #32]
 8010d88:	b90b      	cbnz	r3, 8010d8e <__swbuf_r+0x12>
 8010d8a:	f7ff f8eb 	bl	800ff64 <__sinit>
 8010d8e:	69a3      	ldr	r3, [r4, #24]
 8010d90:	60a3      	str	r3, [r4, #8]
 8010d92:	89a3      	ldrh	r3, [r4, #12]
 8010d94:	071a      	lsls	r2, r3, #28
 8010d96:	d501      	bpl.n	8010d9c <__swbuf_r+0x20>
 8010d98:	6923      	ldr	r3, [r4, #16]
 8010d9a:	b943      	cbnz	r3, 8010dae <__swbuf_r+0x32>
 8010d9c:	4621      	mov	r1, r4
 8010d9e:	4628      	mov	r0, r5
 8010da0:	f000 f82a 	bl	8010df8 <__swsetup_r>
 8010da4:	b118      	cbz	r0, 8010dae <__swbuf_r+0x32>
 8010da6:	f04f 37ff 	mov.w	r7, #4294967295
 8010daa:	4638      	mov	r0, r7
 8010dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010dae:	6823      	ldr	r3, [r4, #0]
 8010db0:	6922      	ldr	r2, [r4, #16]
 8010db2:	1a98      	subs	r0, r3, r2
 8010db4:	6963      	ldr	r3, [r4, #20]
 8010db6:	b2f6      	uxtb	r6, r6
 8010db8:	4283      	cmp	r3, r0
 8010dba:	4637      	mov	r7, r6
 8010dbc:	dc05      	bgt.n	8010dca <__swbuf_r+0x4e>
 8010dbe:	4621      	mov	r1, r4
 8010dc0:	4628      	mov	r0, r5
 8010dc2:	f7ff ffb3 	bl	8010d2c <_fflush_r>
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	d1ed      	bne.n	8010da6 <__swbuf_r+0x2a>
 8010dca:	68a3      	ldr	r3, [r4, #8]
 8010dcc:	3b01      	subs	r3, #1
 8010dce:	60a3      	str	r3, [r4, #8]
 8010dd0:	6823      	ldr	r3, [r4, #0]
 8010dd2:	1c5a      	adds	r2, r3, #1
 8010dd4:	6022      	str	r2, [r4, #0]
 8010dd6:	701e      	strb	r6, [r3, #0]
 8010dd8:	6962      	ldr	r2, [r4, #20]
 8010dda:	1c43      	adds	r3, r0, #1
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d004      	beq.n	8010dea <__swbuf_r+0x6e>
 8010de0:	89a3      	ldrh	r3, [r4, #12]
 8010de2:	07db      	lsls	r3, r3, #31
 8010de4:	d5e1      	bpl.n	8010daa <__swbuf_r+0x2e>
 8010de6:	2e0a      	cmp	r6, #10
 8010de8:	d1df      	bne.n	8010daa <__swbuf_r+0x2e>
 8010dea:	4621      	mov	r1, r4
 8010dec:	4628      	mov	r0, r5
 8010dee:	f7ff ff9d 	bl	8010d2c <_fflush_r>
 8010df2:	2800      	cmp	r0, #0
 8010df4:	d0d9      	beq.n	8010daa <__swbuf_r+0x2e>
 8010df6:	e7d6      	b.n	8010da6 <__swbuf_r+0x2a>

08010df8 <__swsetup_r>:
 8010df8:	b538      	push	{r3, r4, r5, lr}
 8010dfa:	4b29      	ldr	r3, [pc, #164]	@ (8010ea0 <__swsetup_r+0xa8>)
 8010dfc:	4605      	mov	r5, r0
 8010dfe:	6818      	ldr	r0, [r3, #0]
 8010e00:	460c      	mov	r4, r1
 8010e02:	b118      	cbz	r0, 8010e0c <__swsetup_r+0x14>
 8010e04:	6a03      	ldr	r3, [r0, #32]
 8010e06:	b90b      	cbnz	r3, 8010e0c <__swsetup_r+0x14>
 8010e08:	f7ff f8ac 	bl	800ff64 <__sinit>
 8010e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e10:	0719      	lsls	r1, r3, #28
 8010e12:	d422      	bmi.n	8010e5a <__swsetup_r+0x62>
 8010e14:	06da      	lsls	r2, r3, #27
 8010e16:	d407      	bmi.n	8010e28 <__swsetup_r+0x30>
 8010e18:	2209      	movs	r2, #9
 8010e1a:	602a      	str	r2, [r5, #0]
 8010e1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e20:	81a3      	strh	r3, [r4, #12]
 8010e22:	f04f 30ff 	mov.w	r0, #4294967295
 8010e26:	e033      	b.n	8010e90 <__swsetup_r+0x98>
 8010e28:	0758      	lsls	r0, r3, #29
 8010e2a:	d512      	bpl.n	8010e52 <__swsetup_r+0x5a>
 8010e2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010e2e:	b141      	cbz	r1, 8010e42 <__swsetup_r+0x4a>
 8010e30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010e34:	4299      	cmp	r1, r3
 8010e36:	d002      	beq.n	8010e3e <__swsetup_r+0x46>
 8010e38:	4628      	mov	r0, r5
 8010e3a:	f7ff f9d5 	bl	80101e8 <_free_r>
 8010e3e:	2300      	movs	r3, #0
 8010e40:	6363      	str	r3, [r4, #52]	@ 0x34
 8010e42:	89a3      	ldrh	r3, [r4, #12]
 8010e44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010e48:	81a3      	strh	r3, [r4, #12]
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	6063      	str	r3, [r4, #4]
 8010e4e:	6923      	ldr	r3, [r4, #16]
 8010e50:	6023      	str	r3, [r4, #0]
 8010e52:	89a3      	ldrh	r3, [r4, #12]
 8010e54:	f043 0308 	orr.w	r3, r3, #8
 8010e58:	81a3      	strh	r3, [r4, #12]
 8010e5a:	6923      	ldr	r3, [r4, #16]
 8010e5c:	b94b      	cbnz	r3, 8010e72 <__swsetup_r+0x7a>
 8010e5e:	89a3      	ldrh	r3, [r4, #12]
 8010e60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010e68:	d003      	beq.n	8010e72 <__swsetup_r+0x7a>
 8010e6a:	4621      	mov	r1, r4
 8010e6c:	4628      	mov	r0, r5
 8010e6e:	f000 f8e9 	bl	8011044 <__smakebuf_r>
 8010e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e76:	f013 0201 	ands.w	r2, r3, #1
 8010e7a:	d00a      	beq.n	8010e92 <__swsetup_r+0x9a>
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	60a2      	str	r2, [r4, #8]
 8010e80:	6962      	ldr	r2, [r4, #20]
 8010e82:	4252      	negs	r2, r2
 8010e84:	61a2      	str	r2, [r4, #24]
 8010e86:	6922      	ldr	r2, [r4, #16]
 8010e88:	b942      	cbnz	r2, 8010e9c <__swsetup_r+0xa4>
 8010e8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010e8e:	d1c5      	bne.n	8010e1c <__swsetup_r+0x24>
 8010e90:	bd38      	pop	{r3, r4, r5, pc}
 8010e92:	0799      	lsls	r1, r3, #30
 8010e94:	bf58      	it	pl
 8010e96:	6962      	ldrpl	r2, [r4, #20]
 8010e98:	60a2      	str	r2, [r4, #8]
 8010e9a:	e7f4      	b.n	8010e86 <__swsetup_r+0x8e>
 8010e9c:	2000      	movs	r0, #0
 8010e9e:	e7f7      	b.n	8010e90 <__swsetup_r+0x98>
 8010ea0:	2000006c 	.word	0x2000006c

08010ea4 <memmove>:
 8010ea4:	4288      	cmp	r0, r1
 8010ea6:	b510      	push	{r4, lr}
 8010ea8:	eb01 0402 	add.w	r4, r1, r2
 8010eac:	d902      	bls.n	8010eb4 <memmove+0x10>
 8010eae:	4284      	cmp	r4, r0
 8010eb0:	4623      	mov	r3, r4
 8010eb2:	d807      	bhi.n	8010ec4 <memmove+0x20>
 8010eb4:	1e43      	subs	r3, r0, #1
 8010eb6:	42a1      	cmp	r1, r4
 8010eb8:	d008      	beq.n	8010ecc <memmove+0x28>
 8010eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010ec2:	e7f8      	b.n	8010eb6 <memmove+0x12>
 8010ec4:	4402      	add	r2, r0
 8010ec6:	4601      	mov	r1, r0
 8010ec8:	428a      	cmp	r2, r1
 8010eca:	d100      	bne.n	8010ece <memmove+0x2a>
 8010ecc:	bd10      	pop	{r4, pc}
 8010ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010ed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010ed6:	e7f7      	b.n	8010ec8 <memmove+0x24>

08010ed8 <_raise_r>:
 8010ed8:	291f      	cmp	r1, #31
 8010eda:	b538      	push	{r3, r4, r5, lr}
 8010edc:	4605      	mov	r5, r0
 8010ede:	460c      	mov	r4, r1
 8010ee0:	d904      	bls.n	8010eec <_raise_r+0x14>
 8010ee2:	2316      	movs	r3, #22
 8010ee4:	6003      	str	r3, [r0, #0]
 8010ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8010eea:	bd38      	pop	{r3, r4, r5, pc}
 8010eec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010eee:	b112      	cbz	r2, 8010ef6 <_raise_r+0x1e>
 8010ef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ef4:	b94b      	cbnz	r3, 8010f0a <_raise_r+0x32>
 8010ef6:	4628      	mov	r0, r5
 8010ef8:	f000 f830 	bl	8010f5c <_getpid_r>
 8010efc:	4622      	mov	r2, r4
 8010efe:	4601      	mov	r1, r0
 8010f00:	4628      	mov	r0, r5
 8010f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f06:	f000 b817 	b.w	8010f38 <_kill_r>
 8010f0a:	2b01      	cmp	r3, #1
 8010f0c:	d00a      	beq.n	8010f24 <_raise_r+0x4c>
 8010f0e:	1c59      	adds	r1, r3, #1
 8010f10:	d103      	bne.n	8010f1a <_raise_r+0x42>
 8010f12:	2316      	movs	r3, #22
 8010f14:	6003      	str	r3, [r0, #0]
 8010f16:	2001      	movs	r0, #1
 8010f18:	e7e7      	b.n	8010eea <_raise_r+0x12>
 8010f1a:	2100      	movs	r1, #0
 8010f1c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010f20:	4620      	mov	r0, r4
 8010f22:	4798      	blx	r3
 8010f24:	2000      	movs	r0, #0
 8010f26:	e7e0      	b.n	8010eea <_raise_r+0x12>

08010f28 <raise>:
 8010f28:	4b02      	ldr	r3, [pc, #8]	@ (8010f34 <raise+0xc>)
 8010f2a:	4601      	mov	r1, r0
 8010f2c:	6818      	ldr	r0, [r3, #0]
 8010f2e:	f7ff bfd3 	b.w	8010ed8 <_raise_r>
 8010f32:	bf00      	nop
 8010f34:	2000006c 	.word	0x2000006c

08010f38 <_kill_r>:
 8010f38:	b538      	push	{r3, r4, r5, lr}
 8010f3a:	4d07      	ldr	r5, [pc, #28]	@ (8010f58 <_kill_r+0x20>)
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	4604      	mov	r4, r0
 8010f40:	4608      	mov	r0, r1
 8010f42:	4611      	mov	r1, r2
 8010f44:	602b      	str	r3, [r5, #0]
 8010f46:	f7f2 f86b 	bl	8003020 <_kill>
 8010f4a:	1c43      	adds	r3, r0, #1
 8010f4c:	d102      	bne.n	8010f54 <_kill_r+0x1c>
 8010f4e:	682b      	ldr	r3, [r5, #0]
 8010f50:	b103      	cbz	r3, 8010f54 <_kill_r+0x1c>
 8010f52:	6023      	str	r3, [r4, #0]
 8010f54:	bd38      	pop	{r3, r4, r5, pc}
 8010f56:	bf00      	nop
 8010f58:	20006a8c 	.word	0x20006a8c

08010f5c <_getpid_r>:
 8010f5c:	f7f2 b858 	b.w	8003010 <_getpid>

08010f60 <_sbrk_r>:
 8010f60:	b538      	push	{r3, r4, r5, lr}
 8010f62:	4d06      	ldr	r5, [pc, #24]	@ (8010f7c <_sbrk_r+0x1c>)
 8010f64:	2300      	movs	r3, #0
 8010f66:	4604      	mov	r4, r0
 8010f68:	4608      	mov	r0, r1
 8010f6a:	602b      	str	r3, [r5, #0]
 8010f6c:	f7f2 f8a8 	bl	80030c0 <_sbrk>
 8010f70:	1c43      	adds	r3, r0, #1
 8010f72:	d102      	bne.n	8010f7a <_sbrk_r+0x1a>
 8010f74:	682b      	ldr	r3, [r5, #0]
 8010f76:	b103      	cbz	r3, 8010f7a <_sbrk_r+0x1a>
 8010f78:	6023      	str	r3, [r4, #0]
 8010f7a:	bd38      	pop	{r3, r4, r5, pc}
 8010f7c:	20006a8c 	.word	0x20006a8c

08010f80 <memcpy>:
 8010f80:	440a      	add	r2, r1
 8010f82:	4291      	cmp	r1, r2
 8010f84:	f100 33ff 	add.w	r3, r0, #4294967295
 8010f88:	d100      	bne.n	8010f8c <memcpy+0xc>
 8010f8a:	4770      	bx	lr
 8010f8c:	b510      	push	{r4, lr}
 8010f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f96:	4291      	cmp	r1, r2
 8010f98:	d1f9      	bne.n	8010f8e <memcpy+0xe>
 8010f9a:	bd10      	pop	{r4, pc}

08010f9c <_realloc_r>:
 8010f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fa0:	4607      	mov	r7, r0
 8010fa2:	4614      	mov	r4, r2
 8010fa4:	460d      	mov	r5, r1
 8010fa6:	b921      	cbnz	r1, 8010fb2 <_realloc_r+0x16>
 8010fa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fac:	4611      	mov	r1, r2
 8010fae:	f7ff b987 	b.w	80102c0 <_malloc_r>
 8010fb2:	b92a      	cbnz	r2, 8010fc0 <_realloc_r+0x24>
 8010fb4:	f7ff f918 	bl	80101e8 <_free_r>
 8010fb8:	4625      	mov	r5, r4
 8010fba:	4628      	mov	r0, r5
 8010fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fc0:	f000 f89e 	bl	8011100 <_malloc_usable_size_r>
 8010fc4:	4284      	cmp	r4, r0
 8010fc6:	4606      	mov	r6, r0
 8010fc8:	d802      	bhi.n	8010fd0 <_realloc_r+0x34>
 8010fca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010fce:	d8f4      	bhi.n	8010fba <_realloc_r+0x1e>
 8010fd0:	4621      	mov	r1, r4
 8010fd2:	4638      	mov	r0, r7
 8010fd4:	f7ff f974 	bl	80102c0 <_malloc_r>
 8010fd8:	4680      	mov	r8, r0
 8010fda:	b908      	cbnz	r0, 8010fe0 <_realloc_r+0x44>
 8010fdc:	4645      	mov	r5, r8
 8010fde:	e7ec      	b.n	8010fba <_realloc_r+0x1e>
 8010fe0:	42b4      	cmp	r4, r6
 8010fe2:	4622      	mov	r2, r4
 8010fe4:	4629      	mov	r1, r5
 8010fe6:	bf28      	it	cs
 8010fe8:	4632      	movcs	r2, r6
 8010fea:	f7ff ffc9 	bl	8010f80 <memcpy>
 8010fee:	4629      	mov	r1, r5
 8010ff0:	4638      	mov	r0, r7
 8010ff2:	f7ff f8f9 	bl	80101e8 <_free_r>
 8010ff6:	e7f1      	b.n	8010fdc <_realloc_r+0x40>

08010ff8 <__swhatbuf_r>:
 8010ff8:	b570      	push	{r4, r5, r6, lr}
 8010ffa:	460c      	mov	r4, r1
 8010ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011000:	2900      	cmp	r1, #0
 8011002:	b096      	sub	sp, #88	@ 0x58
 8011004:	4615      	mov	r5, r2
 8011006:	461e      	mov	r6, r3
 8011008:	da0d      	bge.n	8011026 <__swhatbuf_r+0x2e>
 801100a:	89a3      	ldrh	r3, [r4, #12]
 801100c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011010:	f04f 0100 	mov.w	r1, #0
 8011014:	bf14      	ite	ne
 8011016:	2340      	movne	r3, #64	@ 0x40
 8011018:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801101c:	2000      	movs	r0, #0
 801101e:	6031      	str	r1, [r6, #0]
 8011020:	602b      	str	r3, [r5, #0]
 8011022:	b016      	add	sp, #88	@ 0x58
 8011024:	bd70      	pop	{r4, r5, r6, pc}
 8011026:	466a      	mov	r2, sp
 8011028:	f000 f848 	bl	80110bc <_fstat_r>
 801102c:	2800      	cmp	r0, #0
 801102e:	dbec      	blt.n	801100a <__swhatbuf_r+0x12>
 8011030:	9901      	ldr	r1, [sp, #4]
 8011032:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011036:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801103a:	4259      	negs	r1, r3
 801103c:	4159      	adcs	r1, r3
 801103e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011042:	e7eb      	b.n	801101c <__swhatbuf_r+0x24>

08011044 <__smakebuf_r>:
 8011044:	898b      	ldrh	r3, [r1, #12]
 8011046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011048:	079d      	lsls	r5, r3, #30
 801104a:	4606      	mov	r6, r0
 801104c:	460c      	mov	r4, r1
 801104e:	d507      	bpl.n	8011060 <__smakebuf_r+0x1c>
 8011050:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011054:	6023      	str	r3, [r4, #0]
 8011056:	6123      	str	r3, [r4, #16]
 8011058:	2301      	movs	r3, #1
 801105a:	6163      	str	r3, [r4, #20]
 801105c:	b003      	add	sp, #12
 801105e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011060:	ab01      	add	r3, sp, #4
 8011062:	466a      	mov	r2, sp
 8011064:	f7ff ffc8 	bl	8010ff8 <__swhatbuf_r>
 8011068:	9f00      	ldr	r7, [sp, #0]
 801106a:	4605      	mov	r5, r0
 801106c:	4639      	mov	r1, r7
 801106e:	4630      	mov	r0, r6
 8011070:	f7ff f926 	bl	80102c0 <_malloc_r>
 8011074:	b948      	cbnz	r0, 801108a <__smakebuf_r+0x46>
 8011076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801107a:	059a      	lsls	r2, r3, #22
 801107c:	d4ee      	bmi.n	801105c <__smakebuf_r+0x18>
 801107e:	f023 0303 	bic.w	r3, r3, #3
 8011082:	f043 0302 	orr.w	r3, r3, #2
 8011086:	81a3      	strh	r3, [r4, #12]
 8011088:	e7e2      	b.n	8011050 <__smakebuf_r+0xc>
 801108a:	89a3      	ldrh	r3, [r4, #12]
 801108c:	6020      	str	r0, [r4, #0]
 801108e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011092:	81a3      	strh	r3, [r4, #12]
 8011094:	9b01      	ldr	r3, [sp, #4]
 8011096:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801109a:	b15b      	cbz	r3, 80110b4 <__smakebuf_r+0x70>
 801109c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80110a0:	4630      	mov	r0, r6
 80110a2:	f000 f81d 	bl	80110e0 <_isatty_r>
 80110a6:	b128      	cbz	r0, 80110b4 <__smakebuf_r+0x70>
 80110a8:	89a3      	ldrh	r3, [r4, #12]
 80110aa:	f023 0303 	bic.w	r3, r3, #3
 80110ae:	f043 0301 	orr.w	r3, r3, #1
 80110b2:	81a3      	strh	r3, [r4, #12]
 80110b4:	89a3      	ldrh	r3, [r4, #12]
 80110b6:	431d      	orrs	r5, r3
 80110b8:	81a5      	strh	r5, [r4, #12]
 80110ba:	e7cf      	b.n	801105c <__smakebuf_r+0x18>

080110bc <_fstat_r>:
 80110bc:	b538      	push	{r3, r4, r5, lr}
 80110be:	4d07      	ldr	r5, [pc, #28]	@ (80110dc <_fstat_r+0x20>)
 80110c0:	2300      	movs	r3, #0
 80110c2:	4604      	mov	r4, r0
 80110c4:	4608      	mov	r0, r1
 80110c6:	4611      	mov	r1, r2
 80110c8:	602b      	str	r3, [r5, #0]
 80110ca:	f7f1 ffd0 	bl	800306e <_fstat>
 80110ce:	1c43      	adds	r3, r0, #1
 80110d0:	d102      	bne.n	80110d8 <_fstat_r+0x1c>
 80110d2:	682b      	ldr	r3, [r5, #0]
 80110d4:	b103      	cbz	r3, 80110d8 <_fstat_r+0x1c>
 80110d6:	6023      	str	r3, [r4, #0]
 80110d8:	bd38      	pop	{r3, r4, r5, pc}
 80110da:	bf00      	nop
 80110dc:	20006a8c 	.word	0x20006a8c

080110e0 <_isatty_r>:
 80110e0:	b538      	push	{r3, r4, r5, lr}
 80110e2:	4d06      	ldr	r5, [pc, #24]	@ (80110fc <_isatty_r+0x1c>)
 80110e4:	2300      	movs	r3, #0
 80110e6:	4604      	mov	r4, r0
 80110e8:	4608      	mov	r0, r1
 80110ea:	602b      	str	r3, [r5, #0]
 80110ec:	f7f1 ffcf 	bl	800308e <_isatty>
 80110f0:	1c43      	adds	r3, r0, #1
 80110f2:	d102      	bne.n	80110fa <_isatty_r+0x1a>
 80110f4:	682b      	ldr	r3, [r5, #0]
 80110f6:	b103      	cbz	r3, 80110fa <_isatty_r+0x1a>
 80110f8:	6023      	str	r3, [r4, #0]
 80110fa:	bd38      	pop	{r3, r4, r5, pc}
 80110fc:	20006a8c 	.word	0x20006a8c

08011100 <_malloc_usable_size_r>:
 8011100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011104:	1f18      	subs	r0, r3, #4
 8011106:	2b00      	cmp	r3, #0
 8011108:	bfbc      	itt	lt
 801110a:	580b      	ldrlt	r3, [r1, r0]
 801110c:	18c0      	addlt	r0, r0, r3
 801110e:	4770      	bx	lr

08011110 <_init>:
 8011110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011112:	bf00      	nop
 8011114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011116:	bc08      	pop	{r3}
 8011118:	469e      	mov	lr, r3
 801111a:	4770      	bx	lr

0801111c <_fini>:
 801111c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801111e:	bf00      	nop
 8011120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011122:	bc08      	pop	{r3}
 8011124:	469e      	mov	lr, r3
 8011126:	4770      	bx	lr
